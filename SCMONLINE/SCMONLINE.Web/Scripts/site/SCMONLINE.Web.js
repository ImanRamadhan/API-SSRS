var SCMONLINE;
(function (SCMONLINE) {
    var mi_osReadTableMC_PXD;
    (function (mi_osReadTableMC_PXD) {
        var dt_ReadTableMC_Request = /** @class */ (function (_super) {
            __extends(dt_ReadTableMC_Request, _super);
            function dt_ReadTableMC_Request() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "CLIENT", {
                get: function () {
                    return this.cLIENTField;
                },
                set: function (value) {
                    this.cLIENTField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "QUERY_TABLE", {
                get: function () {
                    return this.qUERY_TABLEField;
                },
                set: function (value) {
                    this.qUERY_TABLEField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "DELIMITER", {
                get: function () {
                    return this.dELIMITERField;
                },
                set: function (value) {
                    this.dELIMITERField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "NO_DATA", {
                get: function () {
                    return this.nO_DATAField;
                },
                set: function (value) {
                    this.nO_DATAField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "ROWSKIPS", {
                get: function () {
                    return this.rOWSKIPSField;
                },
                set: function (value) {
                    this.rOWSKIPSField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "ROWCOUNT", {
                get: function () {
                    return this.rOWCOUNTField;
                },
                set: function (value) {
                    this.rOWCOUNTField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "OPTIONS", {
                get: function () {
                    return this.oPTIONSField;
                },
                set: function (value) {
                    this.oPTIONSField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Request.prototype, "FIELDS", {
                get: function () {
                    return this.fIELDSField;
                },
                set: function (value) {
                    this.fIELDSField = value;
                },
                enumerable: true,
                configurable: true
            });
            return dt_ReadTableMC_Request;
        }(Object));
        mi_osReadTableMC_PXD.dt_ReadTableMC_Request = dt_ReadTableMC_Request;
        var dt_ReadTableMC_RequestOPTIONS = /** @class */ (function (_super) {
            __extends(dt_ReadTableMC_RequestOPTIONS, _super);
            function dt_ReadTableMC_RequestOPTIONS() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(dt_ReadTableMC_RequestOPTIONS.prototype, "TEXT", {
                get: function () {
                    return this.tEXTField;
                },
                set: function (value) {
                    this.tEXTField = value;
                },
                enumerable: true,
                configurable: true
            });
            return dt_ReadTableMC_RequestOPTIONS;
        }(Object));
        mi_osReadTableMC_PXD.dt_ReadTableMC_RequestOPTIONS = dt_ReadTableMC_RequestOPTIONS;
        /*[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
            [System.SerializableAttribute()]
            [System.Diagnostics.DebuggerStepThroughAttribute()]
            [System.ComponentModel.DesignerCategoryAttribute("code")]
            [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:pertamina:osds:BapiPackageMultiClient")]*/
        var dt_ReadTableMC_Response = /** @class */ (function (_super) {
            __extends(dt_ReadTableMC_Response, _super);
            function dt_ReadTableMC_Response() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(dt_ReadTableMC_Response.prototype, "CLIENT", {
                get: function () {
                    return this.cLIENTField;
                },
                set: function (value) {
                    this.cLIENTField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Response.prototype, "ERROR_CODES", {
                get: function () {
                    return this.eRROR_CODESField;
                },
                set: function (value) {
                    this.eRROR_CODESField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Response.prototype, "FIELDS", {
                get: function () {
                    return this.fIELDSField;
                },
                set: function (value) {
                    this.fIELDSField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_Response.prototype, "DATA", {
                get: function () {
                    return this.dATAField;
                },
                set: function (value) {
                    this.dATAField = value;
                },
                enumerable: true,
                configurable: true
            });
            return dt_ReadTableMC_Response;
        }(Object));
        mi_osReadTableMC_PXD.dt_ReadTableMC_Response = dt_ReadTableMC_Response;
        var dt_ReadTableMC_ResponseFIELDS = /** @class */ (function (_super) {
            __extends(dt_ReadTableMC_ResponseFIELDS, _super);
            function dt_ReadTableMC_ResponseFIELDS() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(dt_ReadTableMC_ResponseFIELDS.prototype, "FIELDNAME", {
                get: function () {
                    return this.fIELDNAMEField;
                },
                set: function (value) {
                    this.fIELDNAMEField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_ResponseFIELDS.prototype, "OFFSET", {
                get: function () {
                    return this.oFFSETField;
                },
                set: function (value) {
                    this.oFFSETField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_ResponseFIELDS.prototype, "LENGTH", {
                get: function () {
                    return this.lENGTHField;
                },
                set: function (value) {
                    this.lENGTHField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_ResponseFIELDS.prototype, "TYPE", {
                get: function () {
                    return this.tYPEField;
                },
                set: function (value) {
                    this.tYPEField = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(dt_ReadTableMC_ResponseFIELDS.prototype, "FIELDTEXT", {
                get: function () {
                    return this.fIELDTEXTField;
                },
                set: function (value) {
                    this.fIELDTEXTField = value;
                },
                enumerable: true,
                configurable: true
            });
            return dt_ReadTableMC_ResponseFIELDS;
        }(Object));
        mi_osReadTableMC_PXD.dt_ReadTableMC_ResponseFIELDS = dt_ReadTableMC_ResponseFIELDS;
        var dt_ReadTableMC_ResponseDATA = /** @class */ (function (_super) {
            __extends(dt_ReadTableMC_ResponseDATA, _super);
            function dt_ReadTableMC_ResponseDATA() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(dt_ReadTableMC_ResponseDATA.prototype, "WA", {
                get: function () {
                    return this.waField;
                },
                set: function (value) {
                    this.waField = value;
                },
                enumerable: true,
                configurable: true
            });
            return dt_ReadTableMC_ResponseDATA;
        }(Object));
        mi_osReadTableMC_PXD.dt_ReadTableMC_ResponseDATA = dt_ReadTableMC_ResponseDATA;
        var dt_ReadTableMC_RequestFIELDS = /** @class */ (function (_super) {
            __extends(dt_ReadTableMC_RequestFIELDS, _super);
            function dt_ReadTableMC_RequestFIELDS() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(dt_ReadTableMC_RequestFIELDS.prototype, "FIELDNAME", {
                get: function () {
                    return this.fIELDNAMEField;
                },
                set: function (value) {
                    this.fIELDNAMEField = value;
                },
                enumerable: true,
                configurable: true
            });
            return dt_ReadTableMC_RequestFIELDS;
        }(Object));
        mi_osReadTableMC_PXD.dt_ReadTableMC_RequestFIELDS = dt_ReadTableMC_RequestFIELDS;
    })(mi_osReadTableMC_PXD = SCMONLINE.mi_osReadTableMC_PXD || (SCMONLINE.mi_osReadTableMC_PXD = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var EmailAccountsForm = /** @class */ (function (_super) {
            __extends(EmailAccountsForm, _super);
            function EmailAccountsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!EmailAccountsForm.init) {
                    EmailAccountsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.BooleanEditor;
                    var w3 = s.DateEditor;
                    Q.initFormType(EmailAccountsForm, [
                        'Email', w0,
                        'DisplayName', w0,
                        'Host', w0,
                        'Port', w1,
                        'Username', w0,
                        'Password', w0,
                        'EnableSsl', w2,
                        'UseDefaultCredentials', w2,
                        'InsertDate', w3,
                        'InsertUserId', w1,
                        'UpdateDate', w3,
                        'UpdateUserId', w1,
                        'IsActive', w1
                    ]);
                }
                return _this;
            }
            EmailAccountsForm.formKey = 'Administration.EmailAccounts';
            return EmailAccountsForm;
        }(Serenity.PrefixedContext));
        Administration.EmailAccountsForm = EmailAccountsForm;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var EmailAccountsRow;
        (function (EmailAccountsRow) {
            EmailAccountsRow.idProperty = 'Id';
            EmailAccountsRow.nameProperty = 'Email';
            EmailAccountsRow.localTextPrefix = 'Administration.EmailAccounts';
        })(EmailAccountsRow = Administration.EmailAccountsRow || (Administration.EmailAccountsRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var EmailAccountsService;
        (function (EmailAccountsService) {
            EmailAccountsService.baseUrl = 'Administration/EmailAccounts';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                EmailAccountsService[x] = function (r, s, o) {
                    return Q.serviceRequest(EmailAccountsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(EmailAccountsService = Administration.EmailAccountsService || (Administration.EmailAccountsService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var LanguageForm = /** @class */ (function (_super) {
            __extends(LanguageForm, _super);
            function LanguageForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LanguageForm.init) {
                    LanguageForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LanguageForm, [
                        'LanguageId', w0,
                        'LanguageName', w0
                    ]);
                }
                return _this;
            }
            LanguageForm.formKey = 'Administration.Language';
            return LanguageForm;
        }(Serenity.PrefixedContext));
        Administration.LanguageForm = LanguageForm;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var LanguageRow;
        (function (LanguageRow) {
            LanguageRow.idProperty = 'Id';
            LanguageRow.nameProperty = 'LanguageName';
            LanguageRow.localTextPrefix = 'Administration.Language';
            LanguageRow.lookupKey = 'Administration.Language';
            function getLookup() {
                return Q.getLookup('Administration.Language');
            }
            LanguageRow.getLookup = getLookup;
        })(LanguageRow = Administration.LanguageRow || (Administration.LanguageRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var LanguageService;
        (function (LanguageService) {
            LanguageService.baseUrl = 'Administration/Language';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LanguageService[x] = function (r, s, o) {
                    return Q.serviceRequest(LanguageService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LanguageService = Administration.LanguageService || (Administration.LanguageService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var QueuedEmailForm = /** @class */ (function (_super) {
            __extends(QueuedEmailForm, _super);
            function QueuedEmailForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!QueuedEmailForm.init) {
                    QueuedEmailForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.BooleanEditor;
                    Q.initFormType(QueuedEmailForm, [
                        'PriorityId', w0,
                        'From', w1,
                        'FromName', w1,
                        'To', w1,
                        'ToName', w1,
                        'ReplyTo', w1,
                        'ReplyToName', w1,
                        'Cc', w1,
                        'Bcc', w1,
                        'Subject', w1,
                        'Body', w1,
                        'AttachmentFilePath', w1,
                        'AttachmentFileName', w1,
                        'AttachedDownloadId', w0,
                        'CreatedOnUtc', w2,
                        'SentTries', w0,
                        'SentOnUtc', w2,
                        'EmailAccountId', w0,
                        'DontSendBeforeDateUtc', w2,
                        'HasError', w3,
                        'Result', w1
                    ]);
                }
                return _this;
            }
            QueuedEmailForm.formKey = 'Administration.QueuedEmail';
            return QueuedEmailForm;
        }(Serenity.PrefixedContext));
        Administration.QueuedEmailForm = QueuedEmailForm;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var QueuedEmailRow;
        (function (QueuedEmailRow) {
            QueuedEmailRow.idProperty = 'Id';
            QueuedEmailRow.nameProperty = 'From';
            QueuedEmailRow.localTextPrefix = 'Administration.QueuedEmail';
        })(QueuedEmailRow = Administration.QueuedEmailRow || (Administration.QueuedEmailRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var QueuedEmailService;
        (function (QueuedEmailService) {
            QueuedEmailService.baseUrl = 'Administration/QueuedEmail';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                QueuedEmailService[x] = function (r, s, o) {
                    return Q.serviceRequest(QueuedEmailService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(QueuedEmailService = Administration.QueuedEmailService || (Administration.QueuedEmailService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RoleForm = /** @class */ (function (_super) {
            __extends(RoleForm, _super);
            function RoleForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RoleForm.init) {
                    RoleForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(RoleForm, [
                        'RoleName', w0
                    ]);
                }
                return _this;
            }
            RoleForm.formKey = 'Administration.Role';
            return RoleForm;
        }(Serenity.PrefixedContext));
        Administration.RoleForm = RoleForm;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RolePermissionRow;
        (function (RolePermissionRow) {
            RolePermissionRow.idProperty = 'RolePermissionId';
            RolePermissionRow.nameProperty = 'PermissionKey';
            RolePermissionRow.localTextPrefix = 'Administration.RolePermission';
            RolePermissionRow.lookupKey = 'Administration.RolePermission';
            function getLookup() {
                return Q.getLookup('Administration.RolePermission');
            }
            RolePermissionRow.getLookup = getLookup;
        })(RolePermissionRow = Administration.RolePermissionRow || (Administration.RolePermissionRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RolePermissionService;
        (function (RolePermissionService) {
            RolePermissionService.baseUrl = 'Administration/RolePermission';
            [
                'Update',
                'List'
            ].forEach(function (x) {
                RolePermissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(RolePermissionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RolePermissionService = Administration.RolePermissionService || (Administration.RolePermissionService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RoleRow;
        (function (RoleRow) {
            RoleRow.idProperty = 'RoleId';
            RoleRow.nameProperty = 'RoleName';
            RoleRow.localTextPrefix = 'Administration.Role';
            RoleRow.lookupKey = 'Administration.Role';
            function getLookup() {
                return Q.getLookup('Administration.Role');
            }
            RoleRow.getLookup = getLookup;
        })(RoleRow = Administration.RoleRow || (Administration.RoleRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RoleService;
        (function (RoleService) {
            RoleService.baseUrl = 'Administration/Role';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(RoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RoleService = Administration.RoleService || (Administration.RoleService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var SettingForm = /** @class */ (function (_super) {
            __extends(SettingForm, _super);
            function SettingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!SettingForm.init) {
                    SettingForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(SettingForm, [
                        'Value', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            SettingForm.formKey = 'Administration.Setting';
            return SettingForm;
        }(Serenity.PrefixedContext));
        Administration.SettingForm = SettingForm;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var SettingRow;
        (function (SettingRow) {
            SettingRow.idProperty = 'Name';
            SettingRow.nameProperty = 'Name';
            SettingRow.localTextPrefix = 'Administration.Setting';
            SettingRow.lookupKey = 'Administration.Setting';
            function getLookup() {
                return Q.getLookup('Administration.Setting');
            }
            SettingRow.getLookup = getLookup;
        })(SettingRow = Administration.SettingRow || (Administration.SettingRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var SettingService;
        (function (SettingService) {
            SettingService.baseUrl = 'Administration/Setting';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SettingService[x] = function (r, s, o) {
                    return Q.serviceRequest(SettingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(SettingService = Administration.SettingService || (Administration.SettingService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var TranslationService;
        (function (TranslationService) {
            TranslationService.baseUrl = 'Administration/Translation';
            [
                'List',
                'Update'
            ].forEach(function (x) {
                TranslationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TranslationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TranslationService = Administration.TranslationService || (Administration.TranslationService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserForm = /** @class */ (function (_super) {
            __extends(UserForm, _super);
            function UserForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!UserForm.init) {
                    UserForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.EmailEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.PasswordEditor;
                    Q.initFormType(UserForm, [
                        'Username', w0,
                        'DisplayName', w0,
                        'Email', w1,
                        'UserImage', w2,
                        'Password', w3,
                        'PasswordConfirm', w3,
                        'Source', w0
                    ]);
                }
                return _this;
            }
            UserForm.formKey = 'Administration.User';
            return UserForm;
        }(Serenity.PrefixedContext));
        Administration.UserForm = UserForm;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserPermissionRow;
        (function (UserPermissionRow) {
            UserPermissionRow.idProperty = 'UserPermissionId';
            UserPermissionRow.nameProperty = 'PermissionKey';
            UserPermissionRow.localTextPrefix = 'Administration.UserPermission';
        })(UserPermissionRow = Administration.UserPermissionRow || (Administration.UserPermissionRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserPermissionService;
        (function (UserPermissionService) {
            UserPermissionService.baseUrl = 'Administration/UserPermission';
            [
                'Update',
                'List',
                'ListRolePermissions',
                'ListPermissionKeys'
            ].forEach(function (x) {
                UserPermissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserPermissionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserPermissionService = Administration.UserPermissionService || (Administration.UserPermissionService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserRoleRow;
        (function (UserRoleRow) {
            UserRoleRow.idProperty = 'UserRoleId';
            UserRoleRow.localTextPrefix = 'Administration.UserRole';
        })(UserRoleRow = Administration.UserRoleRow || (Administration.UserRoleRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserRoleService;
        (function (UserRoleService) {
            UserRoleService.baseUrl = 'Administration/UserRole';
            [
                'Update',
                'List'
            ].forEach(function (x) {
                UserRoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserRoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserRoleService = Administration.UserRoleService || (Administration.UserRoleService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserRow;
        (function (UserRow) {
            UserRow.idProperty = 'UserId';
            UserRow.isActiveProperty = 'IsActive';
            UserRow.nameProperty = 'Username';
            UserRow.localTextPrefix = 'Administration.User';
            UserRow.lookupKey = 'Administration.User';
            function getLookup() {
                return Q.getLookup('Administration.User');
            }
            UserRow.getLookup = getLookup;
        })(UserRow = Administration.UserRow || (Administration.UserRow = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserService;
        (function (UserService) {
            UserService.baseUrl = 'Administration/User';
            [
                'Create',
                'Update',
                'Delete',
                'Undelete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UserService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserService = Administration.UserService || (Administration.UserService = {}));
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var BasicSamplesService;
        (function (BasicSamplesService) {
            BasicSamplesService.baseUrl = 'BasicSamples/BasicSamples';
            [
                'OrdersByShipper',
                'OrderBulkAction'
            ].forEach(function (x) {
                BasicSamplesService[x] = function (r, s, o) {
                    return Q.serviceRequest(BasicSamplesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(BasicSamplesService = BasicSamples.BasicSamplesService || (BasicSamples.BasicSamplesService = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ChangingLookupTextForm = /** @class */ (function (_super) {
            __extends(ChangingLookupTextForm, _super);
            function ChangingLookupTextForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ChangingLookupTextForm.init) {
                    ChangingLookupTextForm.init = true;
                    var s = Serenity;
                    var w0 = BasicSamples.ChangingLookupTextEditor;
                    var w1 = s.DecimalEditor;
                    var w2 = s.IntegerEditor;
                    Q.initFormType(ChangingLookupTextForm, [
                        'ProductID', w0,
                        'UnitPrice', w1,
                        'Quantity', w2,
                        'Discount', w1
                    ]);
                }
                return _this;
            }
            ChangingLookupTextForm.formKey = 'BasicSamples.ChangingLookupText';
            return ChangingLookupTextForm;
        }(Serenity.PrefixedContext));
        BasicSamples.ChangingLookupTextForm = ChangingLookupTextForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var CustomerGrossSalesService;
        (function (CustomerGrossSalesService) {
            CustomerGrossSalesService.baseUrl = 'BasicSamples/CustomerGrossSales';
            [
                'List'
            ].forEach(function (x) {
                CustomerGrossSalesService[x] = function (r, s, o) {
                    return Q.serviceRequest(CustomerGrossSalesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CustomerGrossSalesService = BasicSamples.CustomerGrossSalesService || (BasicSamples.CustomerGrossSalesService = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DragDropSampleForm = /** @class */ (function (_super) {
            __extends(DragDropSampleForm, _super);
            function DragDropSampleForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DragDropSampleForm.init) {
                    DragDropSampleForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(DragDropSampleForm, [
                        'Title', w0
                    ]);
                }
                return _this;
            }
            DragDropSampleForm.formKey = 'BasicSamples.DragDropSample';
            return DragDropSampleForm;
        }(Serenity.PrefixedContext));
        BasicSamples.DragDropSampleForm = DragDropSampleForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DragDropSampleRow;
        (function (DragDropSampleRow) {
            DragDropSampleRow.idProperty = 'Id';
            DragDropSampleRow.nameProperty = 'Title';
            DragDropSampleRow.localTextPrefix = 'Northwind.DragDropSample';
        })(DragDropSampleRow = BasicSamples.DragDropSampleRow || (BasicSamples.DragDropSampleRow = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DragDropSampleService;
        (function (DragDropSampleService) {
            DragDropSampleService.baseUrl = 'BasicSamples/DragDropSample';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DragDropSampleService[x] = function (r, s, o) {
                    return Q.serviceRequest(DragDropSampleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DragDropSampleService = BasicSamples.DragDropSampleService || (BasicSamples.DragDropSampleService = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var FilteredLookupInDetailForm = /** @class */ (function (_super) {
            __extends(FilteredLookupInDetailForm, _super);
            function FilteredLookupInDetailForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!FilteredLookupInDetailForm.init) {
                    FilteredLookupInDetailForm.init = true;
                    var s = Serenity;
                    var w0 = SCMONLINE.Northwind.CustomerEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = BasicSamples.FilteredLookupDetailEditor;
                    Q.initFormType(FilteredLookupInDetailForm, [
                        'CustomerID', w0,
                        'OrderDate', w1,
                        'CategoryID', w2,
                        'DetailList', w3
                    ]);
                }
                return _this;
            }
            FilteredLookupInDetailForm.formKey = 'BasicSamples.FilteredLookupInDetail';
            return FilteredLookupInDetailForm;
        }(Serenity.PrefixedContext));
        BasicSamples.FilteredLookupInDetailForm = FilteredLookupInDetailForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var HardcodedValuesForm = /** @class */ (function (_super) {
            __extends(HardcodedValuesForm, _super);
            function HardcodedValuesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!HardcodedValuesForm.init) {
                    HardcodedValuesForm.init = true;
                    var s = Serenity;
                    var w0 = BasicSamples.HardcodedValuesEditor;
                    Q.initFormType(HardcodedValuesForm, [
                        'SomeValue', w0
                    ]);
                }
                return _this;
            }
            HardcodedValuesForm.formKey = 'BasicSamples.HarcodedValues';
            return HardcodedValuesForm;
        }(Serenity.PrefixedContext));
        BasicSamples.HardcodedValuesForm = HardcodedValuesForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var LookupFilterByMultipleForm = /** @class */ (function (_super) {
            __extends(LookupFilterByMultipleForm, _super);
            function LookupFilterByMultipleForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LookupFilterByMultipleForm.init) {
                    LookupFilterByMultipleForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.ImageUploadEditor;
                    var w2 = s.BooleanEditor;
                    var w3 = s.LookupEditor;
                    var w4 = BasicSamples.ProduceSeafoodCategoryEditor;
                    var w5 = s.DecimalEditor;
                    var w6 = s.IntegerEditor;
                    Q.initFormType(LookupFilterByMultipleForm, [
                        'ProductName', w0,
                        'ProductImage', w1,
                        'Discontinued', w2,
                        'SupplierID', w3,
                        'CategoryID', w4,
                        'QuantityPerUnit', w0,
                        'UnitPrice', w5,
                        'UnitsInStock', w6,
                        'UnitsOnOrder', w6,
                        'ReorderLevel', w6
                    ]);
                }
                return _this;
            }
            LookupFilterByMultipleForm.formKey = 'BasicSamples.LookupFilterByMultiple';
            return LookupFilterByMultipleForm;
        }(Serenity.PrefixedContext));
        BasicSamples.LookupFilterByMultipleForm = LookupFilterByMultipleForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var PopulateLinkedDataForm = /** @class */ (function (_super) {
            __extends(PopulateLinkedDataForm, _super);
            function PopulateLinkedDataForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PopulateLinkedDataForm.init) {
                    PopulateLinkedDataForm.init = true;
                    var s = Serenity;
                    var w0 = SCMONLINE.Northwind.CustomerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.LookupEditor;
                    var w4 = SCMONLINE.Northwind.OrderDetailsEditor;
                    Q.initFormType(PopulateLinkedDataForm, [
                        'CustomerID', w0,
                        'CustomerContactName', w1,
                        'CustomerContactTitle', w1,
                        'CustomerCity', w1,
                        'CustomerRegion', w1,
                        'CustomerCountry', w1,
                        'CustomerPhone', w1,
                        'CustomerFax', w1,
                        'OrderDate', w2,
                        'RequiredDate', w2,
                        'EmployeeID', w3,
                        'DetailList', w4
                    ]);
                }
                return _this;
            }
            PopulateLinkedDataForm.formKey = 'BasicSamples.PopulateLinkedData';
            return PopulateLinkedDataForm;
        }(Serenity.PrefixedContext));
        BasicSamples.PopulateLinkedDataForm = PopulateLinkedDataForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ProductExcelImportForm = /** @class */ (function (_super) {
            __extends(ProductExcelImportForm, _super);
            function ProductExcelImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductExcelImportForm.init) {
                    ProductExcelImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(ProductExcelImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            ProductExcelImportForm.formKey = 'BasicSamples.ProductExcelImport';
            return ProductExcelImportForm;
        }(Serenity.PrefixedContext));
        BasicSamples.ProductExcelImportForm = ProductExcelImportForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ProductExcelImportService;
        (function (ProductExcelImportService) {
            ProductExcelImportService.baseUrl = 'BasicSamples/ProductExcelImport';
            [
                'ExcelImport'
            ].forEach(function (x) {
                ProductExcelImportService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductExcelImportService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductExcelImportService = BasicSamples.ProductExcelImportService || (BasicSamples.ProductExcelImportService = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var StaticTextBlockForm = /** @class */ (function (_super) {
            __extends(StaticTextBlockForm, _super);
            function StaticTextBlockForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!StaticTextBlockForm.init) {
                    StaticTextBlockForm.init = true;
                    var s = Serenity;
                    var w0 = SCMONLINE.StaticTextBlock;
                    var w1 = s.StringEditor;
                    Q.initFormType(StaticTextBlockForm, [
                        'StaticText', w0,
                        'SomeInput', w1,
                        'HtmlList', w0,
                        'FromLocalText', w0,
                        'DisplayFieldValue', w0
                    ]);
                }
                return _this;
            }
            StaticTextBlockForm.formKey = 'BasicSamples.StaticTextBlock';
            return StaticTextBlockForm;
        }(Serenity.PrefixedContext));
        BasicSamples.StaticTextBlockForm = StaticTextBlockForm;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var VSGalleryQAService;
        (function (VSGalleryQAService) {
            VSGalleryQAService.baseUrl = 'BasicSamples/VSGalleryQA';
            [
                'List'
            ].forEach(function (x) {
                VSGalleryQAService[x] = function (r, s, o) {
                    return Q.serviceRequest(VSGalleryQAService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VSGalleryQAService = BasicSamples.VSGalleryQAService || (BasicSamples.VSGalleryQAService = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var UserPreferenceRow;
        (function (UserPreferenceRow) {
            UserPreferenceRow.idProperty = 'UserPreferenceId';
            UserPreferenceRow.nameProperty = 'Name';
            UserPreferenceRow.localTextPrefix = 'Common.UserPreference';
        })(UserPreferenceRow = Common.UserPreferenceRow || (Common.UserPreferenceRow = {}));
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var UserPreferenceService;
        (function (UserPreferenceService) {
            UserPreferenceService.baseUrl = 'Common/UserPreference';
            [
                'Update',
                'Retrieve'
            ].forEach(function (x) {
                UserPreferenceService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserPreferenceService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserPreferenceService = Common.UserPreferenceService || (Common.UserPreferenceService = {}));
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantForm = /** @class */ (function (_super) {
            __extends(ProcParticipantForm, _super);
            function ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcParticipantForm.init) {
                    ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.BooleanEditor;
                    var w3 = s.DateEditor;
                    var w4 = s.DecimalEditor;
                    Q.initFormType(ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w0,
                        'PriceDocumentFile', w0,
                        'PriceDocumentName', w0,
                        'TechSpecDocFile', w0,
                        'TechSpecDocName', w0,
                        'SupportingLetterFile', w0,
                        'SupportingLetterName', w0,
                        'CatalogFile', w0,
                        'CatalogName', w0,
                        'SubmitDocTnc', w2,
                        'SubmitDocTncDate', w3,
                        'AdminDocExists', w2,
                        'TechSpecDocExists', w2,
                        'SupportingLetterExists', w2,
                        'CatalogExists', w2,
                        'OpeningDocDesc', w0,
                        'AdminDocAtk', w1,
                        'TechSpecDocAtk', w1,
                        'SupportingLetterAtk', w1,
                        'CatalogAtk', w1,
                        'EvaluationDesc', w0,
                        'ClarificationRequest', w0,
                        'EvaluationConclusionId', w1,
                        'ClarificationOffer', w0,
                        'ClarificationResult', w0,
                        'Source', w0,
                        'F5ParticipantSubmitDate', w3,
                        'F5ParticipantSubmitBy', w0,
                        'FinalBidPrice', w4,
                        'SubmitObjection', w2,
                        'ObjectionDescription', w0,
                        'F15ParticipantSubmitDate', w3,
                        'F15ParticipantSubmitBy', w0,
                        'Invitation', w2,
                        'QuoteDesc', w0
                    ]);
                }
                return _this;
            }
            ProcParticipantForm.formKey = 'Default.ProcParticipant';
            return ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Default.ProcParticipantForm = ProcParticipantForm;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(ProcParticipantItemForm, _super);
            function ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcParticipantItemForm.init) {
                    ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DecimalEditor;
                    var w2 = s.IntegerEditor;
                    var w3 = s.BooleanEditor;
                    Q.initFormType(ProcParticipantItemForm, [
                        'ProcParticipantId', w0,
                        'ProcurementId', w0,
                        'RfqItemId', w0,
                        'BidPrice', w1,
                        'BidPriceVsOe', w1,
                        'BidPriceVsOePercentage', w1,
                        'Rank', w2,
                        'EvaluationDescription', w0,
                        'NegotiationPrice', w1,
                        'NpVsOe', w1,
                        'NpVsOePercentage', w1,
                        'NegotiationRank', w2,
                        'NegotiationDesc', w0,
                        'ProposeDisclaimer', w3,
                        'DisclaimerDesc', w0,
                        'EvaluationConclusionItemId', w2
                    ]);
                }
                return _this;
            }
            ProcParticipantItemForm.formKey = 'Default.ProcParticipantItem';
            return ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Default.ProcParticipantItemForm = ProcParticipantItemForm;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantItemRow;
        (function (ProcParticipantItemRow) {
            ProcParticipantItemRow.idProperty = 'ProcParticipantItemId';
            ProcParticipantItemRow.nameProperty = 'EvaluationDescription';
            ProcParticipantItemRow.localTextPrefix = 'Default.ProcParticipantItem';
        })(ProcParticipantItemRow = Default.ProcParticipantItemRow || (Default.ProcParticipantItemRow = {}));
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantItemService;
        (function (ProcParticipantItemService) {
            ProcParticipantItemService.baseUrl = 'Default/ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcParticipantItemService = Default.ProcParticipantItemService || (Default.ProcParticipantItemService = {}));
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantRow;
        (function (ProcParticipantRow) {
            ProcParticipantRow.idProperty = 'ProcParticipantId';
            ProcParticipantRow.nameProperty = 'VendorId';
            ProcParticipantRow.localTextPrefix = 'Default.ProcParticipant';
        })(ProcParticipantRow = Default.ProcParticipantRow || (Default.ProcParticipantRow = {}));
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantService;
        (function (ProcParticipantService) {
            ProcParticipantService.baseUrl = 'Default/ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcParticipantService = Default.ProcParticipantService || (Default.ProcParticipantService = {}));
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcurementForm = /** @class */ (function (_super) {
            __extends(ProcurementForm, _super);
            function ProcurementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcurementForm.init) {
                    ProcurementForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.DecimalEditor;
                    var w3 = s.IntegerEditor;
                    var w4 = s.BooleanEditor;
                    Q.initFormType(ProcurementForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w0,
                        'Title', w0,
                        'Classification', w0,
                        'Qualification', w0,
                        'RequestedBy', w0,
                        'RequestorPosition', w0,
                        'ApprovedBy', w0,
                        'ApproverPosition', w0,
                        'SapBidderListCreatedBy', w0,
                        'SapBidderListCreatedDate', w1,
                        'CreatedBy', w0,
                        'CreatedDate', w1,
                        'GuaranteePercentage', w2,
                        'OfficeAddress', w3,
                        'ProcValueRangeId', w3,
                        'CommitteeTypeId', w3,
                        'PerformanceGuaranteeRequired', w4,
                        'TenderPeriod', w3,
                        'DeliveryTime', w3,
                        'DestinationId', w3,
                        'ContractTypeId', w3,
                        'CurrencyId', w0,
                        'DocSubmitMethodId', w3,
                        'AanwijzingExists', w4,
                        'AanwijzingDate', w1,
                        'AanwijzingClosingDate', w1,
                        'AanwijzingLocation', w0,
                        'AanwijzingClosingLocation', w0,
                        'AanwijzingSecretary', w0,
                        'TechnicalExplanation', w0,
                        'AdministrativeExplanation', w0,
                        'OtherExplanation', w0,
                        'AanwijzingSummary', w0,
                        'FieldSurveyExists', w4,
                        'FieldSurveyAddress', w0,
                        'ItbDocumentFile', w0,
                        'ItbDocumentName', w0,
                        'RksDocumentFile', w0,
                        'RksDocumentName', w0,
                        'TenderDocSubmitOpenDate', w1,
                        'TenderDocSubmitCloseDate', w1,
                        'OrderTypeId', w0,
                        'PurchDocNum', w0,
                        'RfqDate', w1,
                        'QuotationDeadline', w1,
                        'PurchGroup', w0,
                        'PrNo', w0,
                        'AuthPersonName', w0,
                        'AuthPosition', w0,
                        'HeaderText', w0,
                        'HeaderNote', w0,
                        'WorkDescription', w0,
                        'BankKey', w0,
                        'PoCover', w0,
                        'DeliveryAddress', w0,
                        'ToPTargVal', w0,
                        'YourReference', w0,
                        'OurReference', w0,
                        'SalesPerson', w0,
                        'Telephone', w0,
                        'ValidityStart', w1,
                        'ValidityEnd', w1,
                        'ItemInterval', w2,
                        'SubItemInterval', w2,
                        'Warranty', w1,
                        'Language', w0,
                        'EvaluationClosingPriceDate', w1,
                        'ReviewOeRequired', w4,
                        'ProcAgreement', w4,
                        'ProcAgreementDate', w1,
                        'ProcAsRequired', w4,
                        'ProcAsApproved', w4,
                        'ProcAsApprovedDate', w1,
                        'ProcAsDesc', w0,
                        'FinalConclusionDesc', w0,
                        'WinnerNominationDate', w1,
                        'ObjectionCloseDate', w1,
                        'PoDocName', w0,
                        'TemporaryPic', w0,
                        'PoNumber', w0,
                        'PoDocFile', w0,
                        'F1SubmitDate', w1,
                        'F1SubmitBy', w0,
                        'F2SubmitDate', w1,
                        'F2SubmitBy', w0,
                        'F3SubmitDate', w1,
                        'F3SubmitBy', w0,
                        'F31SubmitDate', w1,
                        'F31SubmitBy', w0,
                        'F4SubmitDate', w1,
                        'F4SubmitBy', w0,
                        'F5SubmitDate', w1,
                        'F5SubmitBy', w0,
                        'F6SubmitDate', w1,
                        'F6SubmitBy', w0,
                        'F7SubmitDate', w1,
                        'F7SubmitBy', w0,
                        'F8SubmitDate', w1,
                        'F8SubmitBy', w0,
                        'F9SubmitDate', w1,
                        'F9SubmitBy', w0,
                        'F10SubmitDate', w1,
                        'F10SubmitBy', w0,
                        'F11SubmitDate', w1,
                        'F11SubmitBy', w0,
                        'F12SubmitDate', w1,
                        'F12SubmitBy', w0,
                        'F13SubmitDate', w1,
                        'F13SubmitBy', w0,
                        'F14SubmitDate', w1,
                        'F14SubmitBy', w0,
                        'F15SubmitDate', w1,
                        'F15SubmitBy', w0,
                        'F16SubmitDate', w1,
                        'F16SubmitBy', w0,
                        'F17SubmitDate', w1,
                        'F17SubmitBy', w0,
                        'F19SubmitDate', w1,
                        'F19SubmitBy', w0,
                        'ProcurementMethodId', w0,
                        'District', w0,
                        'Csms', w0,
                        'MinScore', w0,
                        'ProcRejectTender', w4,
                        'ProcRejectTenderDesc', w0
                    ]);
                }
                return _this;
            }
            ProcurementForm.formKey = 'Default.Procurement';
            return ProcurementForm;
        }(Serenity.PrefixedContext));
        Default.ProcurementForm = ProcurementForm;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcurementRow;
        (function (ProcurementRow) {
            ProcurementRow.idProperty = 'ProcurementId';
            ProcurementRow.nameProperty = 'ProcurementTypeId';
            ProcurementRow.localTextPrefix = 'Default.Procurement';
        })(ProcurementRow = Default.ProcurementRow || (Default.ProcurementRow = {}));
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcurementService;
        (function (ProcurementService) {
            ProcurementService.baseUrl = 'Default/Procurement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcurementService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcurementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcurementService = Default.ProcurementService || (Default.ProcurementService = {}));
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var CountingNotifRow;
        (function (CountingNotifRow) {
            CountingNotifRow.idProperty = 'NotifCount';
            CountingNotifRow.localTextPrefix = 'Inbox.CountingNotif';
        })(CountingNotifRow = Inbox.CountingNotifRow || (Inbox.CountingNotifRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var CountingNotifService;
        (function (CountingNotifService) {
            CountingNotifService.baseUrl = 'Inbox/CountingNotif';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CountingNotifService[x] = function (r, s, o) {
                    return Q.serviceRequest(CountingNotifService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CountingNotifService = Inbox.CountingNotifService || (Inbox.CountingNotifService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var GraphBarRow;
        (function (GraphBarRow) {
            GraphBarRow.idProperty = 'stat';
            GraphBarRow.nameProperty = 'label';
            GraphBarRow.localTextPrefix = 'Inbox.GraphBar';
        })(GraphBarRow = Inbox.GraphBarRow || (Inbox.GraphBarRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var GraphBarService;
        (function (GraphBarService) {
            GraphBarService.baseUrl = 'Inbox/GraphBar';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                GraphBarService[x] = function (r, s, o) {
                    return Q.serviceRequest(GraphBarService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(GraphBarService = Inbox.GraphBarService || (Inbox.GraphBarService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var NotificationForm = /** @class */ (function (_super) {
            __extends(NotificationForm, _super);
            function NotificationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!NotificationForm.init) {
                    NotificationForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.IntegerEditor;
                    Q.initFormType(NotificationForm, [
                        'Title', w0,
                        'Description', w0,
                        'Link', w0,
                        'CreateDate', w1,
                        'ReadingDate', w1,
                        'UserId', w2
                    ]);
                }
                return _this;
            }
            NotificationForm.formKey = 'Inbox.Notification';
            return NotificationForm;
        }(Serenity.PrefixedContext));
        Inbox.NotificationForm = NotificationForm;
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var NotificationRow;
        (function (NotificationRow) {
            NotificationRow.idProperty = 'NotificationId';
            NotificationRow.nameProperty = 'Title';
            NotificationRow.localTextPrefix = 'Inbox.Notification';
        })(NotificationRow = Inbox.NotificationRow || (Inbox.NotificationRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var NotificationService;
        (function (NotificationService) {
            NotificationService.baseUrl = 'Inbox/Notification';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                NotificationService[x] = function (r, s, o) {
                    return Q.serviceRequest(NotificationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(NotificationService = Inbox.NotificationService || (Inbox.NotificationService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var ShowNotificationRow;
        (function (ShowNotificationRow) {
            ShowNotificationRow.idProperty = 'NotificationId';
            ShowNotificationRow.nameProperty = 'Title';
            ShowNotificationRow.localTextPrefix = 'Inbox.ShowNotification';
        })(ShowNotificationRow = Inbox.ShowNotificationRow || (Inbox.ShowNotificationRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var ShowNotificationService;
        (function (ShowNotificationService) {
            ShowNotificationService.baseUrl = 'Inbox/ShowNotification';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShowNotificationService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShowNotificationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ShowNotificationService = Inbox.ShowNotificationService || (Inbox.ShowNotificationService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var StoreGraphs2Row;
        (function (StoreGraphs2Row) {
            StoreGraphs2Row.idProperty = 'label';
            StoreGraphs2Row.nameProperty = 'label';
            StoreGraphs2Row.localTextPrefix = 'Inbox.StoreGraphs2';
        })(StoreGraphs2Row = Inbox.StoreGraphs2Row || (Inbox.StoreGraphs2Row = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var StoreGraphs2Service;
        (function (StoreGraphs2Service) {
            StoreGraphs2Service.baseUrl = 'Inbox/StoreGraphs2';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                StoreGraphs2Service[x] = function (r, s, o) {
                    return Q.serviceRequest(StoreGraphs2Service.baseUrl + '/' + x, r, s, o);
                };
            });
        })(StoreGraphs2Service = Inbox.StoreGraphs2Service || (Inbox.StoreGraphs2Service = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var StoreGraphsFCRow;
        (function (StoreGraphsFCRow) {
            StoreGraphsFCRow.idProperty = 'buyer';
            StoreGraphsFCRow.nameProperty = 'label';
            StoreGraphsFCRow.localTextPrefix = 'Inbox.StoreGraphsFC';
        })(StoreGraphsFCRow = Inbox.StoreGraphsFCRow || (Inbox.StoreGraphsFCRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var StoreGraphsFCService;
        (function (StoreGraphsFCService) {
            StoreGraphsFCService.baseUrl = 'Inbox/StoreGraphsFC';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                StoreGraphsFCService[x] = function (r, s, o) {
                    return Q.serviceRequest(StoreGraphsFCService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(StoreGraphsFCService = Inbox.StoreGraphsFCService || (Inbox.StoreGraphsFCService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var TryGraphRow;
        (function (TryGraphRow) {
            TryGraphRow.idProperty = 'stat';
            TryGraphRow.nameProperty = 'label';
            TryGraphRow.localTextPrefix = 'Inbox.TryGraph';
        })(TryGraphRow = Inbox.TryGraphRow || (Inbox.TryGraphRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var TryGraphService;
        (function (TryGraphService) {
            TryGraphService.baseUrl = 'Inbox/TryGraph';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TryGraphService[x] = function (r, s, o) {
                    return Q.serviceRequest(TryGraphService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TryGraphService = Inbox.TryGraphService || (Inbox.TryGraphService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var ViewStoredGraphRow;
        (function (ViewStoredGraphRow) {
            ViewStoredGraphRow.idProperty = 'Name';
            ViewStoredGraphRow.nameProperty = 'Name';
            ViewStoredGraphRow.localTextPrefix = 'Inbox.ViewStoredGraph';
        })(ViewStoredGraphRow = Inbox.ViewStoredGraphRow || (Inbox.ViewStoredGraphRow = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var ViewStoredGraphService;
        (function (ViewStoredGraphService) {
            ViewStoredGraphService.baseUrl = 'Inbox/ViewStoredGraph';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ViewStoredGraphService[x] = function (r, s, o) {
                    return Q.serviceRequest(ViewStoredGraphService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ViewStoredGraphService = Inbox.ViewStoredGraphService || (Inbox.ViewStoredGraphService = {}));
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var ChangePasswordForm = /** @class */ (function (_super) {
            __extends(ChangePasswordForm, _super);
            function ChangePasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ChangePasswordForm.init) {
                    ChangePasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.PasswordEditor;
                    Q.initFormType(ChangePasswordForm, [
                        'OldPassword', w0,
                        'NewPassword', w0,
                        'ConfirmPassword', w0
                    ]);
                }
                return _this;
            }
            ChangePasswordForm.formKey = 'Membership.ChangePassword';
            return ChangePasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ChangePasswordForm = ChangePasswordForm;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordForm = /** @class */ (function (_super) {
            __extends(ForgotPasswordForm, _super);
            function ForgotPasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ForgotPasswordForm.init) {
                    ForgotPasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.EmailEditor;
                    Q.initFormType(ForgotPasswordForm, [
                        'Email', w0
                    ]);
                }
                return _this;
            }
            ForgotPasswordForm.formKey = 'Membership.ForgotPassword';
            return ForgotPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ForgotPasswordForm = ForgotPasswordForm;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var LoginForm = /** @class */ (function (_super) {
            __extends(LoginForm, _super);
            function LoginForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LoginForm.init) {
                    LoginForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.PasswordEditor;
                    Q.initFormType(LoginForm, [
                        'Username', w0,
                        'Password', w1
                    ]);
                }
                return _this;
            }
            LoginForm.formKey = 'Membership.Login';
            return LoginForm;
        }(Serenity.PrefixedContext));
        Membership.LoginForm = LoginForm;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var ResetPasswordForm = /** @class */ (function (_super) {
            __extends(ResetPasswordForm, _super);
            function ResetPasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ResetPasswordForm.init) {
                    ResetPasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.PasswordEditor;
                    Q.initFormType(ResetPasswordForm, [
                        'NewPassword', w0,
                        'ConfirmPassword', w0
                    ]);
                }
                return _this;
            }
            ResetPasswordForm.formKey = 'Membership.ResetPassword';
            return ResetPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ResetPasswordForm = ResetPasswordForm;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var SignUpForm = /** @class */ (function (_super) {
            __extends(SignUpForm, _super);
            function SignUpForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!SignUpForm.init) {
                    SignUpForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.EmailEditor;
                    var w2 = s.PasswordEditor;
                    Q.initFormType(SignUpForm, [
                        'DisplayName', w0,
                        'Email', w1,
                        'ConfirmEmail', w1,
                        'Password', w2,
                        'ConfirmPassword', w2
                    ]);
                }
                return _this;
            }
            SignUpForm.formKey = 'Membership.SignUp';
            return SignUpForm;
        }(Serenity.PrefixedContext));
        Membership.SignUpForm = SignUpForm;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryForm = /** @class */ (function (_super) {
            __extends(CategoryForm, _super);
            function CategoryForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CategoryForm.init) {
                    CategoryForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CategoryForm, [
                        'CategoryName', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            CategoryForm.formKey = 'Northwind.Category';
            return CategoryForm;
        }(Serenity.PrefixedContext));
        Northwind.CategoryForm = CategoryForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryLangRow;
        (function (CategoryLangRow) {
            CategoryLangRow.idProperty = 'Id';
            CategoryLangRow.nameProperty = 'CategoryName';
            CategoryLangRow.localTextPrefix = 'Northwind.CategoryLang';
        })(CategoryLangRow = Northwind.CategoryLangRow || (Northwind.CategoryLangRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryLangService;
        (function (CategoryLangService) {
            CategoryLangService.baseUrl = 'Northwind/CategoryLang';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CategoryLangService[x] = function (r, s, o) {
                    return Q.serviceRequest(CategoryLangService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CategoryLangService = Northwind.CategoryLangService || (Northwind.CategoryLangService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryRow;
        (function (CategoryRow) {
            CategoryRow.idProperty = 'CategoryID';
            CategoryRow.nameProperty = 'CategoryName';
            CategoryRow.localTextPrefix = 'Northwind.Category';
            CategoryRow.lookupKey = 'Northwind.Category';
            function getLookup() {
                return Q.getLookup('Northwind.Category');
            }
            CategoryRow.getLookup = getLookup;
        })(CategoryRow = Northwind.CategoryRow || (Northwind.CategoryRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryService;
        (function (CategoryService) {
            CategoryService.baseUrl = 'Northwind/Category';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CategoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(CategoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CategoryService = Northwind.CategoryService || (Northwind.CategoryService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerCustomerDemoRow;
        (function (CustomerCustomerDemoRow) {
            CustomerCustomerDemoRow.idProperty = 'ID';
            CustomerCustomerDemoRow.nameProperty = 'CustomerID';
            CustomerCustomerDemoRow.localTextPrefix = 'Northwind.CustomerCustomerDemo';
        })(CustomerCustomerDemoRow = Northwind.CustomerCustomerDemoRow || (Northwind.CustomerCustomerDemoRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerDemographicRow;
        (function (CustomerDemographicRow) {
            CustomerDemographicRow.idProperty = 'ID';
            CustomerDemographicRow.nameProperty = 'CustomerTypeID';
            CustomerDemographicRow.localTextPrefix = 'Northwind.CustomerDemographic';
        })(CustomerDemographicRow = Northwind.CustomerDemographicRow || (Northwind.CustomerDemographicRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerDetailsRow;
        (function (CustomerDetailsRow) {
            CustomerDetailsRow.idProperty = 'Id';
            CustomerDetailsRow.nameProperty = 'Email';
            CustomerDetailsRow.localTextPrefix = 'Northwind.CustomerDetails';
        })(CustomerDetailsRow = Northwind.CustomerDetailsRow || (Northwind.CustomerDetailsRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerForm = /** @class */ (function (_super) {
            __extends(CustomerForm, _super);
            function CustomerForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CustomerForm.init) {
                    CustomerForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = Northwind.NotesEditor;
                    var w3 = s.DateEditor;
                    var w4 = s.EmailEditor;
                    var w5 = s.BooleanEditor;
                    Q.initFormType(CustomerForm, [
                        'CustomerID', w0,
                        'CompanyName', w0,
                        'ContactName', w0,
                        'ContactTitle', w0,
                        'Representatives', w1,
                        'Address', w0,
                        'Country', w1,
                        'City', w1,
                        'Region', w0,
                        'PostalCode', w0,
                        'Phone', w0,
                        'Fax', w0,
                        'NoteList', w2,
                        'LastContactDate', w3,
                        'LastContactedBy', w1,
                        'Email', w4,
                        'SendBulletin', w5
                    ]);
                }
                return _this;
            }
            CustomerForm.formKey = 'Northwind.Customer';
            return CustomerForm;
        }(Serenity.PrefixedContext));
        Northwind.CustomerForm = CustomerForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerGrossSalesRow;
        (function (CustomerGrossSalesRow) {
            CustomerGrossSalesRow.nameProperty = 'ContactName';
            CustomerGrossSalesRow.localTextPrefix = 'Northwind.CustomerGrossSales';
        })(CustomerGrossSalesRow = Northwind.CustomerGrossSalesRow || (Northwind.CustomerGrossSalesRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerRepresentativesRow;
        (function (CustomerRepresentativesRow) {
            CustomerRepresentativesRow.idProperty = 'RepresentativeId';
            CustomerRepresentativesRow.localTextPrefix = 'Northwind.CustomerRepresentatives';
        })(CustomerRepresentativesRow = Northwind.CustomerRepresentativesRow || (Northwind.CustomerRepresentativesRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerRow;
        (function (CustomerRow) {
            CustomerRow.idProperty = 'ID';
            CustomerRow.nameProperty = 'CompanyName';
            CustomerRow.localTextPrefix = 'Northwind.Customer';
            CustomerRow.lookupKey = 'Northwind.Customer';
            function getLookup() {
                return Q.getLookup('Northwind.Customer');
            }
            CustomerRow.getLookup = getLookup;
        })(CustomerRow = Northwind.CustomerRow || (Northwind.CustomerRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerService;
        (function (CustomerService) {
            CustomerService.baseUrl = 'Northwind/Customer';
            [
                'Create',
                'Update',
                'Delete',
                'GetNextNumber',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CustomerService[x] = function (r, s, o) {
                    return Q.serviceRequest(CustomerService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CustomerService = Northwind.CustomerService || (Northwind.CustomerService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var EmployeeRow;
        (function (EmployeeRow) {
            EmployeeRow.idProperty = 'EmployeeID';
            EmployeeRow.nameProperty = 'FullName';
            EmployeeRow.localTextPrefix = 'Northwind.Employee';
            EmployeeRow.lookupKey = 'Northwind.Employee';
            function getLookup() {
                return Q.getLookup('Northwind.Employee');
            }
            EmployeeRow.getLookup = getLookup;
        })(EmployeeRow = Northwind.EmployeeRow || (Northwind.EmployeeRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var EmployeeTerritoryRow;
        (function (EmployeeTerritoryRow) {
            EmployeeTerritoryRow.idProperty = 'EmployeeID';
            EmployeeTerritoryRow.nameProperty = 'TerritoryID';
            EmployeeTerritoryRow.localTextPrefix = 'Northwind.EmployeeTerritory';
        })(EmployeeTerritoryRow = Northwind.EmployeeTerritoryRow || (Northwind.EmployeeTerritoryRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var Gender;
        (function (Gender) {
            Gender[Gender["Male"] = 1] = "Male";
            Gender[Gender["Female"] = 2] = "Female";
        })(Gender = Northwind.Gender || (Northwind.Gender = {}));
        Serenity.Decorators.registerEnumType(Gender, 'SCMONLINE.Northwind.Gender', 'SCMONLINE.Northwind.Entities.Gender');
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var NoteRow;
        (function (NoteRow) {
            NoteRow.idProperty = 'NoteId';
            NoteRow.nameProperty = 'EntityType';
            NoteRow.localTextPrefix = 'Northwind.Note';
        })(NoteRow = Northwind.NoteRow || (Northwind.NoteRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderDetailForm = /** @class */ (function (_super) {
            __extends(OrderDetailForm, _super);
            function OrderDetailForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OrderDetailForm.init) {
                    OrderDetailForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.DecimalEditor;
                    var w2 = s.IntegerEditor;
                    Q.initFormType(OrderDetailForm, [
                        'ProductID', w0,
                        'UnitPrice', w1,
                        'Quantity', w2,
                        'Discount', w1
                    ]);
                }
                return _this;
            }
            OrderDetailForm.formKey = 'Northwind.OrderDetail';
            return OrderDetailForm;
        }(Serenity.PrefixedContext));
        Northwind.OrderDetailForm = OrderDetailForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderDetailRow;
        (function (OrderDetailRow) {
            OrderDetailRow.idProperty = 'DetailID';
            OrderDetailRow.localTextPrefix = 'Northwind.OrderDetail';
        })(OrderDetailRow = Northwind.OrderDetailRow || (Northwind.OrderDetailRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderDetailService;
        (function (OrderDetailService) {
            OrderDetailService.baseUrl = 'Northwind/OrderDetail';
            [
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OrderDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(OrderDetailService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(OrderDetailService = Northwind.OrderDetailService || (Northwind.OrderDetailService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderForm = /** @class */ (function (_super) {
            __extends(OrderForm, _super);
            function OrderForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OrderForm.init) {
                    OrderForm.init = true;
                    var s = Serenity;
                    var w0 = Northwind.CustomerEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = Northwind.OrderDetailsEditor;
                    var w4 = s.DecimalEditor;
                    var w5 = s.StringEditor;
                    Q.initFormType(OrderForm, [
                        'CustomerID', w0,
                        'OrderDate', w1,
                        'RequiredDate', w1,
                        'EmployeeID', w2,
                        'DetailList', w3,
                        'ShippedDate', w1,
                        'ShipVia', w2,
                        'Freight', w4,
                        'ShipName', w5,
                        'ShipAddress', w5,
                        'ShipCity', w5,
                        'ShipRegion', w5,
                        'ShipPostalCode', w5,
                        'ShipCountry', w5
                    ]);
                }
                return _this;
            }
            OrderForm.formKey = 'Northwind.Order';
            return OrderForm;
        }(Serenity.PrefixedContext));
        Northwind.OrderForm = OrderForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderRow;
        (function (OrderRow) {
            OrderRow.idProperty = 'OrderID';
            OrderRow.nameProperty = 'CustomerID';
            OrderRow.localTextPrefix = 'Northwind.Order';
        })(OrderRow = Northwind.OrderRow || (Northwind.OrderRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderService;
        (function (OrderService) {
            OrderService.baseUrl = 'Northwind/Order';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(OrderService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(OrderService = Northwind.OrderService || (Northwind.OrderService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderShippingState;
        (function (OrderShippingState) {
            OrderShippingState[OrderShippingState["NotShipped"] = 0] = "NotShipped";
            OrderShippingState[OrderShippingState["Shipped"] = 1] = "Shipped";
        })(OrderShippingState = Northwind.OrderShippingState || (Northwind.OrderShippingState = {}));
        Serenity.Decorators.registerEnumType(OrderShippingState, 'SCMONLINE.Northwind.OrderShippingState', 'Northwind.OrderShippingState');
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductForm = /** @class */ (function (_super) {
            __extends(ProductForm, _super);
            function ProductForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProductForm.init) {
                    ProductForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.ImageUploadEditor;
                    var w2 = s.BooleanEditor;
                    var w3 = s.LookupEditor;
                    var w4 = s.DecimalEditor;
                    var w5 = s.IntegerEditor;
                    Q.initFormType(ProductForm, [
                        'ProductName', w0,
                        'ProductImage', w1,
                        'Discontinued', w2,
                        'SupplierID', w3,
                        'CategoryID', w3,
                        'QuantityPerUnit', w0,
                        'UnitPrice', w4,
                        'UnitsInStock', w5,
                        'UnitsOnOrder', w5,
                        'ReorderLevel', w5
                    ]);
                }
                return _this;
            }
            ProductForm.formKey = 'Northwind.Product';
            return ProductForm;
        }(Serenity.PrefixedContext));
        Northwind.ProductForm = ProductForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductLangRow;
        (function (ProductLangRow) {
            ProductLangRow.idProperty = 'Id';
            ProductLangRow.nameProperty = 'ProductName';
            ProductLangRow.localTextPrefix = 'Northwind.ProductLang';
        })(ProductLangRow = Northwind.ProductLangRow || (Northwind.ProductLangRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductLangService;
        (function (ProductLangService) {
            ProductLangService.baseUrl = 'Northwind/ProductLang';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProductLangService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductLangService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductLangService = Northwind.ProductLangService || (Northwind.ProductLangService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductLogRow;
        (function (ProductLogRow) {
            ProductLogRow.idProperty = 'ProductLogID';
            ProductLogRow.localTextPrefix = 'Northwind.ProductLog';
        })(ProductLogRow = Northwind.ProductLogRow || (Northwind.ProductLogRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductRow;
        (function (ProductRow) {
            ProductRow.idProperty = 'ProductID';
            ProductRow.nameProperty = 'ProductName';
            ProductRow.localTextPrefix = 'Northwind.Product';
            ProductRow.lookupKey = 'Northwind.Product';
            function getLookup() {
                return Q.getLookup('Northwind.Product');
            }
            ProductRow.getLookup = getLookup;
        })(ProductRow = Northwind.ProductRow || (Northwind.ProductRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductService;
        (function (ProductService) {
            ProductService.baseUrl = 'Northwind/Product';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProductService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProductService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProductService = Northwind.ProductService || (Northwind.ProductService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var RegionForm = /** @class */ (function (_super) {
            __extends(RegionForm, _super);
            function RegionForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RegionForm.init) {
                    RegionForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(RegionForm, [
                        'RegionID', w0,
                        'RegionDescription', w1
                    ]);
                }
                return _this;
            }
            RegionForm.formKey = 'Northwind.Region';
            return RegionForm;
        }(Serenity.PrefixedContext));
        Northwind.RegionForm = RegionForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var RegionRow;
        (function (RegionRow) {
            RegionRow.idProperty = 'RegionID';
            RegionRow.nameProperty = 'RegionDescription';
            RegionRow.localTextPrefix = 'Northwind.Region';
            RegionRow.lookupKey = 'Northwind.Region';
            function getLookup() {
                return Q.getLookup('Northwind.Region');
            }
            RegionRow.getLookup = getLookup;
        })(RegionRow = Northwind.RegionRow || (Northwind.RegionRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var RegionService;
        (function (RegionService) {
            RegionService.baseUrl = 'Northwind/Region';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RegionService[x] = function (r, s, o) {
                    return Q.serviceRequest(RegionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RegionService = Northwind.RegionService || (Northwind.RegionService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SalesByCategoryRow;
        (function (SalesByCategoryRow) {
            SalesByCategoryRow.nameProperty = 'CategoryName';
            SalesByCategoryRow.localTextPrefix = 'Northwind.SalesByCategory';
        })(SalesByCategoryRow = Northwind.SalesByCategoryRow || (Northwind.SalesByCategoryRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SalesByCategoryService;
        (function (SalesByCategoryService) {
            SalesByCategoryService.baseUrl = 'Northwind/SalesByCategory';
            [
                'List'
            ].forEach(function (x) {
                SalesByCategoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(SalesByCategoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(SalesByCategoryService = Northwind.SalesByCategoryService || (Northwind.SalesByCategoryService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ShipperForm = /** @class */ (function (_super) {
            __extends(ShipperForm, _super);
            function ShipperForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ShipperForm.init) {
                    ShipperForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = Northwind.PhoneEditor;
                    Q.initFormType(ShipperForm, [
                        'CompanyName', w0,
                        'Phone', w1
                    ]);
                }
                return _this;
            }
            ShipperForm.formKey = 'Northwind.Shipper';
            return ShipperForm;
        }(Serenity.PrefixedContext));
        Northwind.ShipperForm = ShipperForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ShipperRow;
        (function (ShipperRow) {
            ShipperRow.idProperty = 'ShipperID';
            ShipperRow.nameProperty = 'CompanyName';
            ShipperRow.localTextPrefix = 'Northwind.Shipper';
            ShipperRow.lookupKey = 'Northwind.Shipper';
            function getLookup() {
                return Q.getLookup('Northwind.Shipper');
            }
            ShipperRow.getLookup = getLookup;
        })(ShipperRow = Northwind.ShipperRow || (Northwind.ShipperRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ShipperService;
        (function (ShipperService) {
            ShipperService.baseUrl = 'Northwind/Shipper';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShipperService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShipperService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ShipperService = Northwind.ShipperService || (Northwind.ShipperService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SupplierForm = /** @class */ (function (_super) {
            __extends(SupplierForm, _super);
            function SupplierForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!SupplierForm.init) {
                    SupplierForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(SupplierForm, [
                        'CompanyName', w0,
                        'ContactName', w0,
                        'ContactTitle', w0,
                        'Address', w0,
                        'Region', w0,
                        'PostalCode', w0,
                        'Country', w0,
                        'City', w0,
                        'Phone', w0,
                        'Fax', w0,
                        'HomePage', w0
                    ]);
                }
                return _this;
            }
            SupplierForm.formKey = 'Northwind.Supplier';
            return SupplierForm;
        }(Serenity.PrefixedContext));
        Northwind.SupplierForm = SupplierForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SupplierRow;
        (function (SupplierRow) {
            SupplierRow.idProperty = 'SupplierID';
            SupplierRow.nameProperty = 'CompanyName';
            SupplierRow.localTextPrefix = 'Northwind.Supplier';
            SupplierRow.lookupKey = 'Northwind.Supplier';
            function getLookup() {
                return Q.getLookup('Northwind.Supplier');
            }
            SupplierRow.getLookup = getLookup;
        })(SupplierRow = Northwind.SupplierRow || (Northwind.SupplierRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SupplierService;
        (function (SupplierService) {
            SupplierService.baseUrl = 'Northwind/Supplier';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SupplierService[x] = function (r, s, o) {
                    return Q.serviceRequest(SupplierService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(SupplierService = Northwind.SupplierService || (Northwind.SupplierService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var TerritoryForm = /** @class */ (function (_super) {
            __extends(TerritoryForm, _super);
            function TerritoryForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TerritoryForm.init) {
                    TerritoryForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(TerritoryForm, [
                        'TerritoryID', w0,
                        'TerritoryDescription', w0,
                        'RegionID', w1
                    ]);
                }
                return _this;
            }
            TerritoryForm.formKey = 'Northwind.Territory';
            return TerritoryForm;
        }(Serenity.PrefixedContext));
        Northwind.TerritoryForm = TerritoryForm;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var TerritoryRow;
        (function (TerritoryRow) {
            TerritoryRow.idProperty = 'ID';
            TerritoryRow.nameProperty = 'TerritoryID';
            TerritoryRow.localTextPrefix = 'Northwind.Territory';
            TerritoryRow.lookupKey = 'Northwind.Territory';
            function getLookup() {
                return Q.getLookup('Northwind.Territory');
            }
            TerritoryRow.getLookup = getLookup;
        })(TerritoryRow = Northwind.TerritoryRow || (Northwind.TerritoryRow = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var TerritoryService;
        (function (TerritoryService) {
            TerritoryService.baseUrl = 'Northwind/Territory';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TerritoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(TerritoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TerritoryService = Northwind.TerritoryService || (Northwind.TerritoryService = {}));
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressForm = /** @class */ (function (_super) {
            __extends(AddressForm, _super);
            function AddressForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!AddressForm.init) {
                    AddressForm.init = true;
                    var s = Serenity;
                    var w0 = s.TextAreaEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(AddressForm, [
                        'Name', w0,
                        'Description', w0,
                        'AddressTypeId', w1
                    ]);
                }
                return _this;
            }
            AddressForm.formKey = 'Procurement.Address';
            return AddressForm;
        }(Serenity.PrefixedContext));
        Procurement.AddressForm = AddressForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressRow;
        (function (AddressRow) {
            AddressRow.idProperty = 'AddressId';
            AddressRow.nameProperty = 'Name';
            AddressRow.localTextPrefix = 'Procurement.Address';
            AddressRow.lookupKey = 'Procurement.Address';
            function getLookup() {
                return Q.getLookup('Procurement.Address');
            }
            AddressRow.getLookup = getLookup;
        })(AddressRow = Procurement.AddressRow || (Procurement.AddressRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressService;
        (function (AddressService) {
            AddressService.baseUrl = 'Procurement/Address';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AddressService[x] = function (r, s, o) {
                    return Q.serviceRequest(AddressService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(AddressService = Procurement.AddressService || (Procurement.AddressService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressTypeForm = /** @class */ (function (_super) {
            __extends(AddressTypeForm, _super);
            function AddressTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!AddressTypeForm.init) {
                    AddressTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(AddressTypeForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            AddressTypeForm.formKey = 'Procurement.AddressType';
            return AddressTypeForm;
        }(Serenity.PrefixedContext));
        Procurement.AddressTypeForm = AddressTypeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressTypeRow;
        (function (AddressTypeRow) {
            AddressTypeRow.idProperty = 'AddressTypeId';
            AddressTypeRow.nameProperty = 'Name';
            AddressTypeRow.localTextPrefix = 'Procurement.AddressType';
            AddressTypeRow.lookupKey = 'Procurement.AddressType';
            function getLookup() {
                return Q.getLookup('Procurement.AddressType');
            }
            AddressTypeRow.getLookup = getLookup;
        })(AddressTypeRow = Procurement.AddressTypeRow || (Procurement.AddressTypeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressTypeService;
        (function (AddressTypeService) {
            AddressTypeService.baseUrl = 'Procurement/AddressType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AddressTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(AddressTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(AddressTypeService = Procurement.AddressTypeService || (Procurement.AddressTypeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ApprovalAuthorityRangeForm = /** @class */ (function (_super) {
            __extends(ApprovalAuthorityRangeForm, _super);
            function ApprovalAuthorityRangeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ApprovalAuthorityRangeForm.init) {
                    ApprovalAuthorityRangeForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DecimalEditor;
                    Q.initFormType(ApprovalAuthorityRangeForm, [
                        'RoleId', w0,
                        'ProcurementTypeId', w1,
                        'CurrencyId', w1,
                        'MinValue', w2,
                        'MaxValue', w2
                    ]);
                }
                return _this;
            }
            ApprovalAuthorityRangeForm.formKey = 'Procurement.ApprovalAuthorityRange';
            return ApprovalAuthorityRangeForm;
        }(Serenity.PrefixedContext));
        Procurement.ApprovalAuthorityRangeForm = ApprovalAuthorityRangeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ApprovalAuthorityRangeRow;
        (function (ApprovalAuthorityRangeRow) {
            ApprovalAuthorityRangeRow.idProperty = 'ApprovalAuthorityRangeId';
            ApprovalAuthorityRangeRow.nameProperty = 'ProcurementTypeId';
            ApprovalAuthorityRangeRow.localTextPrefix = 'Procurement.ApprovalAuthorityRange';
        })(ApprovalAuthorityRangeRow = Procurement.ApprovalAuthorityRangeRow || (Procurement.ApprovalAuthorityRangeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ApprovalAuthorityRangeService;
        (function (ApprovalAuthorityRangeService) {
            ApprovalAuthorityRangeService.baseUrl = 'Procurement/ApprovalAuthorityRange';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ApprovalAuthorityRangeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ApprovalAuthorityRangeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ApprovalAuthorityRangeService = Procurement.ApprovalAuthorityRangeService || (Procurement.ApprovalAuthorityRangeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BidPriceImportForm = /** @class */ (function (_super) {
            __extends(BidPriceImportForm, _super);
            function BidPriceImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BidPriceImportForm.init) {
                    BidPriceImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(BidPriceImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            BidPriceImportForm.formKey = 'Procurement.BidPriceImport';
            return BidPriceImportForm;
        }(Serenity.PrefixedContext));
        Procurement.BidPriceImportForm = BidPriceImportForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerAssignmentForm = /** @class */ (function (_super) {
            __extends(BuyerAssignmentForm, _super);
            function BuyerAssignmentForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BuyerAssignmentForm.init) {
                    BuyerAssignmentForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    Q.initFormType(BuyerAssignmentForm, [
                        'BuyerId', w0
                    ]);
                }
                return _this;
            }
            BuyerAssignmentForm.formKey = 'Procurement.BuyerAssignment';
            return BuyerAssignmentForm;
        }(Serenity.PrefixedContext));
        Procurement.BuyerAssignmentForm = BuyerAssignmentForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerLookupViewForm = /** @class */ (function (_super) {
            __extends(BuyerLookupViewForm, _super);
            function BuyerLookupViewForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BuyerLookupViewForm.init) {
                    BuyerLookupViewForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    Q.initFormType(BuyerLookupViewForm, [
                        'Name', w0,
                        'ActivePr', w1
                    ]);
                }
                return _this;
            }
            BuyerLookupViewForm.formKey = 'Procurement.BuyerLookupView';
            return BuyerLookupViewForm;
        }(Serenity.PrefixedContext));
        Procurement.BuyerLookupViewForm = BuyerLookupViewForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerLookupViewRow;
        (function (BuyerLookupViewRow) {
            BuyerLookupViewRow.idProperty = 'UserId';
            BuyerLookupViewRow.nameProperty = 'Name';
            BuyerLookupViewRow.localTextPrefix = 'Procurement.BuyerLookupView';
            BuyerLookupViewRow.lookupKey = 'Procurement.BuyerLookupView';
            function getLookup() {
                return Q.getLookup('Procurement.BuyerLookupView');
            }
            BuyerLookupViewRow.getLookup = getLookup;
        })(BuyerLookupViewRow = Procurement.BuyerLookupViewRow || (Procurement.BuyerLookupViewRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerLookupViewService;
        (function (BuyerLookupViewService) {
            BuyerLookupViewService.baseUrl = 'Procurement/BuyerLookupView';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BuyerLookupViewService[x] = function (r, s, o) {
                    return Q.serviceRequest(BuyerLookupViewService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(BuyerLookupViewService = Procurement.BuyerLookupViewService || (Procurement.BuyerLookupViewService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicDescriptionForm = /** @class */ (function (_super) {
            __extends(CharacteristicDescriptionForm, _super);
            function CharacteristicDescriptionForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CharacteristicDescriptionForm.init) {
                    CharacteristicDescriptionForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(CharacteristicDescriptionForm, [
                        'Language', w0,
                        'IntCounter', w1,
                        'Description', w0,
                        'Heading1', w0,
                        'Heading2', w0,
                        'ValidFrom', w2,
                        'TechStFrom', w0,
                        'ChangeNumber', w0,
                        'DeletionInd', w0
                    ]);
                }
                return _this;
            }
            CharacteristicDescriptionForm.formKey = 'Procurement.CharacteristicDescription';
            return CharacteristicDescriptionForm;
        }(Serenity.PrefixedContext));
        Procurement.CharacteristicDescriptionForm = CharacteristicDescriptionForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicDescriptionRow;
        (function (CharacteristicDescriptionRow) {
            CharacteristicDescriptionRow.idProperty = 'InternalChar';
            CharacteristicDescriptionRow.nameProperty = 'InternalChar';
            CharacteristicDescriptionRow.localTextPrefix = 'Procurement.CharacteristicDescription';
        })(CharacteristicDescriptionRow = Procurement.CharacteristicDescriptionRow || (Procurement.CharacteristicDescriptionRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicDescriptionService;
        (function (CharacteristicDescriptionService) {
            CharacteristicDescriptionService.baseUrl = 'Procurement/CharacteristicDescription';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CharacteristicDescriptionService[x] = function (r, s, o) {
                    return Q.serviceRequest(CharacteristicDescriptionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CharacteristicDescriptionService = Procurement.CharacteristicDescriptionService || (Procurement.CharacteristicDescriptionService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicValueForm = /** @class */ (function (_super) {
            __extends(CharacteristicValueForm, _super);
            function CharacteristicValueForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CharacteristicValueForm.init) {
                    CharacteristicValueForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CharacteristicValueForm, [
                        'Object', w0,
                        'InternalChar', w0,
                        'Counter', w0,
                        'ObjectClass', w0,
                        'ClassType', w0,
                        'IntCounter', w0,
                        'CharValue', w0,
                        'ValueFrom', w0,
                        'IntMeasUnit', w0,
                        'ValueTo', w0,
                        'Code', w0,
                        'ToleranceFrom', w0,
                        'ToleranceTo', w0,
                        'Percentage', w0,
                        'Increment', w0,
                        'Author', w0,
                        'ChangeNumber', w0,
                        'ValidFrom', w0,
                        'DeletionInd', w0,
                        'InstanceCntr', w0,
                        'Position', w0,
                        'CompType', w0
                    ]);
                }
                return _this;
            }
            CharacteristicValueForm.formKey = 'Procurement.CharacteristicValue';
            return CharacteristicValueForm;
        }(Serenity.PrefixedContext));
        Procurement.CharacteristicValueForm = CharacteristicValueForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicValueRow;
        (function (CharacteristicValueRow) {
            CharacteristicValueRow.idProperty = 'CharacteristicValueId';
            CharacteristicValueRow.nameProperty = 'Object';
            CharacteristicValueRow.localTextPrefix = 'Procurement.CharacteristicValue';
        })(CharacteristicValueRow = Procurement.CharacteristicValueRow || (Procurement.CharacteristicValueRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicValueService;
        (function (CharacteristicValueService) {
            CharacteristicValueService.baseUrl = 'Procurement/CharacteristicValue';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CharacteristicValueService[x] = function (r, s, o) {
                    return Q.serviceRequest(CharacteristicValueService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CharacteristicValueService = Procurement.CharacteristicValueService || (Procurement.CharacteristicValueService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberForm = /** @class */ (function (_super) {
            __extends(CommitteeMemberForm, _super);
            function CommitteeMemberForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CommitteeMemberForm.init) {
                    CommitteeMemberForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(CommitteeMemberForm, [
                        'ProcurementId', w0,
                        'CommitteeRoleId', w1,
                        'RoleId', w1
                    ]);
                }
                return _this;
            }
            CommitteeMemberForm.formKey = 'Procurement.CommitteeMember';
            return CommitteeMemberForm;
        }(Serenity.PrefixedContext));
        Procurement.CommitteeMemberForm = CommitteeMemberForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberMappingForm = /** @class */ (function (_super) {
            __extends(CommitteeMemberMappingForm, _super);
            function CommitteeMemberMappingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CommitteeMemberMappingForm.init) {
                    CommitteeMemberMappingForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(CommitteeMemberMappingForm, [
                        'Sequence', w0,
                        'ProcurementTypeId', w1,
                        'ProcValueRangeId', w0,
                        'RoleId', w0,
                        'CommitteeRoleId', w0
                    ]);
                }
                return _this;
            }
            CommitteeMemberMappingForm.formKey = 'Procurement.CommitteeMemberMapping';
            return CommitteeMemberMappingForm;
        }(Serenity.PrefixedContext));
        Procurement.CommitteeMemberMappingForm = CommitteeMemberMappingForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberMappingRow;
        (function (CommitteeMemberMappingRow) {
            CommitteeMemberMappingRow.idProperty = 'CommitteeMemberMappingId';
            CommitteeMemberMappingRow.nameProperty = 'ProcurementTypeId';
            CommitteeMemberMappingRow.localTextPrefix = 'Procurement.CommitteeMemberMapping';
            CommitteeMemberMappingRow.lookupKey = 'Procurement.CommitteeMemberMapping';
            function getLookup() {
                return Q.getLookup('Procurement.CommitteeMemberMapping');
            }
            CommitteeMemberMappingRow.getLookup = getLookup;
        })(CommitteeMemberMappingRow = Procurement.CommitteeMemberMappingRow || (Procurement.CommitteeMemberMappingRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberMappingService;
        (function (CommitteeMemberMappingService) {
            CommitteeMemberMappingService.baseUrl = 'Procurement/CommitteeMemberMapping';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CommitteeMemberMappingService[x] = function (r, s, o) {
                    return Q.serviceRequest(CommitteeMemberMappingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CommitteeMemberMappingService = Procurement.CommitteeMemberMappingService || (Procurement.CommitteeMemberMappingService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberRow;
        (function (CommitteeMemberRow) {
            CommitteeMemberRow.idProperty = 'CommitteeMemberId';
            CommitteeMemberRow.nameProperty = 'CommitteeRoleName';
            CommitteeMemberRow.localTextPrefix = 'Procurement.CommitteeMember';
        })(CommitteeMemberRow = Procurement.CommitteeMemberRow || (Procurement.CommitteeMemberRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberService;
        (function (CommitteeMemberService) {
            CommitteeMemberService.baseUrl = 'Procurement/CommitteeMember';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CommitteeMemberService[x] = function (r, s, o) {
                    return Q.serviceRequest(CommitteeMemberService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CommitteeMemberService = Procurement.CommitteeMemberService || (Procurement.CommitteeMemberService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeRoleForm = /** @class */ (function (_super) {
            __extends(CommitteeRoleForm, _super);
            function CommitteeRoleForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CommitteeRoleForm.init) {
                    CommitteeRoleForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CommitteeRoleForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            CommitteeRoleForm.formKey = 'Procurement.CommitteeRole';
            return CommitteeRoleForm;
        }(Serenity.PrefixedContext));
        Procurement.CommitteeRoleForm = CommitteeRoleForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeRoleRow;
        (function (CommitteeRoleRow) {
            CommitteeRoleRow.idProperty = 'CommitteeRoleId';
            CommitteeRoleRow.nameProperty = 'Name';
            CommitteeRoleRow.localTextPrefix = 'Procurement.CommitteeRole';
            CommitteeRoleRow.lookupKey = 'Procurement.CommitteeRole';
            function getLookup() {
                return Q.getLookup('Procurement.CommitteeRole');
            }
            CommitteeRoleRow.getLookup = getLookup;
        })(CommitteeRoleRow = Procurement.CommitteeRoleRow || (Procurement.CommitteeRoleRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeRoleService;
        (function (CommitteeRoleService) {
            CommitteeRoleService.baseUrl = 'Procurement/CommitteeRole';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CommitteeRoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(CommitteeRoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CommitteeRoleService = Procurement.CommitteeRoleService || (Procurement.CommitteeRoleService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeTypeForm = /** @class */ (function (_super) {
            __extends(CommitteeTypeForm, _super);
            function CommitteeTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CommitteeTypeForm.init) {
                    CommitteeTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CommitteeTypeForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            CommitteeTypeForm.formKey = 'Procurement.CommitteeType';
            return CommitteeTypeForm;
        }(Serenity.PrefixedContext));
        Procurement.CommitteeTypeForm = CommitteeTypeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeTypeRow;
        (function (CommitteeTypeRow) {
            CommitteeTypeRow.idProperty = 'CommitteeTypeId';
            CommitteeTypeRow.nameProperty = 'Name';
            CommitteeTypeRow.localTextPrefix = 'Procurement.CommitteeType';
            CommitteeTypeRow.lookupKey = 'Procurement.CommitteeType';
            function getLookup() {
                return Q.getLookup('Procurement.CommitteeType');
            }
            CommitteeTypeRow.getLookup = getLookup;
        })(CommitteeTypeRow = Procurement.CommitteeTypeRow || (Procurement.CommitteeTypeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeTypeService;
        (function (CommitteeTypeService) {
            CommitteeTypeService.baseUrl = 'Procurement/CommitteeType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CommitteeTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(CommitteeTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CommitteeTypeService = Procurement.CommitteeTypeService || (Procurement.CommitteeTypeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ContractTypeForm = /** @class */ (function (_super) {
            __extends(ContractTypeForm, _super);
            function ContractTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ContractTypeForm.init) {
                    ContractTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ContractTypeForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            ContractTypeForm.formKey = 'Procurement.ContractType';
            return ContractTypeForm;
        }(Serenity.PrefixedContext));
        Procurement.ContractTypeForm = ContractTypeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ContractTypeRow;
        (function (ContractTypeRow) {
            ContractTypeRow.idProperty = 'ContractTypeId';
            ContractTypeRow.nameProperty = 'Name';
            ContractTypeRow.localTextPrefix = 'Procurement.ContractType';
            ContractTypeRow.lookupKey = 'Procurement.ContractType';
            function getLookup() {
                return Q.getLookup('Procurement.ContractType');
            }
            ContractTypeRow.getLookup = getLookup;
        })(ContractTypeRow = Procurement.ContractTypeRow || (Procurement.ContractTypeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ContractTypeService;
        (function (ContractTypeService) {
            ContractTypeService.baseUrl = 'Procurement/ContractType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ContractTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ContractTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ContractTypeService = Procurement.ContractTypeService || (Procurement.ContractTypeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CurrencyForm = /** @class */ (function (_super) {
            __extends(CurrencyForm, _super);
            function CurrencyForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CurrencyForm.init) {
                    CurrencyForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CurrencyForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            CurrencyForm.formKey = 'Procurement.Currency';
            return CurrencyForm;
        }(Serenity.PrefixedContext));
        Procurement.CurrencyForm = CurrencyForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CurrencyRow;
        (function (CurrencyRow) {
            CurrencyRow.idProperty = 'CurrencyId';
            CurrencyRow.nameProperty = 'CurrencyId';
            CurrencyRow.localTextPrefix = 'Procurement.Currency';
            CurrencyRow.lookupKey = 'Procurement.Currency';
            function getLookup() {
                return Q.getLookup('Procurement.Currency');
            }
            CurrencyRow.getLookup = getLookup;
        })(CurrencyRow = Procurement.CurrencyRow || (Procurement.CurrencyRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CurrencyService;
        (function (CurrencyService) {
            CurrencyService.baseUrl = 'Procurement/Currency';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CurrencyService[x] = function (r, s, o) {
                    return Q.serviceRequest(CurrencyService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CurrencyService = Procurement.CurrencyService || (Procurement.CurrencyService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocSubmitMethodForm = /** @class */ (function (_super) {
            __extends(DocSubmitMethodForm, _super);
            function DocSubmitMethodForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DocSubmitMethodForm.init) {
                    DocSubmitMethodForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(DocSubmitMethodForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            DocSubmitMethodForm.formKey = 'Procurement.DocSubmitMethod';
            return DocSubmitMethodForm;
        }(Serenity.PrefixedContext));
        Procurement.DocSubmitMethodForm = DocSubmitMethodForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocSubmitMethodRow;
        (function (DocSubmitMethodRow) {
            DocSubmitMethodRow.idProperty = 'DocSubmitMethodId';
            DocSubmitMethodRow.nameProperty = 'Name';
            DocSubmitMethodRow.localTextPrefix = 'Procurement.DocSubmitMethod';
            DocSubmitMethodRow.lookupKey = 'Procurement.DocSubmitMethod';
            function getLookup() {
                return Q.getLookup('Procurement.DocSubmitMethod');
            }
            DocSubmitMethodRow.getLookup = getLookup;
        })(DocSubmitMethodRow = Procurement.DocSubmitMethodRow || (Procurement.DocSubmitMethodRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocSubmitMethodService;
        (function (DocSubmitMethodService) {
            DocSubmitMethodService.baseUrl = 'Procurement/DocSubmitMethod';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DocSubmitMethodService[x] = function (r, s, o) {
                    return Q.serviceRequest(DocSubmitMethodService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DocSubmitMethodService = Procurement.DocSubmitMethodService || (Procurement.DocSubmitMethodService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocumentStatusForm = /** @class */ (function (_super) {
            __extends(DocumentStatusForm, _super);
            function DocumentStatusForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DocumentStatusForm.init) {
                    DocumentStatusForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(DocumentStatusForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            DocumentStatusForm.formKey = 'Procurement.DocumentStatus';
            return DocumentStatusForm;
        }(Serenity.PrefixedContext));
        Procurement.DocumentStatusForm = DocumentStatusForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocumentStatusRow;
        (function (DocumentStatusRow) {
            DocumentStatusRow.idProperty = 'DocumentStatusId';
            DocumentStatusRow.nameProperty = 'Name';
            DocumentStatusRow.localTextPrefix = 'Procurement.DocumentStatus';
            DocumentStatusRow.lookupKey = 'Procurement.DocumentStatus';
            function getLookup() {
                return Q.getLookup('Procurement.DocumentStatus');
            }
            DocumentStatusRow.getLookup = getLookup;
        })(DocumentStatusRow = Procurement.DocumentStatusRow || (Procurement.DocumentStatusRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocumentStatusService;
        (function (DocumentStatusService) {
            DocumentStatusService.baseUrl = 'Procurement/DocumentStatus';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DocumentStatusService[x] = function (r, s, o) {
                    return Q.serviceRequest(DocumentStatusService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DocumentStatusService = Procurement.DocumentStatusService || (Procurement.DocumentStatusService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionForm = /** @class */ (function (_super) {
            __extends(EvaluationConclusionForm, _super);
            function EvaluationConclusionForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!EvaluationConclusionForm.init) {
                    EvaluationConclusionForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(EvaluationConclusionForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            EvaluationConclusionForm.formKey = 'Procurement.EvaluationConclusion';
            return EvaluationConclusionForm;
        }(Serenity.PrefixedContext));
        Procurement.EvaluationConclusionForm = EvaluationConclusionForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionItemForm = /** @class */ (function (_super) {
            __extends(EvaluationConclusionItemForm, _super);
            function EvaluationConclusionItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!EvaluationConclusionItemForm.init) {
                    EvaluationConclusionItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(EvaluationConclusionItemForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            EvaluationConclusionItemForm.formKey = 'Procurement.EvaluationConclusionItem';
            return EvaluationConclusionItemForm;
        }(Serenity.PrefixedContext));
        Procurement.EvaluationConclusionItemForm = EvaluationConclusionItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionItemRow;
        (function (EvaluationConclusionItemRow) {
            EvaluationConclusionItemRow.idProperty = 'EvaluationConclusionItemId';
            EvaluationConclusionItemRow.nameProperty = 'Name';
            EvaluationConclusionItemRow.localTextPrefix = 'Procurement.EvaluationConclusionItem';
            EvaluationConclusionItemRow.lookupKey = 'Procurement.EvaluationConclusionItem';
            function getLookup() {
                return Q.getLookup('Procurement.EvaluationConclusionItem');
            }
            EvaluationConclusionItemRow.getLookup = getLookup;
        })(EvaluationConclusionItemRow = Procurement.EvaluationConclusionItemRow || (Procurement.EvaluationConclusionItemRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionItemService;
        (function (EvaluationConclusionItemService) {
            EvaluationConclusionItemService.baseUrl = 'Procurement/EvaluationConclusionItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                EvaluationConclusionItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(EvaluationConclusionItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(EvaluationConclusionItemService = Procurement.EvaluationConclusionItemService || (Procurement.EvaluationConclusionItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionRow;
        (function (EvaluationConclusionRow) {
            EvaluationConclusionRow.idProperty = 'EvaluationConclusionId';
            EvaluationConclusionRow.nameProperty = 'Name';
            EvaluationConclusionRow.localTextPrefix = 'Procurement.EvaluationConclusion';
            EvaluationConclusionRow.lookupKey = 'Procurement.EvaluationConclusion';
            function getLookup() {
                return Q.getLookup('Procurement.EvaluationConclusion');
            }
            EvaluationConclusionRow.getLookup = getLookup;
        })(EvaluationConclusionRow = Procurement.EvaluationConclusionRow || (Procurement.EvaluationConclusionRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionService;
        (function (EvaluationConclusionService) {
            EvaluationConclusionService.baseUrl = 'Procurement/EvaluationConclusion';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                EvaluationConclusionService[x] = function (r, s, o) {
                    return Q.serviceRequest(EvaluationConclusionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(EvaluationConclusionService = Procurement.EvaluationConclusionService || (Procurement.EvaluationConclusionService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_NegotiationForm = /** @class */ (function (_super) {
            __extends(F10_NegotiationForm, _super);
            function F10_NegotiationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F10_NegotiationForm.init) {
                    F10_NegotiationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = _Ext.YaTidakEditor;
                    var w3 = Procurement.F10_RfqItemsEditor;
                    var w4 = Procurement.F10_ProcParticipantItemsEditor;
                    var w5 = s.DateEditor;
                    var w6 = s.DateTimeEditor;
                    Q.initFormType(F10_NegotiationForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ContractTypeId', w0,
                        'ReviewOeRequired', w2,
                        'RfqItems', w3,
                        'ProcParticipantItems', w4,
                        'EvaluationClosingPriceDate', w5,
                        'F10SubmitDate', w6,
                        'F10SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F10_NegotiationForm.formKey = 'Procurement.F10_Negotiation';
            return F10_NegotiationForm;
        }(Serenity.PrefixedContext));
        Procurement.F10_NegotiationForm = F10_NegotiationForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_NegotiationService;
        (function (F10_NegotiationService) {
            F10_NegotiationService.baseUrl = 'Procurement/F10_Negotiation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'OwnerEstimateReviewImport'
            ].forEach(function (x) {
                F10_NegotiationService[x] = function (r, s, o) {
                    return Q.serviceRequest(F10_NegotiationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F10_NegotiationService = Procurement.F10_NegotiationService || (Procurement.F10_NegotiationService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantForm = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantForm, _super);
            function F10_ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F10_ProcParticipantForm.init) {
                    F10_ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.ImageUploadEditor;
                    var w4 = s.BooleanEditor;
                    var w5 = s.DateEditor;
                    var w6 = s.EnumEditor;
                    var w7 = s.TextAreaEditor;
                    var w8 = s.DateTimeEditor;
                    var w9 = s.DecimalEditor;
                    var w10 = _Ext.YaTidakEditor;
                    Q.initFormType(F10_ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'PriceDocumentFile', w3,
                        'PriceDocumentName', w0,
                        'TechSpecDocFile', w3,
                        'TechSpecDocName', w0,
                        'SupportingLetterFile', w3,
                        'SupportingLetterName', w0,
                        'CatalogFile', w3,
                        'CatalogName', w0,
                        'SubmitDocTnc', w4,
                        'SubmitDocTncDate', w5,
                        'AdminDocExists', w6,
                        'TechSpecDocExists', w6,
                        'SupportingLetterExists', w6,
                        'CatalogExists', w6,
                        'OpeningDocDesc', w7,
                        'AdminDocAtk', w2,
                        'TechSpecDocAtk', w2,
                        'SupportingLetterAtk', w2,
                        'CatalogAtk', w2,
                        'EvaluationDesc', w7,
                        'ClarificationRequest', w7,
                        'EvaluationConclusionId', w2,
                        'ClarificationOffer', w7,
                        'ClarificationResult', w7,
                        'Source', w0,
                        'F5ParticipantSubmitDate', w8,
                        'F5ParticipantSubmitBy', w0,
                        'FinalBidPrice', w9,
                        'SubmitObjection', w10,
                        'ObjectionDescription', w7,
                        'F15ParticipantSubmitDate', w8,
                        'F15ParticipantSubmitBy', w0,
                        'Invitation', w6
                    ]);
                }
                return _this;
            }
            F10_ProcParticipantForm.formKey = 'Procurement.F10_ProcParticipant';
            return F10_ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.F10_ProcParticipantForm = F10_ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantItemForm, _super);
            function F10_ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F10_ProcParticipantItemForm.init) {
                    F10_ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DecimalEditor;
                    var w2 = s.IntegerEditor;
                    var w3 = s.TextAreaEditor;
                    var w4 = s.BooleanEditor;
                    var w5 = s.LookupEditor;
                    Q.initFormType(F10_ProcParticipantItemForm, [
                        'ProcParticipantId', w0,
                        'ProcurementId', w0,
                        'RfqItemId', w0,
                        'ProcParticipantVendorId', w0,
                        'VendorName', w0,
                        'BidPrice', w1,
                        'BidPriceVsOe', w1,
                        'BidPriceVsOePercentage', w1,
                        'Rank', w2,
                        'EvaluationDescription', w3,
                        'NegotiationPrice', w1,
                        'NpVsOe', w1,
                        'NpVsOePercentage', w1,
                        'NegotiationRank', w2,
                        'NegotiationDesc', w3,
                        'ProposeDisclaimer', w4,
                        'DisclaimerDesc', w0,
                        'EvaluationConclusionItemId', w5
                    ]);
                }
                return _this;
            }
            F10_ProcParticipantItemForm.formKey = 'Procurement.F10_ProcParticipantItem';
            return F10_ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F10_ProcParticipantItemForm = F10_ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantItemService;
        (function (F10_ProcParticipantItemService) {
            F10_ProcParticipantItemService.baseUrl = 'Procurement/F10_ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F10_ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F10_ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F10_ProcParticipantItemService = Procurement.F10_ProcParticipantItemService || (Procurement.F10_ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantService;
        (function (F10_ProcParticipantService) {
            F10_ProcParticipantService.baseUrl = 'Procurement/F10_ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F10_ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(F10_ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F10_ProcParticipantService = Procurement.F10_ProcParticipantService || (Procurement.F10_ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_RfqItemForm = /** @class */ (function (_super) {
            __extends(F10_RfqItemForm, _super);
            function F10_RfqItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F10_RfqItemForm.init) {
                    F10_RfqItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DecimalEditor;
                    Q.initFormType(F10_RfqItemForm, [
                        'RfqItemId', w0,
                        'OwnerEstimate', w1,
                        'OwnerEstimateReview', w1,
                        'Item', w0,
                        'ShortText', w0,
                        'Material', w0,
                        'TargetQuantity', w1,
                        'OrderUnit', w0,
                        'PriceUnit', w1
                    ]);
                }
                return _this;
            }
            F10_RfqItemForm.formKey = 'Procurement.F10_RfqItem';
            return F10_RfqItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F10_RfqItemForm = F10_RfqItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_RfqItemService;
        (function (F10_RfqItemService) {
            F10_RfqItemService.baseUrl = 'Procurement/F10_RfqItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F10_RfqItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F10_RfqItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F10_RfqItemService = Procurement.F10_RfqItemService || (Procurement.F10_RfqItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F11_AgreementRow;
        (function (F11_AgreementRow) {
            F11_AgreementRow.idProperty = 'EmailParticipant';
            F11_AgreementRow.nameProperty = 'Agreement';
            F11_AgreementRow.localTextPrefix = 'Procurement.F11_Agreement';
        })(F11_AgreementRow = Procurement.F11_AgreementRow || (Procurement.F11_AgreementRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F11_ProposeWinnerForm = /** @class */ (function (_super) {
            __extends(F11_ProposeWinnerForm, _super);
            function F11_ProposeWinnerForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F11_ProposeWinnerForm.init) {
                    F11_ProposeWinnerForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.EnumEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = s.DateEditor;
                    var w5 = s.TextAreaEditor;
                    Q.initFormType(F11_ProposeWinnerForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ProcAgreement', w2,
                        'ProcAgreementDate', w3,
                        'WinnerNominationDate', w3,
                        'ProcAsApproved', w2,
                        'ProcAsApprovedDate', w4,
                        'ProcAsDesc', w1,
                        'FinalConclusionDesc', w5,
                        'ProcRejectTender', w2,
                        'ProcRejectTenderDesc', w5,
                        'F11SubmitDate', w3,
                        'F11SubmitBy', w1,
                        'ProcurementMethodId', w0
                    ]);
                }
                return _this;
            }
            F11_ProposeWinnerForm.formKey = 'Procurement.F11_ProposeWinner';
            return F11_ProposeWinnerForm;
        }(Serenity.PrefixedContext));
        Procurement.F11_ProposeWinnerForm = F11_ProposeWinnerForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F11_ProposeWinnerService;
        (function (F11_ProposeWinnerService) {
            F11_ProposeWinnerService.baseUrl = 'Procurement/F11_ProposeWinner';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'SendMailReject',
                'SendMail'
            ].forEach(function (x) {
                F11_ProposeWinnerService[x] = function (r, s, o) {
                    return Q.serviceRequest(F11_ProposeWinnerService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F11_ProposeWinnerService = Procurement.F11_ProposeWinnerService || (Procurement.F11_ProposeWinnerService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F12_ProcAsForm = /** @class */ (function (_super) {
            __extends(F12_ProcAsForm, _super);
            function F12_ProcAsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F12_ProcAsForm.init) {
                    F12_ProcAsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.EnumEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = s.DateEditor;
                    Q.initFormType(F12_ProcAsForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ProcAsRequired', w2,
                        'WinnerNominationDate', w3,
                        'ProcAsApproved', w2,
                        'ProcAsApprovedDate', w4,
                        'ProcAsDesc', w1,
                        'F12SubmitDate', w3,
                        'F12SubmitBy', w1,
                        'ProcurementMethodId', w0
                    ]);
                }
                return _this;
            }
            F12_ProcAsForm.formKey = 'Procurement.F12_ProcAs';
            return F12_ProcAsForm;
        }(Serenity.PrefixedContext));
        Procurement.F12_ProcAsForm = F12_ProcAsForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F12_ProcAsService;
        (function (F12_ProcAsService) {
            F12_ProcAsService.baseUrl = 'Procurement/F12_ProcAs';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                F12_ProcAsService[x] = function (r, s, o) {
                    return Q.serviceRequest(F12_ProcAsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F12_ProcAsService = Procurement.F12_ProcAsService || (Procurement.F12_ProcAsService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcParticipantForm = /** @class */ (function (_super) {
            __extends(F13_ProcParticipantForm, _super);
            function F13_ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F13_ProcParticipantForm.init) {
                    F13_ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.ImageUploadEditor;
                    var w4 = s.BooleanEditor;
                    var w5 = s.DateEditor;
                    var w6 = s.EnumEditor;
                    var w7 = s.TextAreaEditor;
                    var w8 = s.DateTimeEditor;
                    var w9 = s.DecimalEditor;
                    Q.initFormType(F13_ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'PriceDocumentFile', w3,
                        'PriceDocumentName', w0,
                        'TechSpecDocFile', w3,
                        'TechSpecDocName', w0,
                        'SupportingLetterFile', w3,
                        'SupportingLetterName', w0,
                        'CatalogFile', w3,
                        'CatalogName', w0,
                        'SubmitDocTnc', w4,
                        'SubmitDocTncDate', w5,
                        'AdminDocExists', w6,
                        'TechSpecDocExists', w6,
                        'SupportingLetterExists', w6,
                        'CatalogExists', w6,
                        'OpeningDocDesc', w7,
                        'AdminDocAtk', w2,
                        'TechSpecDocAtk', w2,
                        'SupportingLetterAtk', w2,
                        'CatalogAtk', w2,
                        'EvaluationDesc', w7,
                        'ClarificationRequest', w7,
                        'EvaluationConclusionId', w2,
                        'ClarificationOffer', w7,
                        'ClarificationResult', w7,
                        'Source', w0,
                        'F5ParticipantSubmitDate', w8,
                        'F5ParticipantSubmitBy', w0,
                        'FinalBidPrice', w9
                    ]);
                }
                return _this;
            }
            F13_ProcParticipantForm.formKey = 'Procurement.F13_ProcParticipant';
            return F13_ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.F13_ProcParticipantForm = F13_ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcParticipantService;
        (function (F13_ProcParticipantService) {
            F13_ProcParticipantService.baseUrl = 'Procurement/F13_ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F13_ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(F13_ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F13_ProcParticipantService = Procurement.F13_ProcParticipantService || (Procurement.F13_ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcResultDecisionForm = /** @class */ (function (_super) {
            __extends(F13_ProcResultDecisionForm, _super);
            function F13_ProcResultDecisionForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F13_ProcResultDecisionForm.init) {
                    F13_ProcResultDecisionForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = Procurement.F13_ProcParticipantsEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = s.TextAreaEditor;
                    Q.initFormType(F13_ProcResultDecisionForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ProcParticipant', w2,
                        'F13SubmitDate', w3,
                        'F13SubmitBy', w1,
                        'FinalConclusionDesc', w4
                    ]);
                }
                return _this;
            }
            F13_ProcResultDecisionForm.formKey = 'Procurement.F13_ProcResultDecision';
            return F13_ProcResultDecisionForm;
        }(Serenity.PrefixedContext));
        Procurement.F13_ProcResultDecisionForm = F13_ProcResultDecisionForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcResultDecisionService;
        (function (F13_ProcResultDecisionService) {
            F13_ProcResultDecisionService.baseUrl = 'Procurement/F13_ProcResultDecision';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Approve',
                'Reject',
                'SendMailApprove',
                'SendMailReject'
            ].forEach(function (x) {
                F13_ProcResultDecisionService[x] = function (r, s, o) {
                    return Q.serviceRequest(F13_ProcResultDecisionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F13_ProcResultDecisionService = Procurement.F13_ProcResultDecisionService || (Procurement.F13_ProcResultDecisionService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_RfqItemForm = /** @class */ (function (_super) {
            __extends(F13_RfqItemForm, _super);
            function F13_RfqItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F13_RfqItemForm.init) {
                    F13_RfqItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DecimalEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(F13_RfqItemForm, [
                        'ProcurementId', w0,
                        'OwnerEstimateReview', w1,
                        'OwnerEstimate', w1,
                        'PurchasingDocument', w0,
                        'Item', w0,
                        'DeletionIndicator', w0,
                        'RfqStatus', w0,
                        'LastChangedOn', w2,
                        'ShortText', w0,
                        'Material', w0,
                        'Plant', w0,
                        'StorageLocation', w0,
                        'ReqTrackingNumber', w0,
                        'MaterialGroup', w0,
                        'PurchasingInfoRec', w0,
                        'VendorMaterialNo', w0,
                        'TargetQuantity', w1,
                        'OrderQuantity', w1,
                        'OrderUnit', w0,
                        'OrderPriceUnit', w0,
                        'QuantityConversion', w1,
                        'EqualTo', w1,
                        'Denominator', w1,
                        'NetOrderPrice', w1,
                        'PriceUnit', w1,
                        'NetOrderValue', w1,
                        'GrossOrderValue', w1,
                        'QuotationDeadline', w2,
                        'GrProcessingTime', w1,
                        'TaxCode', w0,
                        'BaseUnitOfMeasure', w0,
                        'ShippingInstr', w0,
                        'OaTargetValue', w1,
                        'PriceDate', w0,
                        'PurchDocCategory', w0,
                        'EffectiveValue', w1,
                        'AffectsCommitments', w0,
                        'MaterialType', w0,
                        'SubitemCategory', w0,
                        'SubItems', w0,
                        'Subtotal1', w1,
                        'Subtotal2', w1,
                        'Subtotal3', w1,
                        'Subtotal4', w1,
                        'Subtotal5', w1
                    ]);
                }
                return _this;
            }
            F13_RfqItemForm.formKey = 'Procurement.F13_RfqItem';
            return F13_RfqItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F13_RfqItemForm = F13_RfqItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_RfqItemService;
        (function (F13_RfqItemService) {
            F13_RfqItemService.baseUrl = 'Procurement/F13_RfqItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F13_RfqItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F13_RfqItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F13_RfqItemService = Procurement.F13_RfqItemService || (Procurement.F13_RfqItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_StatusF10Row;
        (function (F13_StatusF10Row) {
            F13_StatusF10Row.idProperty = 'EmailParticipant';
            F13_StatusF10Row.nameProperty = 'NameStatusEvaluation';
            F13_StatusF10Row.localTextPrefix = 'Procurement.F13_StatusF10';
        })(F13_StatusF10Row = Procurement.F13_StatusF10Row || (Procurement.F13_StatusF10Row = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F14_VendorApprovalRow;
        (function (F14_VendorApprovalRow) {
            F14_VendorApprovalRow.idProperty = 'Email';
            F14_VendorApprovalRow.nameProperty = 'NamaVendor';
            F14_VendorApprovalRow.localTextPrefix = 'Procurement.F14_VendorApproval';
        })(F14_VendorApprovalRow = Procurement.F14_VendorApprovalRow || (Procurement.F14_VendorApprovalRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F14_WinnerAnnouncementForm = /** @class */ (function (_super) {
            __extends(F14_WinnerAnnouncementForm, _super);
            function F14_WinnerAnnouncementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F14_WinnerAnnouncementForm.init) {
                    F14_WinnerAnnouncementForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateTimeEditor;
                    Q.initFormType(F14_WinnerAnnouncementForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ObjectionCloseDate', w2,
                        'F13SubmitDate', w2,
                        'F13SubmitBy', w1,
                        'F14SubmitDate', w2,
                        'F14SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F14_WinnerAnnouncementForm.formKey = 'Procurement.F14_WinnerAnnouncement';
            return F14_WinnerAnnouncementForm;
        }(Serenity.PrefixedContext));
        Procurement.F14_WinnerAnnouncementForm = F14_WinnerAnnouncementForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F14_WinnerAnnouncementService;
        (function (F14_WinnerAnnouncementService) {
            F14_WinnerAnnouncementService.baseUrl = 'Procurement/F14_WinnerAnnouncement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'SendMail'
            ].forEach(function (x) {
                F14_WinnerAnnouncementService[x] = function (r, s, o) {
                    return Q.serviceRequest(F14_WinnerAnnouncementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F14_WinnerAnnouncementService = Procurement.F14_WinnerAnnouncementService || (Procurement.F14_WinnerAnnouncementService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F15_ObjectionProcessForm = /** @class */ (function (_super) {
            __extends(F15_ObjectionProcessForm, _super);
            function F15_ObjectionProcessForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F15_ObjectionProcessForm.init) {
                    F15_ObjectionProcessForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = _Ext.YaTidakEditor;
                    var w2 = _Ext.StaticTextBlock;
                    var w3 = s.TextAreaEditor;
                    Q.initFormType(F15_ObjectionProcessForm, [
                        'VendorId', w0,
                        'EvaluationConclusionId', w0,
                        'SubmitObjection', w1,
                        'ObjectionTerms', w2,
                        'ObjectionDescription', w3
                    ]);
                }
                return _this;
            }
            F15_ObjectionProcessForm.formKey = 'Procurement.F15_ObjectionProcess';
            return F15_ObjectionProcessForm;
        }(Serenity.PrefixedContext));
        Procurement.F15_ObjectionProcessForm = F15_ObjectionProcessForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F15_ObjectionProcessService;
        (function (F15_ObjectionProcessService) {
            F15_ObjectionProcessService.baseUrl = 'Procurement/F15_ObjectionProcess';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                F15_ObjectionProcessService[x] = function (r, s, o) {
                    return Q.serviceRequest(F15_ObjectionProcessService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F15_ObjectionProcessService = Procurement.F15_ObjectionProcessService || (Procurement.F15_ObjectionProcessService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F16_WinnerDesignationForm = /** @class */ (function (_super) {
            __extends(F16_WinnerDesignationForm, _super);
            function F16_WinnerDesignationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F16_WinnerDesignationForm.init) {
                    F16_WinnerDesignationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateTimeEditor;
                    Q.initFormType(F16_WinnerDesignationForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'TemporaryPic', w1,
                        'F13SubmitDate', w2,
                        'F16SubmitDate', w2,
                        'F16SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F16_WinnerDesignationForm.formKey = 'Procurement.F16_WinnerDesignation';
            return F16_WinnerDesignationForm;
        }(Serenity.PrefixedContext));
        Procurement.F16_WinnerDesignationForm = F16_WinnerDesignationForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F16_WinnerDesignationService;
        (function (F16_WinnerDesignationService) {
            F16_WinnerDesignationService.baseUrl = 'Procurement/F16_WinnerDesignation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                F16_WinnerDesignationService[x] = function (r, s, o) {
                    return Q.serviceRequest(F16_WinnerDesignationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F16_WinnerDesignationService = Procurement.F16_WinnerDesignationService || (Procurement.F16_WinnerDesignationService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F17_PurchOrderDocUploadForm = /** @class */ (function (_super) {
            __extends(F17_PurchOrderDocUploadForm, _super);
            function F17_PurchOrderDocUploadForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F17_PurchOrderDocUploadForm.init) {
                    F17_PurchOrderDocUploadForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.DateTimeEditor;
                    Q.initFormType(F17_PurchOrderDocUploadForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'PoDocName', w1,
                        'PoNumber', w1,
                        'PoDocFile', w2,
                        'F13SubmitDate', w3,
                        'F17SubmitDate', w3,
                        'F17SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F17_PurchOrderDocUploadForm.formKey = 'Procurement.F17_PurchOrderDocUpload';
            return F17_PurchOrderDocUploadForm;
        }(Serenity.PrefixedContext));
        Procurement.F17_PurchOrderDocUploadForm = F17_PurchOrderDocUploadForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F17_PurchOrderDocUploadService;
        (function (F17_PurchOrderDocUploadService) {
            F17_PurchOrderDocUploadService.baseUrl = 'Procurement/F17_PurchOrderDocUpload';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                F17_PurchOrderDocUploadService[x] = function (r, s, o) {
                    return Q.serviceRequest(F17_PurchOrderDocUploadService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F17_PurchOrderDocUploadService = Procurement.F17_PurchOrderDocUploadService || (Procurement.F17_PurchOrderDocUploadService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ApprovalRow;
        (function (F19_ApprovalRow) {
            F19_ApprovalRow.idProperty = 'id';
            F19_ApprovalRow.nameProperty = 'ProcurementTypeName';
            F19_ApprovalRow.localTextPrefix = 'Procurement.F19_Approval';
        })(F19_ApprovalRow = Procurement.F19_ApprovalRow || (Procurement.F19_ApprovalRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeApprovalForm = /** @class */ (function (_super) {
            __extends(F19_CommitteeApprovalForm, _super);
            function F19_CommitteeApprovalForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F19_CommitteeApprovalForm.init) {
                    F19_CommitteeApprovalForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = Procurement.F19_CommitteeMembersEditor;
                    var w3 = Procurement.F19_ProcParticipantsEditor;
                    var w4 = s.DateTimeEditor;
                    Q.initFormType(F19_CommitteeApprovalForm, [
                        'ProcurementId', w0,
                        'ProcurementTypeId', w1,
                        'Status', w1,
                        'CollectiveNumber', w0,
                        'Title', w0,
                        'Classification', w0,
                        'Qualification', w0,
                        'CommitteeMember', w2,
                        'ProcParticipant', w3,
                        'DocSubmitMethodId', w1,
                        'TenderDocSubmitOpenDate', w4,
                        'TenderDocSubmitCloseDate', w4,
                        'F19SubmitDate', w4,
                        'F19SubmitBy', w0
                    ]);
                }
                return _this;
            }
            F19_CommitteeApprovalForm.formKey = 'Procurement.F19_CommitteeApproval';
            return F19_CommitteeApprovalForm;
        }(Serenity.PrefixedContext));
        Procurement.F19_CommitteeApprovalForm = F19_CommitteeApprovalForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeApprovalService;
        (function (F19_CommitteeApprovalService) {
            F19_CommitteeApprovalService.baseUrl = 'Procurement/F19_CommitteeApproval';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'SubmitCreate',
                'Approve',
                'Reject'
            ].forEach(function (x) {
                F19_CommitteeApprovalService[x] = function (r, s, o) {
                    return Q.serviceRequest(F19_CommitteeApprovalService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F19_CommitteeApprovalService = Procurement.F19_CommitteeApprovalService || (Procurement.F19_CommitteeApprovalService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeMemberForm = /** @class */ (function (_super) {
            __extends(F19_CommitteeMemberForm, _super);
            function F19_CommitteeMemberForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F19_CommitteeMemberForm.init) {
                    F19_CommitteeMemberForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.EnumEditor;
                    var w3 = s.DateEditor;
                    Q.initFormType(F19_CommitteeMemberForm, [
                        'ProcurementId', w0,
                        'RoleId', w1,
                        'CommitteeRoleId', w1,
                        'ApprovalStatus', w2,
                        'ApprovalDate', w3,
                        'ApprovalBy', w0
                    ]);
                }
                return _this;
            }
            F19_CommitteeMemberForm.formKey = 'Procurement.F19_CommitteeMember';
            return F19_CommitteeMemberForm;
        }(Serenity.PrefixedContext));
        Procurement.F19_CommitteeMemberForm = F19_CommitteeMemberForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeMemberService;
        (function (F19_CommitteeMemberService) {
            F19_CommitteeMemberService.baseUrl = 'Procurement/F19_CommitteeMember';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F19_CommitteeMemberService[x] = function (r, s, o) {
                    return Q.serviceRequest(F19_CommitteeMemberService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F19_CommitteeMemberService = Procurement.F19_CommitteeMemberService || (Procurement.F19_CommitteeMemberService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantForm = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantForm, _super);
            function F19_ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F19_ProcParticipantForm.init) {
                    F19_ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.ImageUploadEditor;
                    var w4 = s.TextAreaEditor;
                    var w5 = Procurement.F7_ProcParticipantItemsEditor;
                    var w6 = s.DateTimeEditor;
                    Q.initFormType(F19_ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'VendorName', w0,
                        'PriceDocumentFile', w3,
                        'TechSpecDocFile', w3,
                        'SupportingLetterFile', w3,
                        'CatalogFile', w3,
                        'AdminDocAtk', w2,
                        'TechSpecDocAtk', w2,
                        'SupportingLetterAtk', w2,
                        'CatalogAtk', w2,
                        'EvaluationDesc', w4,
                        'ClarificationRequest', w4,
                        'EvaluationConclusionId', w2,
                        'ProcParticipantItems', w5,
                        'F5ParticipantSubmitDate', w6,
                        'F5ParticipantSubmitBy', w0
                    ]);
                }
                return _this;
            }
            F19_ProcParticipantForm.formKey = 'Procurement.F19_ProcParticipant';
            return F19_ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.F19_ProcParticipantForm = F19_ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantItemForm, _super);
            function F19_ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F19_ProcParticipantItemForm.init) {
                    F19_ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.TextAreaEditor;
                    var w2 = s.DecimalEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(F19_ProcParticipantItemForm, [
                        'ProcParticipantItemId', w0,
                        'ItemSequence', w0,
                        'Material', w0,
                        'ShortText', w1,
                        'BidPrice', w2,
                        'RfqItemTargetQuantity', w2,
                        'RfqItemOrderUnit', w0,
                        'ProcurementDocSubmitMethodId', w3
                    ]);
                }
                return _this;
            }
            F19_ProcParticipantItemForm.formKey = 'Procurement.F19_ProcParticipantItem';
            return F19_ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F19_ProcParticipantItemForm = F19_ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantItemService;
        (function (F19_ProcParticipantItemService) {
            F19_ProcParticipantItemService.baseUrl = 'Procurement/F19_ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F19_ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F19_ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F19_ProcParticipantItemService = Procurement.F19_ProcParticipantItemService || (Procurement.F19_ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantService;
        (function (F19_ProcParticipantService) {
            F19_ProcParticipantService.baseUrl = 'Procurement/F19_ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F19_ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(F19_ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F19_ProcParticipantService = Procurement.F19_ProcParticipantService || (Procurement.F19_ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F1_BLSelectionAdjustmentForm = /** @class */ (function (_super) {
            __extends(F1_BLSelectionAdjustmentForm, _super);
            function F1_BLSelectionAdjustmentForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F1_BLSelectionAdjustmentForm.init) {
                    F1_BLSelectionAdjustmentForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = _Ext.YaTidakEditor;
                    var w4 = s.DecimalEditor;
                    var w5 = Procurement.CommitteeMembersEditor;
                    var w6 = Procurement.ProcParticipantsEditor;
                    Q.initFormType(F1_BLSelectionAdjustmentForm, [
                        'CollectiveNumber', w0,
                        'ProcurementId', w0,
                        'ProcurementTypeId', w1,
                        'Status', w1,
                        'Title', w0,
                        'Classification', w0,
                        'Qualification', w0,
                        'RequestedBy', w0,
                        'RequestorPosition', w0,
                        'ApprovedBy', w0,
                        'ApproverPosition', w0,
                        'SapBidderListCreatedBy', w0,
                        'SapBidderListCreatedDate', w2,
                        'OfficeAddress', w1,
                        'ProcValueRangeId', w1,
                        'PerformanceGuaranteeRequired', w3,
                        'GuaranteePercentage', w4,
                        'CommitteeTypeId', w1,
                        'ProcurementMethodId', w1,
                        'CommitteeMember', w5,
                        'ProcParticipant', w6,
                        'CreatedBy', w0,
                        'CreatedDate', w2,
                        'F1SubmitDate', w2,
                        'F1SubmitBy', w0
                    ]);
                }
                return _this;
            }
            F1_BLSelectionAdjustmentForm.formKey = 'Procurement.F1_BLSelectionAdjustment';
            return F1_BLSelectionAdjustmentForm;
        }(Serenity.PrefixedContext));
        Procurement.F1_BLSelectionAdjustmentForm = F1_BLSelectionAdjustmentForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F1_BLSelectionAdjustmentService;
        (function (F1_BLSelectionAdjustmentService) {
            F1_BLSelectionAdjustmentService.baseUrl = 'Procurement/F1_BLSelectionAdjustment';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'GetBidderListHeader',
                'SubmitCreate',
                'SubmitUpdate'
            ].forEach(function (x) {
                F1_BLSelectionAdjustmentService[x] = function (r, s, o) {
                    return Q.serviceRequest(F1_BLSelectionAdjustmentService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F1_BLSelectionAdjustmentService = Procurement.F1_BLSelectionAdjustmentService || (Procurement.F1_BLSelectionAdjustmentService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcPrForm = /** @class */ (function (_super) {
            __extends(F20_ProcPrForm, _super);
            function F20_ProcPrForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F20_ProcPrForm.init) {
                    F20_ProcPrForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    Q.initFormType(F20_ProcPrForm, [
                        'ProcurementId', w0,
                        'PrNo', w0,
                        'InsertDate', w1,
                        'InsertBy', w0
                    ]);
                }
                return _this;
            }
            F20_ProcPrForm.formKey = 'Procurement.F20_ProcPr';
            return F20_ProcPrForm;
        }(Serenity.PrefixedContext));
        Procurement.F20_ProcPrForm = F20_ProcPrForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcPrService;
        (function (F20_ProcPrService) {
            F20_ProcPrService.baseUrl = 'Procurement/F20_ProcPr';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F20_ProcPrService[x] = function (r, s, o) {
                    return Q.serviceRequest(F20_ProcPrService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F20_ProcPrService = Procurement.F20_ProcPrService || (Procurement.F20_ProcPrService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcurementForm = /** @class */ (function (_super) {
            __extends(F20_ProcurementForm, _super);
            function F20_ProcurementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F20_ProcurementForm.init) {
                    F20_ProcurementForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = s.DecimalEditor;
                    var w4 = _Ext.YaTidakEditor;
                    var w5 = s.IntegerEditor;
                    var w6 = s.BooleanEditor;
                    var w7 = s.DateEditor;
                    var w8 = s.TextAreaEditor;
                    var w9 = s.EnumEditor;
                    var w10 = s.ImageUploadEditor;
                    Q.initFormType(F20_ProcurementForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'RequestedBy', w1,
                        'RequestorPosition', w1,
                        'ApprovedBy', w1,
                        'ApproverPosition', w1,
                        'SapBidderListCreatedBy', w1,
                        'SapBidderListCreatedDate', w2,
                        'CreatedBy', w1,
                        'CreatedDate', w2,
                        'GuaranteePercentage', w3,
                        'OfficeAddress', w0,
                        'ProcValueRangeId', w0,
                        'CommitteeTypeId', w0,
                        'PerformanceGuaranteeRequired', w4,
                        'TenderPeriod', w5,
                        'DeliveryTime', w5,
                        'DestinationId', w0,
                        'ContractTypeId', w0,
                        'CurrencyId', w0,
                        'DocSubmitMethodId', w0,
                        'AanwijzingExists', w6,
                        'AanwijzingDate', w7,
                        'AanwijzingClosingDate', w7,
                        'AanwijzingLocation', w8,
                        'AanwijzingClosingLocation', w8,
                        'AanwijzingSecretary', w1,
                        'AanwijzingSummary', w8,
                        'FieldSurveyExists', w9,
                        'FieldSurveyAddress', w8,
                        'ItbDocumentFile', w10,
                        'ItbDocumentName', w1,
                        'RksDocumentFile', w10,
                        'RksDocumentName', w1,
                        'TenderDocSubmitOpenDate', w2,
                        'TenderDocSubmitCloseDate', w2,
                        'OrderTypeId', w0,
                        'PurchDocNum', w1,
                        'RfqDate', w2,
                        'QuotationDeadline', w2,
                        'PurchGroup', w1,
                        'PrNo', w1,
                        'AuthPersonName', w1,
                        'AuthPosition', w1,
                        'HeaderText', w8,
                        'HeaderNote', w8,
                        'WorkDescription', w8,
                        'BankKey', w1,
                        'PoCover', w1,
                        'DeliveryAddress', w8,
                        'ToPTargVal', w1,
                        'YourReference', w1,
                        'OurReference', w1,
                        'SalesPerson', w1,
                        'Telephone', w1,
                        'ValidityStart', w7,
                        'ValidityEnd', w7,
                        'ItemInterval', w3,
                        'SubItemInterval', w3,
                        'Warranty', w7,
                        'Language', w1,
                        'EvaluationClosingPriceDate', w7,
                        'ReviewOeRequired', w4,
                        'ProcAgreement', w9,
                        'ProcAgreementDate', w2,
                        'ProcAsRequired', w9,
                        'ProcAsApproved', w9,
                        'ProcAsApprovedDate', w7,
                        'ProcAsDesc', w1,
                        'FinalConclusionDesc', w8,
                        'WinnerNominationDate', w2,
                        'ObjectionCloseDate', w2,
                        'PoDocName', w1,
                        'TemporaryPic', w1,
                        'PoNumber', w1,
                        'PoDocFile', w10,
                        'F1SubmitDate', w2,
                        'F1SubmitBy', w1,
                        'F2SubmitDate', w2,
                        'F2SubmitBy', w1,
                        'F3SubmitDate', w2,
                        'F3SubmitBy', w1,
                        'F31SubmitDate', w2,
                        'F31SubmitBy', w1,
                        'F4SubmitDate', w2,
                        'F4SubmitBy', w1,
                        'F5SubmitDate', w2,
                        'F5SubmitBy', w1,
                        'F6SubmitDate', w2,
                        'F6SubmitBy', w1,
                        'F7SubmitDate', w2,
                        'F7SubmitBy', w1,
                        'F8SubmitDate', w2,
                        'F8SubmitBy', w1,
                        'F9SubmitDate', w2,
                        'F9SubmitBy', w1,
                        'F10SubmitDate', w2,
                        'F10SubmitBy', w1,
                        'F11SubmitDate', w2,
                        'F11SubmitBy', w1,
                        'F12SubmitDate', w2,
                        'F12SubmitBy', w1,
                        'F13SubmitDate', w2,
                        'F13SubmitBy', w1,
                        'F14SubmitDate', w2,
                        'F14SubmitBy', w1,
                        'F15SubmitDate', w2,
                        'F15SubmitBy', w1,
                        'F16SubmitDate', w2,
                        'F16SubmitBy', w1,
                        'F17SubmitDate', w2,
                        'F17SubmitBy', w1,
                        'ProcurementMethodId', w0,
                        'District', w1,
                        'Csms', w1,
                        'MinScore', w8
                    ]);
                }
                return _this;
            }
            F20_ProcurementForm.formKey = 'Procurement.F20_Procurement';
            return F20_ProcurementForm;
        }(Serenity.PrefixedContext));
        Procurement.F20_ProcurementForm = F20_ProcurementForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcurementService;
        (function (F20_ProcurementService) {
            F20_ProcurementService.baseUrl = 'Procurement/F20_Procurement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F20_ProcurementService[x] = function (r, s, o) {
                    return Q.serviceRequest(F20_ProcurementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F20_ProcurementService = Procurement.F20_ProcurementService || (Procurement.F20_ProcurementService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_PurchaseRequisitionTrackingForm = /** @class */ (function (_super) {
            __extends(F20_PurchaseRequisitionTrackingForm, _super);
            function F20_PurchaseRequisitionTrackingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F20_PurchaseRequisitionTrackingForm.init) {
                    F20_PurchaseRequisitionTrackingForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.DateEditor;
                    var w4 = Procurement.F20_ProcPrEditor;
                    Q.initFormType(F20_PurchaseRequisitionTrackingForm, [
                        'BuyerId', w0,
                        'CostCenter', w1,
                        'ScanPrFile', w2,
                        'ScanPrName', w1,
                        'AssignDate', w3,
                        'AssignBy', w1,
                        'CreatedDate', w3,
                        'CreatedBy', w1,
                        'Status', w1,
                        'ProcPrItems', w4
                    ]);
                }
                return _this;
            }
            F20_PurchaseRequisitionTrackingForm.formKey = 'Procurement.F20_PurchaseRequisitionTracking';
            return F20_PurchaseRequisitionTrackingForm;
        }(Serenity.PrefixedContext));
        Procurement.F20_PurchaseRequisitionTrackingForm = F20_PurchaseRequisitionTrackingForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_PurchaseRequisitionTrackingService;
        (function (F20_PurchaseRequisitionTrackingService) {
            F20_PurchaseRequisitionTrackingService.baseUrl = 'Procurement/F20_PurchaseRequisitionTracking';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F20_PurchaseRequisitionTrackingService[x] = function (r, s, o) {
                    return Q.serviceRequest(F20_PurchaseRequisitionTrackingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F20_PurchaseRequisitionTrackingService = Procurement.F20_PurchaseRequisitionTrackingService || (Procurement.F20_PurchaseRequisitionTrackingService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F2_ProcurementDocCreationForm = /** @class */ (function (_super) {
            __extends(F2_ProcurementDocCreationForm, _super);
            function F2_ProcurementDocCreationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F2_ProcurementDocCreationForm.init) {
                    F2_ProcurementDocCreationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = s.IntegerEditor;
                    var w4 = s.BooleanEditor;
                    var w5 = s.DateEditor;
                    var w6 = s.TextAreaEditor;
                    var w7 = s.EnumEditor;
                    var w8 = s.HtmlNoteContentEditor;
                    var w9 = s.ImageUploadEditor;
                    Q.initFormType(F2_ProcurementDocCreationForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'RequestedBy', w1,
                        'RequestorPosition', w1,
                        'ApprovedBy', w1,
                        'ApproverPosition', w1,
                        'SapBidderListCreatedBy', w1,
                        'SapBidderListCreatedDate', w2,
                        'CreatedBy', w1,
                        'CreatedDate', w2,
                        'TenderPeriod', w3,
                        'DeliveryTime', w3,
                        'DestinationId', w0,
                        'ContractTypeId', w0,
                        'CurrencyId', w0,
                        'DocSubmitMethodId', w0,
                        'AanwijzingExists', w4,
                        'AanwijzingDate', w5,
                        'AanwijzingClosingDate', w5,
                        'AanwijzingLocation', w6,
                        'AanwijzingSecretary', w1,
                        'AanwijzingSummary', w6,
                        'FieldSurveyExists', w7,
                        'FieldSurveyAddress', w6,
                        'RequestTerms', w8,
                        'ItbDocumentFile', w9,
                        'ItbDocumentName', w1,
                        'RksDocumentFile', w9,
                        'RksDocumentName', w1,
                        'TenderDocSubmitOpenDate', w2,
                        'TenderDocSubmitCloseDate', w2,
                        'F2SubmitDate', w2,
                        'F2SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F2_ProcurementDocCreationForm.formKey = 'Procurement.F2_ProcurementDocCreation';
            return F2_ProcurementDocCreationForm;
        }(Serenity.PrefixedContext));
        Procurement.F2_ProcurementDocCreationForm = F2_ProcurementDocCreationForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F2_ProcurementDocCreationService;
        (function (F2_ProcurementDocCreationService) {
            F2_ProcurementDocCreationService.baseUrl = 'Procurement/F2_ProcurementDocCreation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                F2_ProcurementDocCreationService[x] = function (r, s, o) {
                    return Q.serviceRequest(F2_ProcurementDocCreationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F2_ProcurementDocCreationService = Procurement.F2_ProcurementDocCreationService || (Procurement.F2_ProcurementDocCreationService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_1_InputOwnerEstimateForm = /** @class */ (function (_super) {
            __extends(F3_1_InputOwnerEstimateForm, _super);
            function F3_1_InputOwnerEstimateForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F3_1_InputOwnerEstimateForm.init) {
                    F3_1_InputOwnerEstimateForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = Procurement.RfqItemsEditor;
                    Q.initFormType(F3_1_InputOwnerEstimateForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'F31SubmitDate', w2,
                        'F31SubmitBy', w1,
                        'RfqItems', w3
                    ]);
                }
                return _this;
            }
            F3_1_InputOwnerEstimateForm.formKey = 'Procurement.F3_1_InputOwnerEstimate';
            return F3_1_InputOwnerEstimateForm;
        }(Serenity.PrefixedContext));
        Procurement.F3_1_InputOwnerEstimateForm = F3_1_InputOwnerEstimateForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_1_InputOwnerEstimateService;
        (function (F3_1_InputOwnerEstimateService) {
            F3_1_InputOwnerEstimateService.baseUrl = 'Procurement/F3_1_InputOwnerEstimate';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'ExcelImport'
            ].forEach(function (x) {
                F3_1_InputOwnerEstimateService[x] = function (r, s, o) {
                    return Q.serviceRequest(F3_1_InputOwnerEstimateService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F3_1_InputOwnerEstimateService = Procurement.F3_1_InputOwnerEstimateService || (Procurement.F3_1_InputOwnerEstimateService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_CreateRFQForm = /** @class */ (function (_super) {
            __extends(F3_CreateRFQForm, _super);
            function F3_CreateRFQForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F3_CreateRFQForm.init) {
                    F3_CreateRFQForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.BooleanEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = s.TextAreaEditor;
                    var w5 = s.DateEditor;
                    var w6 = s.DecimalEditor;
                    var w7 = Procurement.RfqItemsEditor;
                    var w8 = Procurement.RfqTextsEditor;
                    var w9 = Procurement.PurchaseRequestsEditor;
                    Q.initFormType(F3_CreateRFQForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'AanwijzingExists', w2,
                        'TenderDocSubmitOpenDate', w3,
                        'TenderDocSubmitCloseDate', w3,
                        'CurrencyId', w0,
                        'PurchDocNum', w1,
                        'OrderTypeId', w0,
                        'RfqDate', w3,
                        'QuotationDeadline', w3,
                        'PurchGroup', w1,
                        'PrNo', w1,
                        'AuthPersonName', w1,
                        'AuthPosition', w1,
                        'DeliveryAddress', w4,
                        'ToPTargVal', w1,
                        'YourReference', w1,
                        'OurReference', w1,
                        'SalesPerson', w1,
                        'Telephone', w1,
                        'ValidityStart', w5,
                        'ValidityEnd', w5,
                        'ItemInterval', w6,
                        'SubItemInterval', w6,
                        'Warranty', w5,
                        'Language', w1,
                        'F3SubmitDate', w3,
                        'F3SubmitBy', w1,
                        'RfqItems', w7,
                        'RfqTexts', w8,
                        'ProcPurchaseRequests', w9
                    ]);
                }
                return _this;
            }
            F3_CreateRFQForm.formKey = 'Procurement.F3_CreateRFQ';
            return F3_CreateRFQForm;
        }(Serenity.PrefixedContext));
        Procurement.F3_CreateRFQForm = F3_CreateRFQForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_CreateRFQService;
        (function (F3_CreateRFQService) {
            F3_CreateRFQService.baseUrl = 'Procurement/F3_CreateRFQ';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'SendMail',
                'SendMailVendor',
                'GetRFQ'
            ].forEach(function (x) {
                F3_CreateRFQService[x] = function (r, s, o) {
                    return Q.serviceRequest(F3_CreateRFQService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F3_CreateRFQService = Procurement.F3_CreateRFQService || (Procurement.F3_CreateRFQService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_EmailVendorRow;
        (function (F3_EmailVendorRow) {
            F3_EmailVendorRow.idProperty = 'EmailParticipant';
            F3_EmailVendorRow.nameProperty = 'EvaluateConclusionName';
            F3_EmailVendorRow.localTextPrefix = 'Procurement.F3_EmailVendor';
        })(F3_EmailVendorRow = Procurement.F3_EmailVendorRow || (Procurement.F3_EmailVendorRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F4_AanwijzingForm = /** @class */ (function (_super) {
            __extends(F4_AanwijzingForm, _super);
            function F4_AanwijzingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F4_AanwijzingForm.init) {
                    F4_AanwijzingForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.TextAreaEditor;
                    var w4 = s.DateTimeEditor;
                    Q.initFormType(F4_AanwijzingForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'AanwijzingDate', w2,
                        'AanwijzingClosingDate', w2,
                        'AanwijzingLocation', w3,
                        'AanwijzingClosingLocation', w3,
                        'AanwijzingSecretary', w1,
                        'AdministrativeExplanation', w3,
                        'TechnicalExplanation', w3,
                        'OtherExplanation', w3,
                        'AanwijzingSummary', w3,
                        'TenderDocSubmitOpenDate', w4,
                        'TenderDocSubmitCloseDate', w4,
                        'F4SubmitDate', w4,
                        'F4SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F4_AanwijzingForm.formKey = 'Procurement.F4_Aanwijzing';
            return F4_AanwijzingForm;
        }(Serenity.PrefixedContext));
        Procurement.F4_AanwijzingForm = F4_AanwijzingForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F4_AanwijzingService;
        (function (F4_AanwijzingService) {
            F4_AanwijzingService.baseUrl = 'Procurement/F4_Aanwijzing';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit'
            ].forEach(function (x) {
                F4_AanwijzingService[x] = function (r, s, o) {
                    return Q.serviceRequest(F4_AanwijzingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F4_AanwijzingService = Procurement.F4_AanwijzingService || (Procurement.F4_AanwijzingService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(F5_ProcParticipantItemForm, _super);
            function F5_ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F5_ProcParticipantItemForm.init) {
                    F5_ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.TextAreaEditor;
                    var w2 = s.DecimalEditor;
                    Q.initFormType(F5_ProcParticipantItemForm, [
                        'ProcParticipantItemId', w0,
                        'ItemSequence', w0,
                        'Material', w0,
                        'ShortText', w1,
                        'BidPrice', w2,
                        'RfqItemTargetQuantity', w2,
                        'RfqItemOrderUnit', w0,
                        'RfqItemId', w0
                    ]);
                }
                return _this;
            }
            F5_ProcParticipantItemForm.formKey = 'Procurement.F5_ProcParticipantItem';
            return F5_ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F5_ProcParticipantItemForm = F5_ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_ProcParticipantItemService;
        (function (F5_ProcParticipantItemService) {
            F5_ProcParticipantItemService.baseUrl = 'Procurement/F5_ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F5_ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F5_ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F5_ProcParticipantItemService = Procurement.F5_ProcParticipantItemService || (Procurement.F5_ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_SubmitTenderDocumentForm = /** @class */ (function (_super) {
            __extends(F5_SubmitTenderDocumentForm, _super);
            function F5_SubmitTenderDocumentForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F5_SubmitTenderDocumentForm.init) {
                    F5_SubmitTenderDocumentForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.BooleanEditor;
                    var w4 = s.DateEditor;
                    var w5 = Procurement.F5_ProcParticipantItemsEditor;
                    var w6 = s.DateTimeEditor;
                    Q.initFormType(F5_SubmitTenderDocumentForm, [
                        'ProcurementId', w0,
                        'ProcurementProcurementTypeId', w0,
                        'ProcurementStatus', w0,
                        'ProcurementCollectiveNumber', w0,
                        'ProcurementTitle', w0,
                        'ProcurementClassification', w0,
                        'ProcurementQualification', w0,
                        'DocSubmitMethodName', w0,
                        'VendorId', w1,
                        'PriceDocumentFile', w2,
                        'TechSpecDocFile', w2,
                        'SupportingLetterFile', w2,
                        'CatalogFile', w2,
                        'SubmitDocTnc', w3,
                        'SubmitDocTncDate', w4,
                        'ProcParticipantItems', w5,
                        'F5ParticipantSubmitDate', w6,
                        'F5ParticipantSubmitBy', w0
                    ]);
                }
                return _this;
            }
            F5_SubmitTenderDocumentForm.formKey = 'Procurement.F5_SubmitTenderDocument';
            return F5_SubmitTenderDocumentForm;
        }(Serenity.PrefixedContext));
        Procurement.F5_SubmitTenderDocumentForm = F5_SubmitTenderDocumentForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_SubmitTenderDocumentService;
        (function (F5_SubmitTenderDocumentService) {
            F5_SubmitTenderDocumentService.baseUrl = 'Procurement/F5_SubmitTenderDocument';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'BidPriceImport'
            ].forEach(function (x) {
                F5_SubmitTenderDocumentService[x] = function (r, s, o) {
                    return Q.serviceRequest(F5_SubmitTenderDocumentService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F5_SubmitTenderDocumentService = Procurement.F5_SubmitTenderDocumentService || (Procurement.F5_SubmitTenderDocumentService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_TnCForm = /** @class */ (function (_super) {
            __extends(F5_TnCForm, _super);
            function F5_TnCForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F5_TnCForm.init) {
                    F5_TnCForm.init = true;
                    var s = Serenity;
                    var w0 = SCMONLINE.StaticTextBlock;
                    var w1 = s.BooleanEditor;
                    Q.initFormType(F5_TnCForm, [
                        'TnCDescription', w0,
                        'TnCAgree', w1
                    ]);
                }
                return _this;
            }
            F5_TnCForm.formKey = 'Procurement.F5_TnC';
            return F5_TnCForm;
        }(Serenity.PrefixedContext));
        Procurement.F5_TnCForm = F5_TnCForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_OpenTenderDocumentForm = /** @class */ (function (_super) {
            __extends(F6_OpenTenderDocumentForm, _super);
            function F6_OpenTenderDocumentForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F6_OpenTenderDocumentForm.init) {
                    F6_OpenTenderDocumentForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = Procurement.F6_ProcParticipantsEditor;
                    var w3 = s.EnumEditor;
                    var w4 = s.TextAreaEditor;
                    var w5 = s.DateTimeEditor;
                    Q.initFormType(F6_OpenTenderDocumentForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ProcParticipant', w2,
                        'DocSubmitMethodId', w0,
                        'ProcRejectTender', w3,
                        'ProcRejectTenderDesc', w4,
                        'TenderDocSubmitOpenDate', w5,
                        'TenderDocSubmitCloseDate', w5
                    ]);
                }
                return _this;
            }
            F6_OpenTenderDocumentForm.formKey = 'Procurement.F6_OpenTenderDocument';
            return F6_OpenTenderDocumentForm;
        }(Serenity.PrefixedContext));
        Procurement.F6_OpenTenderDocumentForm = F6_OpenTenderDocumentForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_OpenTenderDocumentService;
        (function (F6_OpenTenderDocumentService) {
            F6_OpenTenderDocumentService.baseUrl = 'Procurement/F6_OpenTenderDocument';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'Rejected',
                'SendMailReject'
            ].forEach(function (x) {
                F6_OpenTenderDocumentService[x] = function (r, s, o) {
                    return Q.serviceRequest(F6_OpenTenderDocumentService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F6_OpenTenderDocumentService = Procurement.F6_OpenTenderDocumentService || (Procurement.F6_OpenTenderDocumentService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantForm = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantForm, _super);
            function F6_ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F6_ProcParticipantForm.init) {
                    F6_ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.ImageUploadEditor;
                    var w4 = s.EnumEditor;
                    var w5 = s.TextAreaEditor;
                    var w6 = Procurement.F6_ProcParticipantItemsEditor;
                    var w7 = s.DateTimeEditor;
                    Q.initFormType(F6_ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'VendorName', w0,
                        'PriceDocumentFile', w3,
                        'TechSpecDocFile', w3,
                        'SupportingLetterFile', w3,
                        'CatalogFile', w3,
                        'AdminDocExists', w4,
                        'TechSpecDocExists', w4,
                        'SupportingLetterExists', w4,
                        'CatalogExists', w4,
                        'OpeningDocDesc', w5,
                        'ProcParticipantItems', w6,
                        'F5ParticipantSubmitDate', w7,
                        'F5ParticipantSubmitBy', w0
                    ]);
                }
                return _this;
            }
            F6_ProcParticipantForm.formKey = 'Procurement.F6_ProcParticipant';
            return F6_ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.F6_ProcParticipantForm = F6_ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantItemForm, _super);
            function F6_ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F6_ProcParticipantItemForm.init) {
                    F6_ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.TextAreaEditor;
                    var w2 = s.DecimalEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(F6_ProcParticipantItemForm, [
                        'ProcParticipantItemId', w0,
                        'ItemSequence', w0,
                        'Material', w0,
                        'ShortText', w1,
                        'RfqItemTargetQuantity', w2,
                        'RfqItemOrderUnit', w0,
                        'ProcurementDocSubmitMethodId', w3
                    ]);
                }
                return _this;
            }
            F6_ProcParticipantItemForm.formKey = 'Procurement.F6_ProcParticipantItem';
            return F6_ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F6_ProcParticipantItemForm = F6_ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantItemService;
        (function (F6_ProcParticipantItemService) {
            F6_ProcParticipantItemService.baseUrl = 'Procurement/F6_ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F6_ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F6_ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F6_ProcParticipantItemService = Procurement.F6_ProcParticipantItemService || (Procurement.F6_ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantService;
        (function (F6_ProcParticipantService) {
            F6_ProcParticipantService.baseUrl = 'Procurement/F6_ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F6_ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(F6_ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F6_ProcParticipantService = Procurement.F6_ProcParticipantService || (Procurement.F6_ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ListCommitteeRow;
        (function (F7_ListCommitteeRow) {
            F7_ListCommitteeRow.idProperty = 'Email';
            F7_ListCommitteeRow.nameProperty = 'EvaluateConclusionName';
            F7_ListCommitteeRow.localTextPrefix = 'Procurement.F7_ListCommittee';
        })(F7_ListCommitteeRow = Procurement.F7_ListCommitteeRow || (Procurement.F7_ListCommitteeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantForm = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantForm, _super);
            function F7_ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F7_ProcParticipantForm.init) {
                    F7_ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.ImageUploadEditor;
                    var w4 = s.TextAreaEditor;
                    var w5 = Procurement.F7_ProcParticipantItemsEditor;
                    var w6 = s.DateTimeEditor;
                    Q.initFormType(F7_ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'VendorName', w0,
                        'PriceDocumentFile', w3,
                        'TechSpecDocFile', w3,
                        'SupportingLetterFile', w3,
                        'CatalogFile', w3,
                        'AdminDocAtk', w2,
                        'TechSpecDocAtk', w2,
                        'SupportingLetterAtk', w2,
                        'CatalogAtk', w2,
                        'EvaluationDesc', w4,
                        'ClarificationRequest', w4,
                        'EvaluationConclusionId', w2,
                        'QuoteDesc', w4,
                        'ProcParticipantItems', w5,
                        'F5ParticipantSubmitDate', w6,
                        'F5ParticipantSubmitBy', w0
                    ]);
                }
                return _this;
            }
            F7_ProcParticipantForm.formKey = 'Procurement.F7_ProcParticipant';
            return F7_ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.F7_ProcParticipantForm = F7_ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantItemForm, _super);
            function F7_ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F7_ProcParticipantItemForm.init) {
                    F7_ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.TextAreaEditor;
                    var w2 = s.DecimalEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(F7_ProcParticipantItemForm, [
                        'ProcParticipantItemId', w0,
                        'ItemSequence', w0,
                        'Material', w0,
                        'ShortText', w1,
                        'BidPrice', w2,
                        'RfqItemOrderQuantity', w2,
                        'RfqItemOrderUnit', w0,
                        'ProcurementDocSubmitMethodId', w3
                    ]);
                }
                return _this;
            }
            F7_ProcParticipantItemForm.formKey = 'Procurement.F7_ProcParticipantItem';
            return F7_ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F7_ProcParticipantItemForm = F7_ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantItemService;
        (function (F7_ProcParticipantItemService) {
            F7_ProcParticipantItemService.baseUrl = 'Procurement/F7_ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F7_ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F7_ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F7_ProcParticipantItemService = Procurement.F7_ProcParticipantItemService || (Procurement.F7_ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantService;
        (function (F7_ProcParticipantService) {
            F7_ProcParticipantService.baseUrl = 'Procurement/F7_ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F7_ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(F7_ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F7_ProcParticipantService = Procurement.F7_ProcParticipantService || (Procurement.F7_ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_TenderEvaluationForm = /** @class */ (function (_super) {
            __extends(F7_TenderEvaluationForm, _super);
            function F7_TenderEvaluationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F7_TenderEvaluationForm.init) {
                    F7_TenderEvaluationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = Procurement.F7_ProcParticipantsEditor;
                    var w3 = s.DateTimeEditor;
                    Q.initFormType(F7_TenderEvaluationForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ProcParticipant', w2,
                        'DocSubmitMethodId', w0,
                        'TenderDocSubmitOpenDate', w3,
                        'TenderDocSubmitCloseDate', w3
                    ]);
                }
                return _this;
            }
            F7_TenderEvaluationForm.formKey = 'Procurement.F7_TenderEvaluation';
            return F7_TenderEvaluationForm;
        }(Serenity.PrefixedContext));
        Procurement.F7_TenderEvaluationForm = F7_TenderEvaluationForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_TenderEvaluationService;
        (function (F7_TenderEvaluationService) {
            F7_TenderEvaluationService.baseUrl = 'Procurement/F7_TenderEvaluation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'SendMail',
                'SendCommitteeNotification'
            ].forEach(function (x) {
                F7_TenderEvaluationService[x] = function (r, s, o) {
                    return Q.serviceRequest(F7_TenderEvaluationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F7_TenderEvaluationService = Procurement.F7_TenderEvaluationService || (Procurement.F7_TenderEvaluationService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_VendorParticipantRow;
        (function (F7_VendorParticipantRow) {
            F7_VendorParticipantRow.idProperty = 'EmailParticipant';
            F7_VendorParticipantRow.nameProperty = 'EvaluateConclusionName';
            F7_VendorParticipantRow.localTextPrefix = 'Procurement.F7_VendorParticipant';
        })(F7_VendorParticipantRow = Procurement.F7_VendorParticipantRow || (Procurement.F7_VendorParticipantRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_ProcParticipantForm = /** @class */ (function (_super) {
            __extends(F8_ProcParticipantForm, _super);
            function F8_ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F8_ProcParticipantForm.init) {
                    F8_ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.ImageUploadEditor;
                    var w4 = s.TextAreaEditor;
                    var w5 = s.DateTimeEditor;
                    Q.initFormType(F8_ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'VendorName', w0,
                        'PriceDocumentFile', w3,
                        'TechSpecDocFile', w3,
                        'SupportingLetterFile', w3,
                        'CatalogFile', w3,
                        'AdminDocAtk', w2,
                        'TechSpecDocAtk', w2,
                        'SupportingLetterAtk', w2,
                        'CatalogAtk', w2,
                        'EvaluationDesc', w4,
                        'EvaluationConclusionId', w2,
                        'ClarificationRequest', w4,
                        'ClarificationOffer', w4,
                        'ClarificationResult', w4,
                        'F5ParticipantSubmitDate', w5,
                        'F5ParticipantSubmitBy', w0
                    ]);
                }
                return _this;
            }
            F8_ProcParticipantForm.formKey = 'Procurement.F8_ProcParticipant';
            return F8_ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.F8_ProcParticipantForm = F8_ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_ProcParticipantService;
        (function (F8_ProcParticipantService) {
            F8_ProcParticipantService.baseUrl = 'Procurement/F8_ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F8_ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(F8_ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F8_ProcParticipantService = Procurement.F8_ProcParticipantService || (Procurement.F8_ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_QualificationRow;
        (function (F8_QualificationRow) {
            F8_QualificationRow.idProperty = 'Email';
            F8_QualificationRow.nameProperty = 'Vendorid';
            F8_QualificationRow.localTextPrefix = 'Procurement.F8_Qualification';
        })(F8_QualificationRow = Procurement.F8_QualificationRow || (Procurement.F8_QualificationRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_TechnicalClarificationForm = /** @class */ (function (_super) {
            __extends(F8_TechnicalClarificationForm, _super);
            function F8_TechnicalClarificationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F8_TechnicalClarificationForm.init) {
                    F8_TechnicalClarificationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = Procurement.F8_ProcParticipantsEditor;
                    var w3 = s.DateTimeEditor;
                    Q.initFormType(F8_TechnicalClarificationForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'ProcParticipant', w2,
                        'F8SubmitDate', w3,
                        'F8SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F8_TechnicalClarificationForm.formKey = 'Procurement.F8_TechnicalClarification';
            return F8_TechnicalClarificationForm;
        }(Serenity.PrefixedContext));
        Procurement.F8_TechnicalClarificationForm = F8_TechnicalClarificationForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_TechnicalClarificationService;
        (function (F8_TechnicalClarificationService) {
            F8_TechnicalClarificationService.baseUrl = 'Procurement/F8_TechnicalClarification';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'SendMail'
            ].forEach(function (x) {
                F8_TechnicalClarificationService[x] = function (r, s, o) {
                    return Q.serviceRequest(F8_TechnicalClarificationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F8_TechnicalClarificationService = Procurement.F8_TechnicalClarificationService || (Procurement.F8_TechnicalClarificationService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_PriceEvaluationForm = /** @class */ (function (_super) {
            __extends(F9_PriceEvaluationForm, _super);
            function F9_PriceEvaluationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F9_PriceEvaluationForm.init) {
                    F9_PriceEvaluationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateEditor;
                    var w3 = Procurement.F9_ProcParticipantItemsEditor;
                    var w4 = s.DateTimeEditor;
                    Q.initFormType(F9_PriceEvaluationForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'EvaluationClosingPriceDate', w2,
                        'ContractTypeId', w0,
                        'ProcParticipantItems', w3,
                        'F9SubmitDate', w4,
                        'F9SubmitBy', w1
                    ]);
                }
                return _this;
            }
            F9_PriceEvaluationForm.formKey = 'Procurement.F9_PriceEvaluation';
            return F9_PriceEvaluationForm;
        }(Serenity.PrefixedContext));
        Procurement.F9_PriceEvaluationForm = F9_PriceEvaluationForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_PriceEvaluationService;
        (function (F9_PriceEvaluationService) {
            F9_PriceEvaluationService.baseUrl = 'Procurement/F9_PriceEvaluation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'Submit',
                'SendMail'
            ].forEach(function (x) {
                F9_PriceEvaluationService[x] = function (r, s, o) {
                    return Q.serviceRequest(F9_PriceEvaluationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F9_PriceEvaluationService = Procurement.F9_PriceEvaluationService || (Procurement.F9_PriceEvaluationService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(F9_ProcParticipantItemForm, _super);
            function F9_ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!F9_ProcParticipantItemForm.init) {
                    F9_ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateTimeEditor;
                    var w2 = s.TextAreaEditor;
                    var w3 = s.DecimalEditor;
                    var w4 = s.IntegerEditor;
                    var w5 = s.LookupEditor;
                    Q.initFormType(F9_ProcParticipantItemForm, [
                        'ProcParticipantItemId', w0,
                        'ProcParticipantId', w0,
                        'ProcParticipantVendorId', w0,
                        'VendorName', w0,
                        'F5ParticipantSubmitDate', w1,
                        'RfqItemId', w0,
                        'ItemSequence', w0,
                        'Material', w0,
                        'ShortText', w2,
                        'BidPrice', w3,
                        'BidPriceVsOe', w3,
                        'BidPriceVsOePercentage', w3,
                        'Rank', w4,
                        'EvaluationDescription', w2,
                        'EvaluationConclusionItemId', w5
                    ]);
                }
                return _this;
            }
            F9_ProcParticipantItemForm.formKey = 'Procurement.F9_ProcParticipantItem';
            return F9_ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.F9_ProcParticipantItemForm = F9_ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_ProcParticipantItemService;
        (function (F9_ProcParticipantItemService) {
            F9_ProcParticipantItemService.baseUrl = 'Procurement/F9_ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                F9_ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(F9_ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(F9_ProcParticipantItemService = Procurement.F9_ProcParticipantItemService || (Procurement.F9_ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ForgotForm = /** @class */ (function (_super) {
            __extends(ForgotForm, _super);
            function ForgotForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ForgotForm.init) {
                    ForgotForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ForgotForm, [
                        'CollectiveNumber', w0
                    ]);
                }
                return _this;
            }
            ForgotForm.formKey = 'Procurement.Report';
            return ForgotForm;
        }(Serenity.PrefixedContext));
        Procurement.ForgotForm = ForgotForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OrderTypeForm = /** @class */ (function (_super) {
            __extends(OrderTypeForm, _super);
            function OrderTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OrderTypeForm.init) {
                    OrderTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(OrderTypeForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            OrderTypeForm.formKey = 'Procurement.OrderType';
            return OrderTypeForm;
        }(Serenity.PrefixedContext));
        Procurement.OrderTypeForm = OrderTypeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OrderTypeRow;
        (function (OrderTypeRow) {
            OrderTypeRow.idProperty = 'OrderTypeId';
            OrderTypeRow.nameProperty = 'OrderTypeId';
            OrderTypeRow.localTextPrefix = 'Procurement.OrderType';
            OrderTypeRow.lookupKey = 'Procurement.OrderType';
            function getLookup() {
                return Q.getLookup('Procurement.OrderType');
            }
            OrderTypeRow.getLookup = getLookup;
        })(OrderTypeRow = Procurement.OrderTypeRow || (Procurement.OrderTypeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OrderTypeService;
        (function (OrderTypeService) {
            OrderTypeService.baseUrl = 'Procurement/OrderType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OrderTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(OrderTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(OrderTypeService = Procurement.OrderTypeService || (Procurement.OrderTypeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OwnerEstimateImportForm = /** @class */ (function (_super) {
            __extends(OwnerEstimateImportForm, _super);
            function OwnerEstimateImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OwnerEstimateImportForm.init) {
                    OwnerEstimateImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(OwnerEstimateImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            OwnerEstimateImportForm.formKey = 'Procurement.OwnerEstimateImport';
            return OwnerEstimateImportForm;
        }(Serenity.PrefixedContext));
        Procurement.OwnerEstimateImportForm = OwnerEstimateImportForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OwnerEstimateReviewImportForm = /** @class */ (function (_super) {
            __extends(OwnerEstimateReviewImportForm, _super);
            function OwnerEstimateReviewImportForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OwnerEstimateReviewImportForm.init) {
                    OwnerEstimateReviewImportForm.init = true;
                    var s = Serenity;
                    var w0 = s.ImageUploadEditor;
                    Q.initFormType(OwnerEstimateReviewImportForm, [
                        'FileName', w0
                    ]);
                }
                return _this;
            }
            OwnerEstimateReviewImportForm.formKey = 'Procurement.OwnerEstimateReviewImport';
            return OwnerEstimateReviewImportForm;
        }(Serenity.PrefixedContext));
        Procurement.OwnerEstimateReviewImportForm = OwnerEstimateReviewImportForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantForm = /** @class */ (function (_super) {
            __extends(ProcParticipantForm, _super);
            function ProcParticipantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcParticipantForm.init) {
                    ProcParticipantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.LookupEditor;
                    Q.initFormType(ProcParticipantForm, [
                        'ProcurementId', w0,
                        'SequenceNo', w1,
                        'VendorId', w2,
                        'VendorName', w0,
                        'VendorPenaltyCode', w0,
                        'Qualification', w0
                    ]);
                }
                return _this;
            }
            ProcParticipantForm.formKey = 'Procurement.ProcParticipant';
            return ProcParticipantForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcParticipantForm = ProcParticipantForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantItemForm = /** @class */ (function (_super) {
            __extends(ProcParticipantItemForm, _super);
            function ProcParticipantItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcParticipantItemForm.init) {
                    ProcParticipantItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateTimeEditor;
                    var w2 = s.TextAreaEditor;
                    var w3 = s.DecimalEditor;
                    var w4 = s.IntegerEditor;
                    var w5 = s.BooleanEditor;
                    var w6 = s.LookupEditor;
                    Q.initFormType(ProcParticipantItemForm, [
                        'ProcParticipantId', w0,
                        'ProcurementId', w0,
                        'VendorId', w0,
                        'VendorName', w0,
                        'F5ParticipantSubmitDate', w1,
                        'F5ParticipantSubmitBy', w0,
                        'RfqItemId', w0,
                        'ItemSequence', w0,
                        'Material', w0,
                        'ShortText', w2,
                        'BidPrice', w3,
                        'BidPriceVsOe', w3,
                        'BidPriceVsOePercentage', w3,
                        'Rank', w4,
                        'EvaluationDescription', w2,
                        'NegotiationPrice', w3,
                        'NpVsOe', w3,
                        'NpVsOePercentage', w3,
                        'NegotiationRank', w4,
                        'NegotiationDesc', w2,
                        'ProposeDisclaimer', w5,
                        'DisclaimerDesc', w0,
                        'EvaluationConclusionItemId', w6
                    ]);
                }
                return _this;
            }
            ProcParticipantItemForm.formKey = 'Procurement.ProcParticipantItem';
            return ProcParticipantItemForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcParticipantItemForm = ProcParticipantItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantItemRow;
        (function (ProcParticipantItemRow) {
            ProcParticipantItemRow.idProperty = 'ProcParticipantItemId';
            ProcParticipantItemRow.nameProperty = 'ProcurementTitle';
            ProcParticipantItemRow.localTextPrefix = 'Procurement.ProcParticipantItem';
            ProcParticipantItemRow.lookupKey = 'Procurement.ProcParticipantItem';
            function getLookup() {
                return Q.getLookup('Procurement.ProcParticipantItem');
            }
            ProcParticipantItemRow.getLookup = getLookup;
        })(ProcParticipantItemRow = Procurement.ProcParticipantItemRow || (Procurement.ProcParticipantItemRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantItemService;
        (function (ProcParticipantItemService) {
            ProcParticipantItemService.baseUrl = 'Procurement/ProcParticipantItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcParticipantItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcParticipantItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcParticipantItemService = Procurement.ProcParticipantItemService || (Procurement.ProcParticipantItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantRow;
        (function (ProcParticipantRow) {
            ProcParticipantRow.idProperty = 'ProcParticipantId';
            ProcParticipantRow.nameProperty = 'VendorId';
            ProcParticipantRow.localTextPrefix = 'Procurement.ProcParticipant';
            ProcParticipantRow.lookupKey = 'Procurement.ProcParticipant';
            function getLookup() {
                return Q.getLookup('Procurement.ProcParticipant');
            }
            ProcParticipantRow.getLookup = getLookup;
        })(ProcParticipantRow = Procurement.ProcParticipantRow || (Procurement.ProcParticipantRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantService;
        (function (ProcParticipantService) {
            ProcParticipantService.baseUrl = 'Procurement/ProcParticipant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcParticipantService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcParticipantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcParticipantService = Procurement.ProcParticipantService || (Procurement.ProcParticipantService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcPrForm = /** @class */ (function (_super) {
            __extends(ProcPrForm, _super);
            function ProcPrForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcPrForm.init) {
                    ProcPrForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.ImageUploadEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(ProcPrForm, [
                        'PrNo', w0,
                        'PrNoScanPrFile', w1,
                        'PrNoScanPrName', w0,
                        'InsertDate', w2,
                        'InsertBy', w0
                    ]);
                }
                return _this;
            }
            ProcPrForm.formKey = 'Procurement.ProcPr';
            return ProcPrForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcPrForm = ProcPrForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcPrRow;
        (function (ProcPrRow) {
            ProcPrRow.idProperty = 'ProcPrId';
            ProcPrRow.nameProperty = 'PrNo';
            ProcPrRow.localTextPrefix = 'Procurement.ProcPr';
        })(ProcPrRow = Procurement.ProcPrRow || (Procurement.ProcPrRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcPrService;
        (function (ProcPrService) {
            ProcPrService.baseUrl = 'Procurement/ProcPr';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcPrService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcPrService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcPrService = Procurement.ProcPrService || (Procurement.ProcPrService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcStatusForm = /** @class */ (function (_super) {
            __extends(ProcStatusForm, _super);
            function ProcStatusForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcStatusForm.init) {
                    ProcStatusForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ProcStatusForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            ProcStatusForm.formKey = 'Procurement.ProcStatus';
            return ProcStatusForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcStatusForm = ProcStatusForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcStatusRow;
        (function (ProcStatusRow) {
            ProcStatusRow.idProperty = 'ProcStatusId';
            ProcStatusRow.nameProperty = 'Name';
            ProcStatusRow.localTextPrefix = 'Procurement.ProcStatus';
            ProcStatusRow.lookupKey = 'Procurement.ProcStatus';
            function getLookup() {
                return Q.getLookup('Procurement.ProcStatus');
            }
            ProcStatusRow.getLookup = getLookup;
        })(ProcStatusRow = Procurement.ProcStatusRow || (Procurement.ProcStatusRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcStatusService;
        (function (ProcStatusService) {
            ProcStatusService.baseUrl = 'Procurement/ProcStatus';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcStatusService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcStatusService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcStatusService = Procurement.ProcStatusService || (Procurement.ProcStatusService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementForm = /** @class */ (function (_super) {
            __extends(ProcurementForm, _super);
            function ProcurementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcurementForm.init) {
                    ProcurementForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = s.DecimalEditor;
                    var w4 = _Ext.YaTidakEditor;
                    var w5 = s.IntegerEditor;
                    var w6 = s.BooleanEditor;
                    var w7 = s.DateEditor;
                    var w8 = s.TextAreaEditor;
                    var w9 = s.EnumEditor;
                    var w10 = s.ImageUploadEditor;
                    var w11 = Procurement.ProcParticipantsEditor;
                    Q.initFormType(ProcurementForm, [
                        'ProcurementTypeId', w0,
                        'Status', w0,
                        'CollectiveNumber', w1,
                        'Title', w1,
                        'Classification', w1,
                        'Qualification', w1,
                        'RequestedBy', w1,
                        'RequestorPosition', w1,
                        'ApprovedBy', w1,
                        'ApproverPosition', w1,
                        'SapBidderListCreatedBy', w1,
                        'SapBidderListCreatedDate', w2,
                        'CreatedBy', w1,
                        'CreatedDate', w2,
                        'GuaranteePercentage', w3,
                        'OfficeAddress', w0,
                        'ProcValueRangeId', w0,
                        'CommitteeTypeId', w0,
                        'PerformanceGuaranteeRequired', w4,
                        'TenderPeriod', w5,
                        'DeliveryTime', w5,
                        'DestinationId', w0,
                        'ContractTypeId', w0,
                        'CurrencyId', w0,
                        'DocSubmitMethodId', w0,
                        'AanwijzingExists', w6,
                        'AanwijzingDate', w7,
                        'AanwijzingClosingDate', w7,
                        'AanwijzingLocation', w8,
                        'AanwijzingClosingLocation', w8,
                        'AanwijzingSecretary', w1,
                        'AanwijzingSummary', w8,
                        'FieldSurveyExists', w9,
                        'FieldSurveyAddress', w8,
                        'ItbDocumentFile', w10,
                        'ItbDocumentName', w1,
                        'RksDocumentFile', w10,
                        'RksDocumentName', w1,
                        'TenderDocSubmitOpenDate', w2,
                        'TenderDocSubmitCloseDate', w2,
                        'OrderTypeId', w0,
                        'PurchDocNum', w1,
                        'RfqDate', w2,
                        'QuotationDeadline', w2,
                        'PurchGroup', w1,
                        'PrNo', w1,
                        'AuthPersonName', w1,
                        'AuthPosition', w1,
                        'HeaderText', w8,
                        'HeaderNote', w8,
                        'WorkDescription', w8,
                        'BankKey', w1,
                        'PoCover', w1,
                        'DeliveryAddress', w8,
                        'ToPTargVal', w1,
                        'YourReference', w1,
                        'OurReference', w1,
                        'SalesPerson', w1,
                        'Telephone', w1,
                        'ValidityStart', w7,
                        'ValidityEnd', w7,
                        'ItemInterval', w3,
                        'SubItemInterval', w3,
                        'Warranty', w7,
                        'Language', w1,
                        'ReviewOeRequired', w4,
                        'ProcAgreement', w9,
                        'ProcAgreementDate', w2,
                        'ProcAsRequired', w9,
                        'ProcAsApproved', w9,
                        'ProcAsApprovedDate', w7,
                        'ProcAsDesc', w1,
                        'FinalConclusionDesc', w8,
                        'WinnerNominationDate', w2,
                        'ObjectionCloseDate', w2,
                        'PoDocName', w1,
                        'TemporaryPic', w1,
                        'PoNumber', w1,
                        'PoDocFile', w10,
                        'F1SubmitDate', w2,
                        'F1SubmitBy', w1,
                        'F2SubmitDate', w2,
                        'F2SubmitBy', w1,
                        'F3SubmitDate', w2,
                        'F3SubmitBy', w1,
                        'F31SubmitDate', w2,
                        'F31SubmitBy', w1,
                        'F4SubmitDate', w2,
                        'F4SubmitBy', w1,
                        'F5SubmitDate', w2,
                        'F5SubmitBy', w1,
                        'F6SubmitDate', w2,
                        'F6SubmitBy', w1,
                        'F7SubmitDate', w2,
                        'F7SubmitBy', w1,
                        'F8SubmitDate', w2,
                        'F8SubmitBy', w1,
                        'F9SubmitDate', w2,
                        'F9SubmitBy', w1,
                        'F10SubmitDate', w2,
                        'F10SubmitBy', w1,
                        'F11SubmitDate', w2,
                        'F11SubmitBy', w1,
                        'F12SubmitDate', w2,
                        'F12SubmitBy', w1,
                        'F13SubmitDate', w2,
                        'F13SubmitBy', w1,
                        'F14SubmitDate', w2,
                        'F14SubmitBy', w1,
                        'F15SubmitDate', w2,
                        'F15SubmitBy', w1,
                        'F16SubmitDate', w2,
                        'F16SubmitBy', w1,
                        'F17SubmitDate', w2,
                        'F17SubmitBy', w1,
                        'ProcParticipant', w11
                    ]);
                }
                return _this;
            }
            ProcurementForm.formKey = 'Procurement.Procurement';
            return ProcurementForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcurementForm = ProcurementForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementMethodForm = /** @class */ (function (_super) {
            __extends(ProcurementMethodForm, _super);
            function ProcurementMethodForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcurementMethodForm.init) {
                    ProcurementMethodForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ProcurementMethodForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            ProcurementMethodForm.formKey = 'Procurement.ProcurementMethod';
            return ProcurementMethodForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcurementMethodForm = ProcurementMethodForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementMethodRow;
        (function (ProcurementMethodRow) {
            ProcurementMethodRow.idProperty = 'ProcurementMethodId';
            ProcurementMethodRow.nameProperty = 'Name';
            ProcurementMethodRow.localTextPrefix = 'Procurement.ProcurementMethod';
            ProcurementMethodRow.lookupKey = 'Procurement.ProcurementMethod';
            function getLookup() {
                return Q.getLookup('Procurement.ProcurementMethod');
            }
            ProcurementMethodRow.getLookup = getLookup;
        })(ProcurementMethodRow = Procurement.ProcurementMethodRow || (Procurement.ProcurementMethodRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementMethodService;
        (function (ProcurementMethodService) {
            ProcurementMethodService.baseUrl = 'Procurement/ProcurementMethod';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcurementMethodService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcurementMethodService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcurementMethodService = Procurement.ProcurementMethodService || (Procurement.ProcurementMethodService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementRow;
        (function (ProcurementRow) {
            ProcurementRow.idProperty = 'ProcurementId';
            ProcurementRow.nameProperty = 'Title';
            ProcurementRow.localTextPrefix = 'Procurement.Procurement';
            ProcurementRow.lookupKey = 'Procurement.Procurement';
            function getLookup() {
                return Q.getLookup('Procurement.Procurement');
            }
            ProcurementRow.getLookup = getLookup;
        })(ProcurementRow = Procurement.ProcurementRow || (Procurement.ProcurementRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementService;
        (function (ProcurementService) {
            ProcurementService.baseUrl = 'Procurement/Procurement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcurementService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcurementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcurementService = Procurement.ProcurementService || (Procurement.ProcurementService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementTypeForm = /** @class */ (function (_super) {
            __extends(ProcurementTypeForm, _super);
            function ProcurementTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcurementTypeForm.init) {
                    ProcurementTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ProcurementTypeForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            ProcurementTypeForm.formKey = 'Procurement.ProcurementType';
            return ProcurementTypeForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcurementTypeForm = ProcurementTypeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementTypeRow;
        (function (ProcurementTypeRow) {
            ProcurementTypeRow.idProperty = 'ProcurementTypeId';
            ProcurementTypeRow.nameProperty = 'Name';
            ProcurementTypeRow.localTextPrefix = 'Procurement.ProcurementType';
            ProcurementTypeRow.lookupKey = 'Procurement.ProcurementType';
            function getLookup() {
                return Q.getLookup('Procurement.ProcurementType');
            }
            ProcurementTypeRow.getLookup = getLookup;
        })(ProcurementTypeRow = Procurement.ProcurementTypeRow || (Procurement.ProcurementTypeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementTypeService;
        (function (ProcurementTypeService) {
            ProcurementTypeService.baseUrl = 'Procurement/ProcurementType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcurementTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcurementTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcurementTypeService = Procurement.ProcurementTypeService || (Procurement.ProcurementTypeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcValueRangeForm = /** @class */ (function (_super) {
            __extends(ProcValueRangeForm, _super);
            function ProcValueRangeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProcValueRangeForm.init) {
                    ProcValueRangeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ProcValueRangeForm, [
                        'Name', w0,
                        'Description', w0
                    ]);
                }
                return _this;
            }
            ProcValueRangeForm.formKey = 'Procurement.ProcValueRange';
            return ProcValueRangeForm;
        }(Serenity.PrefixedContext));
        Procurement.ProcValueRangeForm = ProcValueRangeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcValueRangeRow;
        (function (ProcValueRangeRow) {
            ProcValueRangeRow.idProperty = 'ProcValueRangeId';
            ProcValueRangeRow.nameProperty = 'Name';
            ProcValueRangeRow.localTextPrefix = 'Procurement.ProcValueRange';
            ProcValueRangeRow.lookupKey = 'Procurement.ProcValueRange';
            function getLookup() {
                return Q.getLookup('Procurement.ProcValueRange');
            }
            ProcValueRangeRow.getLookup = getLookup;
        })(ProcValueRangeRow = Procurement.ProcValueRangeRow || (Procurement.ProcValueRangeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcValueRangeService;
        (function (ProcValueRangeService) {
            ProcValueRangeService.baseUrl = 'Procurement/ProcValueRange';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProcValueRangeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProcValueRangeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProcValueRangeService = Procurement.ProcValueRangeService || (Procurement.ProcValueRangeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchaseRequisitionForm = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionForm, _super);
            function PurchaseRequisitionForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PurchaseRequisitionForm.init) {
                    PurchaseRequisitionForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.DateEditor;
                    Q.initFormType(PurchaseRequisitionForm, [
                        'PrNo', w0,
                        'BuyerId', w1,
                        'ScanPrFile', w2,
                        'ScanPrName', w0,
                        'AssignDate', w3,
                        'AssignBy', w0,
                        'CreatedDate', w3,
                        'CreatedBy', w0,
                        'Status', w0
                    ]);
                }
                return _this;
            }
            PurchaseRequisitionForm.formKey = 'Procurement.PurchaseRequisition';
            return PurchaseRequisitionForm;
        }(Serenity.PrefixedContext));
        Procurement.PurchaseRequisitionForm = PurchaseRequisitionForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchaseRequisitionRow;
        (function (PurchaseRequisitionRow) {
            PurchaseRequisitionRow.idProperty = 'PrNo';
            PurchaseRequisitionRow.nameProperty = 'PrNo';
            PurchaseRequisitionRow.localTextPrefix = 'Procurement.PurchaseRequisition';
        })(PurchaseRequisitionRow = Procurement.PurchaseRequisitionRow || (Procurement.PurchaseRequisitionRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchaseRequisitionService;
        (function (PurchaseRequisitionService) {
            PurchaseRequisitionService.baseUrl = 'Procurement/PurchaseRequisition';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'AssignBuyerBulkAction'
            ].forEach(function (x) {
                PurchaseRequisitionService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseRequisitionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PurchaseRequisitionService = Procurement.PurchaseRequisitionService || (Procurement.PurchaseRequisitionService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchDocTextRefForm = /** @class */ (function (_super) {
            __extends(PurchDocTextRefForm, _super);
            function PurchDocTextRefForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PurchDocTextRefForm.init) {
                    PurchDocTextRefForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(PurchDocTextRefForm, [
                        'Meaning', w0
                    ]);
                }
                return _this;
            }
            PurchDocTextRefForm.formKey = 'Procurement.PurchDocTextRef';
            return PurchDocTextRefForm;
        }(Serenity.PrefixedContext));
        Procurement.PurchDocTextRefForm = PurchDocTextRefForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchDocTextRefRow;
        (function (PurchDocTextRefRow) {
            PurchDocTextRefRow.idProperty = 'TextId';
            PurchDocTextRefRow.nameProperty = 'Meaning';
            PurchDocTextRefRow.localTextPrefix = 'Procurement.PurchDocTextRef';
            PurchDocTextRefRow.lookupKey = 'Procurement.PurchDocTextRef';
            function getLookup() {
                return Q.getLookup('Procurement.PurchDocTextRef');
            }
            PurchDocTextRefRow.getLookup = getLookup;
        })(PurchDocTextRefRow = Procurement.PurchDocTextRefRow || (Procurement.PurchDocTextRefRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchDocTextRefService;
        (function (PurchDocTextRefService) {
            PurchDocTextRefService.baseUrl = 'Procurement/PurchDocTextRef';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchDocTextRefService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchDocTextRefService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PurchDocTextRefService = Procurement.PurchDocTextRefService || (Procurement.PurchDocTextRefService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemForm = /** @class */ (function (_super) {
            __extends(RfqItemForm, _super);
            function RfqItemForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RfqItemForm.init) {
                    RfqItemForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DecimalEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(RfqItemForm, [
                        'ProcurementId', w0,
                        'OwnerEstimateReview', w1,
                        'OwnerEstimate', w1,
                        'PurchasingDocument', w0,
                        'Item', w0,
                        'DeletionIndicator', w0,
                        'RfqStatus', w0,
                        'LastChangedOn', w2,
                        'ShortText', w0,
                        'Material', w0,
                        'Plant', w0,
                        'StorageLocation', w0,
                        'ReqTrackingNumber', w0,
                        'MaterialGroup', w0,
                        'PurchasingInfoRec', w0,
                        'VendorMaterialNo', w0,
                        'TargetQuantity', w1,
                        'OrderQuantity', w1,
                        'OrderUnit', w0,
                        'OrderPriceUnit', w0,
                        'QuantityConversion', w1,
                        'EqualTo', w1,
                        'Denominator', w1,
                        'NetOrderPrice', w1,
                        'PriceUnit', w1,
                        'NetOrderValue', w1,
                        'GrossOrderValue', w1,
                        'QuotationDeadline', w2,
                        'GrProcessingTime', w1,
                        'TaxCode', w0,
                        'BaseUnitOfMeasure', w0,
                        'ShippingInstr', w0,
                        'OaTargetValue', w1,
                        'PriceDate', w0,
                        'PurchDocCategory', w0,
                        'EffectiveValue', w1,
                        'AffectsCommitments', w0,
                        'MaterialType', w0,
                        'SubitemCategory', w0,
                        'SubItems', w0,
                        'Subtotal1', w1,
                        'Subtotal2', w1,
                        'Subtotal3', w1,
                        'Subtotal4', w1,
                        'Subtotal5', w1
                    ]);
                }
                return _this;
            }
            RfqItemForm.formKey = 'Procurement.RfqItem';
            return RfqItemForm;
        }(Serenity.PrefixedContext));
        Procurement.RfqItemForm = RfqItemForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemRow;
        (function (RfqItemRow) {
            RfqItemRow.idProperty = 'RfqItemId';
            RfqItemRow.nameProperty = 'PurchasingDocument';
            RfqItemRow.localTextPrefix = 'Procurement.RfqItem';
            RfqItemRow.lookupKey = 'Procurement.RfqItem';
            function getLookup() {
                return Q.getLookup('Procurement.RfqItem');
            }
            RfqItemRow.getLookup = getLookup;
        })(RfqItemRow = Procurement.RfqItemRow || (Procurement.RfqItemRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemService;
        (function (RfqItemService) {
            RfqItemService.baseUrl = 'Procurement/RfqItem';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RfqItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(RfqItemService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RfqItemService = Procurement.RfqItemService || (Procurement.RfqItemService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemTextForm = /** @class */ (function (_super) {
            __extends(RfqItemTextForm, _super);
            function RfqItemTextForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RfqItemTextForm.init) {
                    RfqItemTextForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(RfqItemTextForm, [
                        'RfqItemId', w0,
                        'TextId', w0,
                        'TextForm', w0,
                        'TextLine', w0
                    ]);
                }
                return _this;
            }
            RfqItemTextForm.formKey = 'Procurement.RfqItemText';
            return RfqItemTextForm;
        }(Serenity.PrefixedContext));
        Procurement.RfqItemTextForm = RfqItemTextForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemTextRow;
        (function (RfqItemTextRow) {
            RfqItemTextRow.idProperty = 'RfqItemTextId';
            RfqItemTextRow.nameProperty = 'TextLine';
            RfqItemTextRow.localTextPrefix = 'Procurement.RfqItemText';
        })(RfqItemTextRow = Procurement.RfqItemTextRow || (Procurement.RfqItemTextRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemTextService;
        (function (RfqItemTextService) {
            RfqItemTextService.baseUrl = 'Procurement/RfqItemText';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RfqItemTextService[x] = function (r, s, o) {
                    return Q.serviceRequest(RfqItemTextService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RfqItemTextService = Procurement.RfqItemTextService || (Procurement.RfqItemTextService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqTextForm = /** @class */ (function (_super) {
            __extends(RfqTextForm, _super);
            function RfqTextForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RfqTextForm.init) {
                    RfqTextForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(RfqTextForm, [
                        'ProcurementId', w0,
                        'TextId', w1,
                        'TextForm', w0,
                        'TextLine', w0
                    ]);
                }
                return _this;
            }
            RfqTextForm.formKey = 'Procurement.RfqText';
            return RfqTextForm;
        }(Serenity.PrefixedContext));
        Procurement.RfqTextForm = RfqTextForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqTextRow;
        (function (RfqTextRow) {
            RfqTextRow.idProperty = 'RfqTextId';
            RfqTextRow.nameProperty = 'TextLine';
            RfqTextRow.localTextPrefix = 'Procurement.RfqText';
            RfqTextRow.lookupKey = 'Procurement.RfqText';
            function getLookup() {
                return Q.getLookup('Procurement.RfqText');
            }
            RfqTextRow.getLookup = getLookup;
        })(RfqTextRow = Procurement.RfqTextRow || (Procurement.RfqTextRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqTextService;
        (function (RfqTextService) {
            RfqTextService.baseUrl = 'Procurement/RfqText';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RfqTextService[x] = function (r, s, o) {
                    return Q.serviceRequest(RfqTextService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RfqTextService = Procurement.RfqTextService || (Procurement.RfqTextService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorAddressForm = /** @class */ (function (_super) {
            __extends(VendorAddressForm, _super);
            function VendorAddressForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VendorAddressForm.init) {
                    VendorAddressForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    Q.initFormType(VendorAddressForm, [
                        'VendorId', w0,
                        'AddressId', w1
                    ]);
                }
                return _this;
            }
            VendorAddressForm.formKey = 'Procurement.VendorAddress';
            return VendorAddressForm;
        }(Serenity.PrefixedContext));
        Procurement.VendorAddressForm = VendorAddressForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorAddressRow;
        (function (VendorAddressRow) {
            VendorAddressRow.idProperty = 'VendorAddressId';
            VendorAddressRow.nameProperty = 'AddressName';
            VendorAddressRow.localTextPrefix = 'Procurement.VendorAddress';
        })(VendorAddressRow = Procurement.VendorAddressRow || (Procurement.VendorAddressRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorAddressService;
        (function (VendorAddressService) {
            VendorAddressService.baseUrl = 'Procurement/VendorAddress';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorAddressService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorAddressService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VendorAddressService = Procurement.VendorAddressService || (Procurement.VendorAddressService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorForm = /** @class */ (function (_super) {
            __extends(VendorForm, _super);
            function VendorForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VendorForm.init) {
                    VendorForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.LookupEditor;
                    Q.initFormType(VendorForm, [
                        'Name', w0,
                        'Description', w0,
                        'PenaltyCode', w0,
                        'Country', w0,
                        'Name2', w0,
                        'Name3', w0,
                        'Name4', w0,
                        'City', w0,
                        'District', w0,
                        'PoBox', w0,
                        'PoBoxPcode', w0,
                        'PostalCode', w0,
                        'Region', w0,
                        'SearchTerm', w0,
                        'Street', w0,
                        'Address', w0,
                        'Title', w0,
                        'TrainStation', w0,
                        'LocationNo1', w1,
                        'LocationNo2', w1,
                        'Authorization', w0,
                        'Industry', w0,
                        'CheckDigit', w1,
                        'DataLine', w0,
                        'DmeIndicator', w0,
                        'InstructionKey', w0,
                        'CreatedOn', w2,
                        'VendorRepresentative', w3
                    ]);
                }
                return _this;
            }
            VendorForm.formKey = 'Procurement.Vendor';
            return VendorForm;
        }(Serenity.PrefixedContext));
        Procurement.VendorForm = VendorForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorLookupViewForm = /** @class */ (function (_super) {
            __extends(VendorLookupViewForm, _super);
            function VendorLookupViewForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VendorLookupViewForm.init) {
                    VendorLookupViewForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(VendorLookupViewForm, [
                        'Name', w0
                    ]);
                }
                return _this;
            }
            VendorLookupViewForm.formKey = 'Procurement.VendorLookupView';
            return VendorLookupViewForm;
        }(Serenity.PrefixedContext));
        Procurement.VendorLookupViewForm = VendorLookupViewForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorLookupViewRow;
        (function (VendorLookupViewRow) {
            VendorLookupViewRow.idProperty = 'VendorId';
            VendorLookupViewRow.nameProperty = 'Name';
            VendorLookupViewRow.localTextPrefix = 'Procurement.VendorLookupView';
            VendorLookupViewRow.lookupKey = 'Procurement.VendorLookupView';
            function getLookup() {
                return Q.getLookup('Procurement.VendorLookupView');
            }
            VendorLookupViewRow.getLookup = getLookup;
        })(VendorLookupViewRow = Procurement.VendorLookupViewRow || (Procurement.VendorLookupViewRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorLookupViewService;
        (function (VendorLookupViewService) {
            VendorLookupViewService.baseUrl = 'Procurement/VendorLookupView';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorLookupViewService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorLookupViewService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VendorLookupViewService = Procurement.VendorLookupViewService || (Procurement.VendorLookupViewService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRepresentativeForm = /** @class */ (function (_super) {
            __extends(VendorRepresentativeForm, _super);
            function VendorRepresentativeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VendorRepresentativeForm.init) {
                    VendorRepresentativeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    Q.initFormType(VendorRepresentativeForm, [
                        'VendorId', w0,
                        'UserId', w1
                    ]);
                }
                return _this;
            }
            VendorRepresentativeForm.formKey = 'Procurement.VendorRepresentative';
            return VendorRepresentativeForm;
        }(Serenity.PrefixedContext));
        Procurement.VendorRepresentativeForm = VendorRepresentativeForm;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRepresentativeRow;
        (function (VendorRepresentativeRow) {
            VendorRepresentativeRow.idProperty = 'VendorRepresentativeId';
            VendorRepresentativeRow.nameProperty = 'VendorId';
            VendorRepresentativeRow.localTextPrefix = 'Procurement.VendorRepresentative';
        })(VendorRepresentativeRow = Procurement.VendorRepresentativeRow || (Procurement.VendorRepresentativeRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRepresentativeService;
        (function (VendorRepresentativeService) {
            VendorRepresentativeService.baseUrl = 'Procurement/VendorRepresentative';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorRepresentativeService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorRepresentativeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VendorRepresentativeService = Procurement.VendorRepresentativeService || (Procurement.VendorRepresentativeService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRow;
        (function (VendorRow) {
            VendorRow.idProperty = 'VendorId';
            VendorRow.nameProperty = 'Name';
            VendorRow.localTextPrefix = 'Procurement.Vendor';
            VendorRow.lookupKey = 'Procurement.Vendor';
            function getLookup() {
                return Q.getLookup('Procurement.Vendor');
            }
            VendorRow.getLookup = getLookup;
        })(VendorRow = Procurement.VendorRow || (Procurement.VendorRow = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorService;
        (function (VendorService) {
            VendorService.baseUrl = 'Procurement/Vendor';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VendorService = Procurement.VendorService || (Procurement.VendorService = {}));
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Texts;
    (function (Texts) {
        SCMONLINE['Texts'] = Q.proxyTexts(Texts, '', { Controls: { QuickSearch: { FieldSelection: 1, Hint: 1, Placeholder: 1 } }, Db: { Administration: { EmailAccounts: { DisplayName: 1, Email: 1, EnableSsl: 1, Host: 1, Id: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, Password: 1, Port: 1, UpdateDate: 1, UpdateUserId: 1, UseDefaultCredentials: 1, Username: 1 }, Language: { Id: 1, LanguageId: 1, LanguageName: 1 }, QueuedEmail: { AttachedDownloadId: 1, AttachmentFileName: 1, AttachmentFilePath: 1, Bcc: 1, Body: 1, Cc: 1, CreatedOnUtc: 1, DontSendBeforeDateUtc: 1, EmailAccountDisplayName: 1, EmailAccountEmail: 1, EmailAccountEnableSsl: 1, EmailAccountHost: 1, EmailAccountId: 1, EmailAccountInsertDate: 1, EmailAccountInsertUserId: 1, EmailAccountIsActive: 1, EmailAccountPassword: 1, EmailAccountPort: 1, EmailAccountUpdateDate: 1, EmailAccountUpdateUserId: 1, EmailAccountUseDefaultCredentials: 1, EmailAccountUsername: 1, From: 1, FromName: 1, HasError: 1, Id: 1, PriorityId: 1, ReplyTo: 1, ReplyToName: 1, Result: 1, SentOnUtc: 1, SentTries: 1, Subject: 1, To: 1, ToName: 1 }, Role: { RoleId: 1, RoleName: 1 }, RolePermission: { PermissionKey: 1, RoleId: 1, RolePermissionId: 1, RoleRoleName: 1 }, Setting: { Description: 1, Name: 1, Value: 1 }, Translation: { CustomText: 1, EntityPlural: 1, Key: 1, OverrideConfirmation: 1, SaveChangesButton: 1, SourceLanguage: 1, SourceText: 1, TargetLanguage: 1, TargetText: 1 }, User: { DisplayName: 1, Email: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LastDirectoryUpdate: 1, Password: 1, PasswordConfirm: 1, PasswordHash: 1, PasswordSalt: 1, Source: 1, UpdateDate: 1, UpdateUserId: 1, UserId: 1, UserImage: 1, Username: 1 }, UserPermission: { Granted: 1, PermissionKey: 1, User: 1, UserId: 1, UserPermissionId: 1, Username: 1 }, UserRole: { RoleId: 1, User: 1, UserId: 1, UserRoleId: 1, Username: 1 } }, Common: { UserPreference: { Name: 1, PreferenceType: 1, UserId: 1, UserPreferenceId: 1, Value: 1 } }, Default: { ProcParticipant: { AdminDocAtk: 1, AdminDocAtkDescription: 1, AdminDocAtkName: 1, AdminDocExists: 1, CatalogAtk: 1, CatalogAtkDescription: 1, CatalogAtkName: 1, CatalogExists: 1, CatalogFile: 1, CatalogName: 1, ClarificationOffer: 1, ClarificationRequest: 1, ClarificationResult: 1, EvaluationConclusionDescription: 1, EvaluationConclusionId: 1, EvaluationConclusionName: 1, EvaluationDesc: 1, F15ParticipantSubmitBy: 1, F15ParticipantSubmitDate: 1, F5ParticipantSubmitBy: 1, F5ParticipantSubmitDate: 1, FinalBidPrice: 1, Invitation: 1, ObjectionDescription: 1, OpeningDocDesc: 1, PriceDocumentFile: 1, PriceDocumentName: 1, ProcParticipantId: 1, ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementAdministrativeExplanation: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCsms: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDistrict: 1, ProcurementDocSubmitMethodId: 1, ProcurementEvaluationClosingPriceDate: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF19SubmitBy: 1, ProcurementF19SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementMinScore: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOtherExplanation: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcRejectTender: 1, ProcurementProcRejectTenderDesc: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementProcurementTypeId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementSapBidderListCreatedBy: 1, ProcurementSapBidderListCreatedDate: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTechnicalExplanation: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1, QuoteDesc: 1, SequenceNo: 1, Source: 1, SubmitDocTnc: 1, SubmitDocTncDate: 1, SubmitObjection: 1, SupportingLetterAtk: 1, SupportingLetterAtkDescription: 1, SupportingLetterAtkName: 1, SupportingLetterExists: 1, SupportingLetterFile: 1, SupportingLetterName: 1, TechSpecDocAtk: 1, TechSpecDocAtkDescription: 1, TechSpecDocAtkName: 1, TechSpecDocExists: 1, TechSpecDocFile: 1, TechSpecDocName: 1, VendorId: 1 }, ProcParticipantItem: { BidPrice: 1, BidPriceVsOe: 1, BidPriceVsOePercentage: 1, DisclaimerDesc: 1, EvaluationConclusionItemDescription: 1, EvaluationConclusionItemId: 1, EvaluationConclusionItemName: 1, EvaluationDescription: 1, NegotiationDesc: 1, NegotiationPrice: 1, NegotiationRank: 1, NpVsOe: 1, NpVsOePercentage: 1, ProcParticipantAdminDocAtk: 1, ProcParticipantAdminDocExists: 1, ProcParticipantCatalogAtk: 1, ProcParticipantCatalogExists: 1, ProcParticipantCatalogFile: 1, ProcParticipantCatalogName: 1, ProcParticipantClarificationOffer: 1, ProcParticipantClarificationRequest: 1, ProcParticipantClarificationResult: 1, ProcParticipantEvaluationConclusionId: 1, ProcParticipantEvaluationDesc: 1, ProcParticipantF15ParticipantSubmitBy: 1, ProcParticipantF15ParticipantSubmitDate: 1, ProcParticipantF5ParticipantSubmitBy: 1, ProcParticipantF5ParticipantSubmitDate: 1, ProcParticipantFinalBidPrice: 1, ProcParticipantId: 1, ProcParticipantInvitation: 1, ProcParticipantItemId: 1, ProcParticipantObjectionDescription: 1, ProcParticipantOpeningDocDesc: 1, ProcParticipantPriceDocumentFile: 1, ProcParticipantPriceDocumentName: 1, ProcParticipantProcurementId: 1, ProcParticipantQuoteDesc: 1, ProcParticipantSequenceNo: 1, ProcParticipantSource: 1, ProcParticipantSubmitDocTnc: 1, ProcParticipantSubmitDocTncDate: 1, ProcParticipantSubmitObjection: 1, ProcParticipantSupportingLetterAtk: 1, ProcParticipantSupportingLetterExists: 1, ProcParticipantSupportingLetterFile: 1, ProcParticipantSupportingLetterName: 1, ProcParticipantTechSpecDocAtk: 1, ProcParticipantTechSpecDocExists: 1, ProcParticipantTechSpecDocFile: 1, ProcParticipantTechSpecDocName: 1, ProcParticipantVendorId: 1, ProcurementId: 1, ProposeDisclaimer: 1, Rank: 1, RfqItemId: 1 }, Procurement: { AanwijzingClosingDate: 1, AanwijzingClosingLocation: 1, AanwijzingDate: 1, AanwijzingExists: 1, AanwijzingLocation: 1, AanwijzingSecretary: 1, AanwijzingSummary: 1, AdministrativeExplanation: 1, ApprovedBy: 1, ApproverPosition: 1, AuthPersonName: 1, AuthPosition: 1, BankKey: 1, Classification: 1, ClassificationAreaCode: 1, ClassificationAssociationCode: 1, ClassificationClassificationDescr: 1, ClassificationKodeJenisJasa: 1, ClassificationVendorClass: 1, CollectiveNumber: 1, CommitteeTypeDescription: 1, CommitteeTypeId: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeId: 1, ContractTypeName: 1, CreatedBy: 1, CreatedDate: 1, Csms: 1, CurrencyDescription: 1, CurrencyId: 1, CurrencyName: 1, DeliveryAddress: 1, DeliveryTime: 1, DestinationId: 1, District: 1, DocSubmitMethodDescription: 1, DocSubmitMethodId: 1, DocSubmitMethodName: 1, EvaluationClosingPriceDate: 1, F10SubmitBy: 1, F10SubmitDate: 1, F11SubmitBy: 1, F11SubmitDate: 1, F12SubmitBy: 1, F12SubmitDate: 1, F13SubmitBy: 1, F13SubmitDate: 1, F14SubmitBy: 1, F14SubmitDate: 1, F15SubmitBy: 1, F15SubmitDate: 1, F16SubmitBy: 1, F16SubmitDate: 1, F17SubmitBy: 1, F17SubmitDate: 1, F19SubmitBy: 1, F19SubmitDate: 1, F1SubmitBy: 1, F1SubmitDate: 1, F2SubmitBy: 1, F2SubmitDate: 1, F31SubmitBy: 1, F31SubmitDate: 1, F3SubmitBy: 1, F3SubmitDate: 1, F4SubmitBy: 1, F4SubmitDate: 1, F5SubmitBy: 1, F5SubmitDate: 1, F6SubmitBy: 1, F6SubmitDate: 1, F7SubmitBy: 1, F7SubmitDate: 1, F8SubmitBy: 1, F8SubmitDate: 1, F9SubmitBy: 1, F9SubmitDate: 1, FieldSurveyAddress: 1, FieldSurveyExists: 1, FinalConclusionDesc: 1, GuaranteePercentage: 1, HeaderNote: 1, HeaderText: 1, ItbDocumentFile: 1, ItbDocumentName: 1, ItemInterval: 1, Language: 1, MinScore: 1, ObjectionCloseDate: 1, OfficeAddress: 1, OrderTypeDescription: 1, OrderTypeId: 1, OrderTypeName: 1, OtherExplanation: 1, OurReference: 1, PerformanceGuaranteeRequired: 1, PoCover: 1, PoDocFile: 1, PoDocName: 1, PoNumber: 1, PrNo: 1, ProcAgreement: 1, ProcAgreementDate: 1, ProcAsApproved: 1, ProcAsApprovedDate: 1, ProcAsDesc: 1, ProcAsRequired: 1, ProcRejectTender: 1, ProcRejectTenderDesc: 1, ProcValueRangeDescription: 1, ProcValueRangeId: 1, ProcValueRangeName: 1, ProcurementId: 1, ProcurementMethodDescription: 1, ProcurementMethodId: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeId: 1, ProcurementTypeName: 1, PurchDocNum: 1, PurchGroup: 1, Qualification: 1, QuotationDeadline: 1, RequestedBy: 1, RequestorPosition: 1, ReviewOeRequired: 1, RfqDate: 1, RksDocumentFile: 1, RksDocumentName: 1, SalesPerson: 1, SapBidderListCreatedBy: 1, SapBidderListCreatedDate: 1, Status: 1, StatusDescription: 1, StatusName: 1, StatusSequence: 1, SubItemInterval: 1, TechnicalExplanation: 1, Telephone: 1, TemporaryPic: 1, TenderDocSubmitCloseDate: 1, TenderDocSubmitOpenDate: 1, TenderPeriod: 1, Title: 1, ToPTargVal: 1, ValidityEnd: 1, ValidityStart: 1, Warranty: 1, WinnerNominationDate: 1, WorkDescription: 1, YourReference: 1 } }, Inbox: { CountingNotif: { NotifCount: 1 }, GraphBar: { label: 1, stat: 1, tgl: 1, value: 1 }, Notification: { CreateDate: 1, Description: 1, Link: 1, NotificationId: 1, ReadingDate: 1, Title: 1, UserDisplayName: 1, UserEmail: 1, UserId: 1, UserInsertDate: 1, UserInsertUserId: 1, UserIsActive: 1, UserLastDirectoryUpdate: 1, UserPasswordHash: 1, UserPasswordSalt: 1, UserSource: 1, UserUpdateDate: 1, UserUpdateUserId: 1, UserUserImage: 1, UserUsername: 1 }, ShowNotification: { CreateDate: 1, Description: 1, Link: 1, NotificationId: 1, ReadingDate: 1, Title: 1, UserId: 1 }, StoreGraphs2: { label: 1, value: 1 }, StoreGraphsFC: { buyer: 1, data: 1, label: 1 }, TryGraph: { label: 1, stat: 1, tgl: 1, value: 1 }, ViewStoredGraph: { Jumlah: 1, Name: 1 } }, Northwind: { Category: { CategoryID: 1, CategoryName: 1, Description: 1, Picture: 1 }, CategoryLang: { CategoryId: 1, CategoryName: 1, Description: 1, Id: 1, LanguageId: 1 }, Customer: { Address: 1, City: 1, CompanyName: 1, ContactName: 1, ContactTitle: 1, Country: 1, CustomerID: 1, Email: 1, Fax: 1, ID: 1, LastContactDate: 1, LastContactedBy: 1, NoteList: 1, Phone: 1, PostalCode: 1, Region: 1, Representatives: 1, SendBulletin: 1 }, CustomerCustomerDemo: { CustomerAddress: 1, CustomerCity: 1, CustomerCompanyName: 1, CustomerContactName: 1, CustomerContactTitle: 1, CustomerCountry: 1, CustomerFax: 1, CustomerID: 1, CustomerPhone: 1, CustomerPostalCode: 1, CustomerRegion: 1, CustomerTypeCustomerDesc: 1, CustomerTypeID: 1, ID: 1 }, CustomerDemographic: { CustomerDesc: 1, CustomerTypeID: 1, ID: 1 }, CustomerDetails: { Email: 1, Id: 1, LastContactDate: 1, LastContactedBy: 1, LastContactedByAddress: 1, LastContactedByBirthDate: 1, LastContactedByCity: 1, LastContactedByCountry: 1, LastContactedByExtension: 1, LastContactedByFirstName: 1, LastContactedByHireDate: 1, LastContactedByHomePhone: 1, LastContactedByLastName: 1, LastContactedByNotes: 1, LastContactedByPhoto: 1, LastContactedByPhotoPath: 1, LastContactedByPostalCode: 1, LastContactedByRegion: 1, LastContactedByReportsTo: 1, LastContactedByTitle: 1, LastContactedByTitleOfCourtesy: 1, SendBulletin: 1 }, CustomerGrossSales: { ContactName: 1, CustomerId: 1, GrossAmount: 1, ProductId: 1, ProductName: 1 }, CustomerRepresentatives: { CustomerId: 1, EmployeeId: 1, RepresentativeId: 1 }, DragDropSample: { Id: 1, ParentId: 1, Title: 1 }, Employee: { Address: 1, BirthDate: 1, City: 1, Country: 1, EmployeeID: 1, Extension: 1, FirstName: 1, FullName: 1, Gender: 1, HireDate: 1, HomePhone: 1, LastName: 1, Notes: 1, Photo: 1, PhotoPath: 1, PostalCode: 1, Region: 1, ReportsTo: 1, ReportsToAddress: 1, ReportsToBirthDate: 1, ReportsToCity: 1, ReportsToCountry: 1, ReportsToExtension: 1, ReportsToFirstName: 1, ReportsToFullName: 1, ReportsToHireDate: 1, ReportsToHomePhone: 1, ReportsToLastName: 1, ReportsToNotes: 1, ReportsToPhoto: 1, ReportsToPhotoPath: 1, ReportsToPostalCode: 1, ReportsToRegion: 1, ReportsToReportsTo: 1, ReportsToTitle: 1, ReportsToTitleOfCourtesy: 1, Title: 1, TitleOfCourtesy: 1 }, EmployeeTerritory: { EmployeeAddress: 1, EmployeeBirthDate: 1, EmployeeCity: 1, EmployeeCountry: 1, EmployeeExtension: 1, EmployeeFirstName: 1, EmployeeHireDate: 1, EmployeeHomePhone: 1, EmployeeID: 1, EmployeeLastName: 1, EmployeeNotes: 1, EmployeePhoto: 1, EmployeePhotoPath: 1, EmployeePostalCode: 1, EmployeeRegion: 1, EmployeeReportsTo: 1, EmployeeTitle: 1, EmployeeTitleOfCourtesy: 1, TerritoryID: 1, TerritoryRegionID: 1, TerritoryTerritoryDescription: 1 }, Note: { EntityId: 1, EntityType: 1, InsertDate: 1, InsertUserDisplayName: 1, InsertUserId: 1, NoteId: 1, Text: 1 }, Order: { CustomerCity: 1, CustomerCompanyName: 1, CustomerContactName: 1, CustomerContactTitle: 1, CustomerCountry: 1, CustomerFax: 1, CustomerID: 1, CustomerPhone: 1, CustomerRegion: 1, DetailList: 1, EmployeeFullName: 1, EmployeeGender: 1, EmployeeID: 1, EmployeeReportsToFullName: 1, Freight: 1, OrderDate: 1, OrderID: 1, RequiredDate: 1, ShipAddress: 1, ShipCity: 1, ShipCountry: 1, ShipName: 1, ShipPostalCode: 1, ShipRegion: 1, ShipVia: 1, ShipViaCompanyName: 1, ShipViaPhone: 1, ShippedDate: 1, ShippingState: 1 }, OrderDetail: { DetailID: 1, Discount: 1, LineTotal: 1, OrderCustomerID: 1, OrderDate: 1, OrderEmployeeID: 1, OrderID: 1, OrderShipCity: 1, OrderShipCountry: 1, OrderShipVia: 1, OrderShippedDate: 1, ProductDiscontinued: 1, ProductID: 1, ProductName: 1, ProductQuantityPerUnit: 1, ProductSupplierID: 1, ProductUnitPrice: 1, Quantity: 1, UnitPrice: 1 }, Product: { CategoryDescription: 1, CategoryID: 1, CategoryName: 1, CategoryPicture: 1, Discontinued: 1, ProductID: 1, ProductImage: 1, ProductName: 1, QuantityPerUnit: 1, ReorderLevel: 1, SupplierAddress: 1, SupplierCity: 1, SupplierCompanyName: 1, SupplierContactName: 1, SupplierContactTitle: 1, SupplierCountry: 1, SupplierFax: 1, SupplierHomePage: 1, SupplierID: 1, SupplierPhone: 1, SupplierPostalCode: 1, SupplierRegion: 1, UnitPrice: 1, UnitsInStock: 1, UnitsOnOrder: 1 }, ProductLang: { Id: 1, LanguageId: 1, ProductId: 1, ProductName: 1 }, ProductLog: { CategoryID: 1, ChangingUserId: 1, Discontinued: 1, OperationType: 1, ProductID: 1, ProductImage: 1, ProductLogID: 1, ProductName: 1, QuantityPerUnit: 1, ReorderLevel: 1, SupplierID: 1, UnitPrice: 1, UnitsInStock: 1, UnitsOnOrder: 1, ValidFrom: 1, ValidUntil: 1 }, Region: { RegionDescription: 1, RegionID: 1 }, SalesByCategory: { CategoryId: 1, CategoryName: 1, ProductName: 1, ProductSales: 1 }, Shipper: { CompanyName: 1, Phone: 1, ShipperID: 1 }, Supplier: { Address: 1, City: 1, CompanyName: 1, ContactName: 1, ContactTitle: 1, Country: 1, Fax: 1, HomePage: 1, Phone: 1, PostalCode: 1, Region: 1, SupplierID: 1 }, Territory: { ID: 1, RegionDescription: 1, RegionID: 1, TerritoryDescription: 1, TerritoryID: 1 } }, Procurement: { Address: { AddressId: 1, AddressTypeDescription: 1, AddressTypeId: 1, AddressTypeName: 1, Description: 1, Name: 1 }, AddressType: { AddressTypeId: 1, Description: 1, Name: 1 }, ApprovalAuthorityRange: { ApprovalAuthorityRangeId: 1, CurrencyDescription: 1, CurrencyId: 1, CurrencyName: 1, MaxValue: 1, MinValue: 1, ProcurementTypeDescription: 1, ProcurementTypeId: 1, ProcurementTypeName: 1, RoleCostCenter: 1, RoleId: 1, RoleRoleName: 1 }, BuyerLookupView: { ActivePr: 1, Name: 1, UserId: 1 }, CharacteristicDescription: { ChangeNumber: 1, DeletionInd: 1, Description: 1, Heading1: 1, Heading2: 1, IntCounter: 1, InternalChar: 1, Language: 1, TechStFrom: 1, ValidFrom: 1 }, CharacteristicValue: { Author: 1, ChangeNumber: 1, CharValue: 1, CharacteristicValueId: 1, ClassType: 1, Code: 1, CompType: 1, Counter: 1, DeletionInd: 1, Increment: 1, InstanceCntr: 1, IntCounter: 1, IntMeasUnit: 1, InternalChar: 1, Object: 1, ObjectClass: 1, Percentage: 1, Position: 1, ToleranceFrom: 1, ToleranceTo: 1, ValidFrom: 1, ValueFrom: 1, ValueTo: 1 }, CommitteeMember: { ApprovalBy: 1, ApprovalDate: 1, ApprovalStatus: 1, CommitteeMemberId: 1, CommitteeRoleDescription: 1, CommitteeRoleId: 1, CommitteeRoleName: 1, ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDocSubmitMethodId: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1, RoleCostCenter: 1, RoleId: 1, RoleRoleName: 1 }, CommitteeMemberMapping: { CommitteeMemberMappingId: 1, CommitteeRoleDescription: 1, CommitteeRoleId: 1, CommitteeRoleName: 1, ProcValueRangeDescription: 1, ProcValueRangeId: 1, ProcValueRangeName: 1, ProcurementTypeDescription: 1, ProcurementTypeId: 1, ProcurementTypeName: 1, RoleCostCenter: 1, RoleId: 1, RoleRoleName: 1, Sequence: 1 }, CommitteeRole: { CommitteeRoleId: 1, Description: 1, MandatoryRole: 1, Name: 1 }, CommitteeType: { CommitteeTypeId: 1, Description: 1, Name: 1 }, ContractType: { ContractTypeId: 1, Description: 1, Name: 1 }, Currency: { CurrencyId: 1, Description: 1, Name: 1 }, DocSubmitMethod: { Description: 1, DocSubmitMethodId: 1, Name: 1 }, DocumentStatus: { Description: 1, DocumentStatusId: 1, Name: 1 }, EvaluationConclusion: { Description: 1, EvaluationConclusionId: 1, Name: 1 }, EvaluationConclusionItem: { Description: 1, EvaluationConclusionItemId: 1, Name: 1 }, F11_Agreement: { Agreement: 1, CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, EmailParticipant: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, StatusDescription: 1, StatusName: 1 }, F13_StatusF10: { CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DescConclusion: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, EmailParticipant: 1, IdStatusEvaluation: 1, NameStatusEvaluation: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, StatusDescription: 1, StatusName: 1 }, F14_VendorApproval: { CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, Email: 1, NamaVendor: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, StatusDescription: 1, StatusName: 1, collectivenumber: 1, title: 1 }, F19_Approval: { ApprovalStatus: 1, CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, StatusDescription: 1, StatusName: 1, committee: 1, id: 1, locale: 1, mandatory: 1, role: 1 }, F3_EmailVendor: { CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, EmailParticipant: 1, EvaluateConclusionName: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, QuoteDesc: 1, StatusDescription: 1, StatusName: 1, Username: 1, VendorName: 1 }, F7_ListCommittee: { CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, Email: 1, EvaluateConclusionName: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, QuoteDesc: 1, StatusDescription: 1, StatusName: 1 }, F7_VendorParticipant: { CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, EmailParticipant: 1, EvaluateConclusionName: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, QuoteDesc: 1, StatusDescription: 1, StatusName: 1 }, F8_Qualification: { CommitteeTypeDescription: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeName: 1, CurrencyDescription: 1, CurrencyName: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationName: 1, DocSubmitMethodDescription: 1, DocSubmitMethodName: 1, Email: 1, NAME: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeName: 1, ProcValueRangeDescription: 1, ProcValueRangeName: 1, ProcurementMethodDescription: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeName: 1, StatusDescription: 1, StatusName: 1, Vendorid: 1, title: 1 }, OrderType: { Description: 1, Name: 1, OrderTypeId: 1 }, ProcParticipant: { AdminDocAtk: 1, AdminDocAtkDescription: 1, AdminDocAtkName: 1, AdminDocExists: 1, CatalogAtk: 1, CatalogAtkDescription: 1, CatalogAtkName: 1, CatalogExists: 1, CatalogFile: 1, CatalogName: 1, ClarificationOffer: 1, ClarificationRequest: 1, ClarificationResult: 1, DocSubmitMethodId: 1, DocSubmitMethodName: 1, EvaluationConclusionDescription: 1, EvaluationConclusionId: 1, EvaluationConclusionName: 1, EvaluationDesc: 1, F15ParticipantSubmitBy: 1, F15ParticipantSubmitDate: 1, F5ParticipantSubmitBy: 1, F5ParticipantSubmitDate: 1, FinalBidPrice: 1, Invitation: 1, ObjectionDescription: 1, ObjectionTerms: 1, OpeningDocDesc: 1, PriceDocumentFile: 1, PriceDocumentName: 1, ProcParticipantId: 1, ProcParticipantItems: 1, ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDocSubmitMethodId: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementProcurementTypeId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementSapBidderListCreatedBy: 1, ProcurementSapBidderListCreatedDate: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderDocSubmitOpenDateOnly: 1, ProcurementTenderDocSubmitOpenDay: 1, ProcurementTenderDocSubmitOpenTime: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1, Qualification: 1, QuoteDesc: 1, SequenceNo: 1, Source: 1, SubmitDocTnc: 1, SubmitDocTncDate: 1, SubmitObjection: 1, SupportingLetterAtk: 1, SupportingLetterAtkDescription: 1, SupportingLetterAtkName: 1, SupportingLetterExists: 1, SupportingLetterFile: 1, SupportingLetterName: 1, TechSpecDocAtk: 1, TechSpecDocAtkDescription: 1, TechSpecDocAtkName: 1, TechSpecDocExists: 1, TechSpecDocFile: 1, TechSpecDocName: 1, VendorId: 1, VendorName: 1, VendorPenaltyCode: 1 }, ProcParticipantItem: { BidPrice: 1, BidPriceVsOe: 1, BidPriceVsOePercentage: 1, DisclaimerDesc: 1, EvaluationConclusionItemDescription: 1, EvaluationConclusionItemId: 1, EvaluationConclusionItemName: 1, EvaluationDescription: 1, F5ParticipantSubmitBy: 1, F5ParticipantSubmitDate: 1, ItemSequence: 1, Material: 1, NegotiationDesc: 1, NegotiationPrice: 1, NegotiationRank: 1, NpVsOe: 1, NpVsOePercentage: 1, ProcParticipantAdminDocAtk: 1, ProcParticipantAdminDocExists: 1, ProcParticipantCatalogAtk: 1, ProcParticipantCatalogExists: 1, ProcParticipantCatalogFile: 1, ProcParticipantCatalogName: 1, ProcParticipantClarificationOffer: 1, ProcParticipantClarificationRequest: 1, ProcParticipantClarificationResult: 1, ProcParticipantEvaluationConclusionId: 1, ProcParticipantEvaluationDesc: 1, ProcParticipantId: 1, ProcParticipantItemId: 1, ProcParticipantOpeningDocDesc: 1, ProcParticipantPriceDocumentFile: 1, ProcParticipantPriceDocumentName: 1, ProcParticipantProcurementId: 1, ProcParticipantSequenceNo: 1, ProcParticipantSource: 1, ProcParticipantSubmitDocTnc: 1, ProcParticipantSubmitDocTncDate: 1, ProcParticipantSupportingLetterAtk: 1, ProcParticipantSupportingLetterExists: 1, ProcParticipantSupportingLetterFile: 1, ProcParticipantSupportingLetterName: 1, ProcParticipantTechSpecDocAtk: 1, ProcParticipantTechSpecDocExists: 1, ProcParticipantTechSpecDocFile: 1, ProcParticipantTechSpecDocName: 1, ProcParticipantVendorId: 1, ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDocSubmitMethodId: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementProcurementTypeId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementSapBidderListCreatedBy: 1, ProcurementSapBidderListCreatedDate: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1, ProposeDisclaimer: 1, Rank: 1, RfqItemAffectsCommitments: 1, RfqItemBaseUnitOfMeasure: 1, RfqItemDeletionIndicator: 1, RfqItemDenominator: 1, RfqItemEffectiveValue: 1, RfqItemEqualTo: 1, RfqItemGrProcessingTime: 1, RfqItemGrossOrderValue: 1, RfqItemId: 1, RfqItemLastChangedOn: 1, RfqItemMaterialGroup: 1, RfqItemMaterialType: 1, RfqItemNetOrderPrice: 1, RfqItemNetOrderValue: 1, RfqItemOaTargetValue: 1, RfqItemOrderPriceUnit: 1, RfqItemOrderQuantity: 1, RfqItemOrderUnit: 1, RfqItemOwnerEstimate: 1, RfqItemOwnerEstimateReview: 1, RfqItemPlant: 1, RfqItemPriceDate: 1, RfqItemPriceUnit: 1, RfqItemProcurementId: 1, RfqItemPurchDocCategory: 1, RfqItemPurchasingDocument: 1, RfqItemPurchasingInfoRec: 1, RfqItemQuantityConversion: 1, RfqItemQuotationDeadline: 1, RfqItemReqTrackingNumber: 1, RfqItemRfqStatus: 1, RfqItemShippingInstr: 1, RfqItemStorageLocation: 1, RfqItemSubItems: 1, RfqItemSubitemCategory: 1, RfqItemSubtotal1: 1, RfqItemSubtotal2: 1, RfqItemSubtotal3: 1, RfqItemSubtotal4: 1, RfqItemSubtotal5: 1, RfqItemTargetQuantity: 1, RfqItemTaxCode: 1, RfqItemVendorMaterialNo: 1, ShortText: 1, VendorId: 1, VendorName: 1 }, ProcPr: { InsertBy: 1, InsertDate: 1, PrNo: 1, PrNoAssignBy: 1, PrNoAssignDate: 1, PrNoBuyerId: 1, PrNoCostCenter: 1, PrNoCreatedBy: 1, PrNoCreatedDate: 1, PrNoScanPrFile: 1, PrNoScanPrName: 1, PrNoStatus: 1, ProcPrId: 1, ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDocSubmitMethodId: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementProcurementTypeId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementSapBidderListCreatedBy: 1, ProcurementSapBidderListCreatedDate: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1 }, ProcStatus: { Description: 1, Name: 1, ProcStatusId: 1 }, ProcValueRange: { Description: 1, Name: 1, ProcValueRangeId: 1 }, Procurement: { AanwijzingClosingDate: 1, AanwijzingClosingLocation: 1, AanwijzingDate: 1, AanwijzingExists: 1, AanwijzingLocation: 1, AanwijzingSecretary: 1, AanwijzingSummary: 1, AdministrativeExplanation: 1, ApprovedBy: 1, ApproverPosition: 1, AuthPersonName: 1, AuthPosition: 1, BankKey: 1, Classification: 1, ClassificationAreaCode: 1, ClassificationAssociationCode: 1, ClassificationClassificationDescr: 1, ClassificationKodeJenisJasa: 1, ClassificationVendorClass: 1, CollectiveNumber: 1, CommitteeMember: 1, CommitteeTypeDescription: 1, CommitteeTypeId: 1, CommitteeTypeName: 1, ContractTypeDescription: 1, ContractTypeId: 1, ContractTypeName: 1, CreatedBy: 1, CreatedDate: 1, Csms: 1, CurrencyDescription: 1, CurrencyId: 1, CurrencyName: 1, DeliveryAddress: 1, DeliveryTime: 1, DestinationAddressTypeId: 1, DestinationDescription: 1, DestinationId: 1, DestinationName: 1, District: 1, DocSubmitMethodDescription: 1, DocSubmitMethodId: 1, DocSubmitMethodName: 1, EvaluationClosingPriceDate: 1, F10SubmitBy: 1, F10SubmitDate: 1, F11SubmitBy: 1, F11SubmitDate: 1, F12SubmitBy: 1, F12SubmitDate: 1, F13SubmitBy: 1, F13SubmitDate: 1, F14SubmitBy: 1, F14SubmitDate: 1, F15SubmitBy: 1, F15SubmitDate: 1, F16SubmitBy: 1, F16SubmitDate: 1, F17SubmitBy: 1, F17SubmitDate: 1, F19SubmitBy: 1, F19SubmitDate: 1, F1SubmitBy: 1, F1SubmitDate: 1, F2SubmitBy: 1, F2SubmitDate: 1, F31SubmitBy: 1, F31SubmitDate: 1, F3SubmitBy: 1, F3SubmitDate: 1, F4SubmitBy: 1, F4SubmitDate: 1, F5SubmitBy: 1, F5SubmitDate: 1, F6SubmitBy: 1, F6SubmitDate: 1, F7SubmitBy: 1, F7SubmitDate: 1, F8SubmitBy: 1, F8SubmitDate: 1, F9SubmitBy: 1, F9SubmitDate: 1, FieldSurveyAddress: 1, FieldSurveyExists: 1, FinalConclusionDesc: 1, GuaranteePercentage: 1, HeaderNote: 1, HeaderText: 1, ItbDocumentFile: 1, ItbDocumentName: 1, ItemInterval: 1, Language: 1, MinScore: 1, ObjectionCloseDate: 1, OfficeAddress: 1, OfficeAddressAddressTypeId: 1, OfficeAddressDescription: 1, OfficeAddressName: 1, OrderTypeDescription: 1, OrderTypeId: 1, OrderTypeName: 1, OtherExplanation: 1, OurReference: 1, PerformanceGuaranteeRequired: 1, PoCover: 1, PoDocFile: 1, PoDocName: 1, PoNumber: 1, PrNo: 1, ProcAgreement: 1, ProcAgreementDate: 1, ProcAsApproved: 1, ProcAsApprovedDate: 1, ProcAsDesc: 1, ProcAsRequired: 1, ProcParticipant: 1, ProcParticipantItems: 1, ProcPurchaseRequests: 1, ProcRejectTender: 1, ProcRejectTenderDesc: 1, ProcValueRangeDescription: 1, ProcValueRangeId: 1, ProcValueRangeName: 1, ProcurementId: 1, ProcurementMethodDescription: 1, ProcurementMethodId: 1, ProcurementMethodName: 1, ProcurementTypeDescription: 1, ProcurementTypeId: 1, ProcurementTypeName: 1, PurchDocNum: 1, PurchGroup: 1, Qualification: 1, QuotationDeadline: 1, RequestTerms: 1, RequestedBy: 1, RequestorPosition: 1, ReviewOeRequired: 1, RfqDate: 1, RfqItems: 1, RfqTexts: 1, RksDocumentFile: 1, RksDocumentName: 1, SalesPerson: 1, SapBidderListCreatedBy: 1, SapBidderListCreatedDate: 1, Status: 1, StatusDescription: 1, StatusName: 1, StatusSequence: 1, SubItemInterval: 1, TechnicalExplanation: 1, Telephone: 1, TemporaryPic: 1, TenderDocSubmitCloseDate: 1, TenderDocSubmitOpenDate: 1, TenderPeriod: 1, Title: 1, ToPTargVal: 1, ValidityEnd: 1, ValidityStart: 1, Warranty: 1, WinnerNominationDate: 1, WorkDescription: 1, YourReference: 1 }, ProcurementMethod: { Description: 1, Name: 1, ProcurementMethodId: 1 }, ProcurementType: { Description: 1, Name: 1, ProcurementTypeId: 1 }, PurchDocTextRef: { Meaning: 1, TextId: 1 }, PurchaseRequisition: { AssignBy: 1, AssignDate: 1, BuyerDisplayName: 1, BuyerEmail: 1, BuyerId: 1, BuyerInsertDate: 1, BuyerInsertUserId: 1, BuyerIsActive: 1, BuyerLastDirectoryUpdate: 1, BuyerPasswordHash: 1, BuyerPasswordSalt: 1, BuyerSource: 1, BuyerUpdateDate: 1, BuyerUpdateUserId: 1, BuyerUserImage: 1, BuyerUsername: 1, CostCenter: 1, CreatedBy: 1, CreatedDate: 1, PrNo: 1, ProcPrItems: 1, ScanPrFile: 1, ScanPrName: 1, Status: 1 }, RfqItem: { AffectsCommitments: 1, BaseUnitOfMeasure: 1, DeletionIndicator: 1, Denominator: 1, EffectiveValue: 1, EqualTo: 1, GrProcessingTime: 1, GrossOrderValue: 1, Item: 1, LastChangedOn: 1, Material: 1, MaterialGroup: 1, MaterialType: 1, NetOrderPrice: 1, NetOrderValue: 1, OaTargetValue: 1, OrderPriceUnit: 1, OrderQuantity: 1, OrderUnit: 1, OwnerEstimate: 1, OwnerEstimateReview: 1, Plant: 1, PriceDate: 1, PriceUnit: 1, ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementBidderListCreatedDate: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDocSubmitMethodId: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementProcurementTypeId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementSapBidderListCreatedBy: 1, ProcurementSapBidderListCreatedDate: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1, PurchDocCategory: 1, PurchasingDocument: 1, PurchasingInfoRec: 1, QuantityConversion: 1, QuotationDeadline: 1, ReqTrackingNumber: 1, RfqItemId: 1, RfqStatus: 1, ShippingInstr: 1, ShortText: 1, StorageLocation: 1, SubItems: 1, SubitemCategory: 1, Subtotal1: 1, Subtotal2: 1, Subtotal3: 1, Subtotal4: 1, Subtotal5: 1, TargetQuantity: 1, TaxCode: 1, VendorMaterialNo: 1 }, RfqItemText: { RfqItemAffectsCommitments: 1, RfqItemBaseUnitOfMeasure: 1, RfqItemDeletionIndicator: 1, RfqItemDenominator: 1, RfqItemEffectiveValue: 1, RfqItemEqualTo: 1, RfqItemGrProcessingTime: 1, RfqItemGrossOrderValue: 1, RfqItemId: 1, RfqItemItem: 1, RfqItemLastChangedOn: 1, RfqItemMaterial: 1, RfqItemMaterialGroup: 1, RfqItemMaterialType: 1, RfqItemNetOrderPrice: 1, RfqItemNetOrderValue: 1, RfqItemOaTargetValue: 1, RfqItemOrderPriceUnit: 1, RfqItemOrderQuantity: 1, RfqItemOrderUnit: 1, RfqItemOwnerEstimate: 1, RfqItemOwnerEstimateReview: 1, RfqItemPlant: 1, RfqItemPriceDate: 1, RfqItemPriceUnit: 1, RfqItemProcurementId: 1, RfqItemPurchDocCategory: 1, RfqItemPurchasingDocument: 1, RfqItemPurchasingInfoRec: 1, RfqItemQuantityConversion: 1, RfqItemQuotationDeadline: 1, RfqItemReqTrackingNumber: 1, RfqItemRfqStatus: 1, RfqItemShippingInstr: 1, RfqItemShortText: 1, RfqItemStorageLocation: 1, RfqItemSubItems: 1, RfqItemSubitemCategory: 1, RfqItemSubtotal1: 1, RfqItemSubtotal2: 1, RfqItemSubtotal3: 1, RfqItemSubtotal4: 1, RfqItemSubtotal5: 1, RfqItemTargetQuantity: 1, RfqItemTaxCode: 1, RfqItemTextId: 1, RfqItemVendorMaterialNo: 1, TextForm: 1, TextId: 1, TextLine: 1 }, RfqText: { ProcurementAanwijzingClosingDate: 1, ProcurementAanwijzingClosingLocation: 1, ProcurementAanwijzingDate: 1, ProcurementAanwijzingExists: 1, ProcurementAanwijzingLocation: 1, ProcurementAanwijzingSecretary: 1, ProcurementAanwijzingSummary: 1, ProcurementApprovedBy: 1, ProcurementApproverPosition: 1, ProcurementAuthPersonName: 1, ProcurementAuthPosition: 1, ProcurementBankKey: 1, ProcurementClassification: 1, ProcurementCollectiveNumber: 1, ProcurementCommitteeTypeId: 1, ProcurementContractTypeId: 1, ProcurementCreatedBy: 1, ProcurementCreatedDate: 1, ProcurementCurrencyId: 1, ProcurementDeliveryAddress: 1, ProcurementDeliveryTime: 1, ProcurementDestinationId: 1, ProcurementDocSubmitMethodId: 1, ProcurementF10SubmitBy: 1, ProcurementF10SubmitDate: 1, ProcurementF11SubmitBy: 1, ProcurementF11SubmitDate: 1, ProcurementF12SubmitBy: 1, ProcurementF12SubmitDate: 1, ProcurementF13SubmitBy: 1, ProcurementF13SubmitDate: 1, ProcurementF14SubmitBy: 1, ProcurementF14SubmitDate: 1, ProcurementF15SubmitBy: 1, ProcurementF15SubmitDate: 1, ProcurementF16SubmitBy: 1, ProcurementF16SubmitDate: 1, ProcurementF17SubmitBy: 1, ProcurementF17SubmitDate: 1, ProcurementF1SubmitBy: 1, ProcurementF1SubmitDate: 1, ProcurementF2SubmitBy: 1, ProcurementF2SubmitDate: 1, ProcurementF31SubmitBy: 1, ProcurementF31SubmitDate: 1, ProcurementF3SubmitBy: 1, ProcurementF3SubmitDate: 1, ProcurementF4SubmitBy: 1, ProcurementF4SubmitDate: 1, ProcurementF5SubmitBy: 1, ProcurementF5SubmitDate: 1, ProcurementF6SubmitBy: 1, ProcurementF6SubmitDate: 1, ProcurementF7SubmitBy: 1, ProcurementF7SubmitDate: 1, ProcurementF8SubmitBy: 1, ProcurementF8SubmitDate: 1, ProcurementF9SubmitBy: 1, ProcurementF9SubmitDate: 1, ProcurementFieldSurveyAddress: 1, ProcurementFieldSurveyExists: 1, ProcurementFinalConclusionDesc: 1, ProcurementGuaranteePercentage: 1, ProcurementHeaderNote: 1, ProcurementHeaderText: 1, ProcurementId: 1, ProcurementItbDocumentFile: 1, ProcurementItbDocumentName: 1, ProcurementItemInterval: 1, ProcurementLanguage: 1, ProcurementObjectionCloseDate: 1, ProcurementOfficeAddress: 1, ProcurementOrderTypeId: 1, ProcurementOurReference: 1, ProcurementPerformanceGuaranteeRequired: 1, ProcurementPoCover: 1, ProcurementPoDocFile: 1, ProcurementPoDocName: 1, ProcurementPoNumber: 1, ProcurementPrNo: 1, ProcurementProcAgreement: 1, ProcurementProcAgreementDate: 1, ProcurementProcAsApproved: 1, ProcurementProcAsApprovedDate: 1, ProcurementProcAsDesc: 1, ProcurementProcAsRequired: 1, ProcurementProcValueRangeId: 1, ProcurementProcurementMethodId: 1, ProcurementProcurementTypeId: 1, ProcurementPurchDocNum: 1, ProcurementPurchGroup: 1, ProcurementQualification: 1, ProcurementQuotationDeadline: 1, ProcurementRequestedBy: 1, ProcurementRequestorPosition: 1, ProcurementReviewOeRequired: 1, ProcurementRfqDate: 1, ProcurementRksDocumentFile: 1, ProcurementRksDocumentName: 1, ProcurementSalesPerson: 1, ProcurementSapBidderListCreatedBy: 1, ProcurementSapBidderListCreatedDate: 1, ProcurementStatus: 1, ProcurementSubItemInterval: 1, ProcurementTelephone: 1, ProcurementTemporaryPic: 1, ProcurementTenderDocSubmitCloseDate: 1, ProcurementTenderDocSubmitOpenDate: 1, ProcurementTenderPeriod: 1, ProcurementTitle: 1, ProcurementToPTargVal: 1, ProcurementValidityEnd: 1, ProcurementValidityStart: 1, ProcurementWarranty: 1, ProcurementWinnerNominationDate: 1, ProcurementWorkDescription: 1, ProcurementYourReference: 1, RfqTextId: 1, TextForm: 1, TextId: 1, TextLine: 1, TextMeaning: 1 }, Vendor: { Address: 1, Authorization: 1, CheckDigit: 1, City: 1, Country: 1, CreatedOn: 1, DataLine: 1, Description: 1, District: 1, DmeIndicator: 1, Industry: 1, InstructionKey: 1, LocationNo1: 1, LocationNo2: 1, Name: 1, Name2: 1, Name3: 1, Name4: 1, PenaltyCode: 1, PoBox: 1, PoBoxPcode: 1, PostalCode: 1, Qualification: 1, Region: 1, SearchTerm: 1, Street: 1, Title: 1, TrainStation: 1, Vendor: 1, VendorId: 1, VendorRepresentative: 1 }, VendorAddress: { AddressAddressTypeId: 1, AddressDescription: 1, AddressId: 1, AddressName: 1, VendorAddressId: 1, VendorId: 1 }, VendorLookupView: { Name: 1, VendorId: 1 }, VendorRepresentative: { UserDisplayName: 1, UserEmail: 1, UserId: 1, UserInsertDate: 1, UserInsertUserId: 1, UserIsActive: 1, UserLastDirectoryUpdate: 1, UserPasswordHash: 1, UserPasswordSalt: 1, UserSource: 1, UserUpdateDate: 1, UserUpdateUserId: 1, UserUserImage: 1, UserUsername: 1, VendorId: 1, VendorRepresentativeId: 1 } }, _Ext: { AuditLog: { ActionDate: 1, ActionType: 1, EntityId: 1, EntityTableName: 1, Id: 1, IpAddress: 1, NewEntity: 1, OldEntity: 1, Roles: 1, SessionId: 1, TotalCount: 1, UserId: 1, Username: 1, VersionNo: 1 } } }, Forms: { Membership: { ChangePassword: { FormTitle: 1, SubmitButton: 1, Success: 1 }, ForgotPassword: { BackToLogin: 1, FormInfo: 1, FormTitle: 1, SubmitButton: 1, Success: 1 }, Login: { FacebookButton: 1, ForgotPassword: 1, FormTitle: 1, GoogleButton: 1, OR: 1, RememberMe: 1, SignInButton: 1, SignUpButton: 1 }, ResetPassword: { BackToLogin: 1, EmailSubject: 1, FormTitle: 1, SubmitButton: 1, Success: 1 }, SignUp: { AcceptTerms: 1, ActivateEmailSubject: 1, ActivationCompleteMessage: 1, BackToLogin: 1, ConfirmEmail: 1, ConfirmPassword: 1, DisplayName: 1, Email: 1, FormInfo: 1, FormTitle: 1, Password: 1, SubmitButton: 1, Success: 1 } } }, Site: { AccessDenied: { ClickToChangeUser: 1, ClickToLogin: 1, LackPermissions: 1, NotLoggedIn: 1, PageTitle: 1 }, BasicProgressDialog: { CancelTitle: 1, PleaseWait: 1 }, BulkServiceAction: { AllHadErrorsFormat: 1, AllSuccessFormat: 1, ConfirmationFormat: 1, ErrorCount: 1, NothingToProcess: 1, SomeHadErrorsFormat: 1, SuccessCount: 1 }, Dashboard: { ContentDescription: 1 }, Layout: { FooterCopyright: 1, FooterInfo: 1, FooterRights: 1, GeneralSettings: 1, Language: 1, Theme: 1, ThemeBlack: 1, ThemeBlackLight: 1, ThemeBlue: 1, ThemeBlueLight: 1, ThemeGreen: 1, ThemeGreenLight: 1, ThemePurple: 1, ThemePurpleLight: 1, ThemeRed: 1, ThemeRedLight: 1, ThemeYellow: 1, ThemeYellowLight: 1 }, RolePermissionDialog: { DialogTitle: 1, EditButton: 1, SaveSuccess: 1 }, UserDialog: { EditPermissionsButton: 1, EditRolesButton: 1 }, UserPermissionDialog: { DialogTitle: 1, Grant: 1, Permission: 1, Revoke: 1, SaveSuccess: 1 }, UserRoleDialog: { DialogTitle: 1, SaveSuccess: 1 }, ValidationError: { Title: 1 } }, Validation: { AuthenticationError: 1, CantFindUserWithEmail: 1, CurrentPasswordMismatch: 1, DeleteForeignKeyError: 1, EmailConfirm: 1, EmailInUse: 1, InvalidActivateToken: 1, InvalidResetToken: 1, MinRequiredPasswordLength: 1, NorthwindPhone: 1, NorthwindPhoneMultiple: 1, SavePrimaryKeyError: 1 } });
    })(Texts = SCMONLINE.Texts || (SCMONLINE.Texts = {}));
})(SCMONLINE || (SCMONLINE = {}));
var _Ext;
(function (_Ext) {
    var AdaTidakAda;
    (function (AdaTidakAda) {
        AdaTidakAda[AdaTidakAda["TidakAda"] = 0] = "TidakAda";
        AdaTidakAda[AdaTidakAda["Ada"] = 1] = "Ada";
    })(AdaTidakAda = _Ext.AdaTidakAda || (_Ext.AdaTidakAda = {}));
    Serenity.Decorators.registerEnumType(AdaTidakAda, '_Ext.AdaTidakAda', 'AdaTidakAda');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ApproveTidakApprove;
    (function (ApproveTidakApprove) {
        ApproveTidakApprove[ApproveTidakApprove["TidakApprove"] = 0] = "TidakApprove";
        ApproveTidakApprove[ApproveTidakApprove["Approve"] = 1] = "Approve";
    })(ApproveTidakApprove = _Ext.ApproveTidakApprove || (_Ext.ApproveTidakApprove = {}));
    Serenity.Decorators.registerEnumType(ApproveTidakApprove, '_Ext.ApproveTidakApprove', 'ApproveTidakApprove');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditActionType;
    (function (AuditActionType) {
        AuditActionType[AuditActionType["Insert"] = 1] = "Insert";
        AuditActionType[AuditActionType["Update"] = 2] = "Update";
        AuditActionType[AuditActionType["Delete"] = 3] = "Delete";
        AuditActionType[AuditActionType["Login"] = 4] = "Login";
    })(AuditActionType = _Ext.AuditActionType || (_Ext.AuditActionType = {}));
    Serenity.Decorators.registerEnumType(AuditActionType, '_Ext.AuditActionType', 'Enum.Audit.AuditActionType');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditLogForm = /** @class */ (function (_super) {
        __extends(AuditLogForm, _super);
        function AuditLogForm(prefix) {
            var _this = _super.call(this, prefix) || this;
            if (!AuditLogForm.init) {
                AuditLogForm.init = true;
                var s = Serenity;
                var w0 = s.StringEditor;
                var w1 = s.IntegerEditor;
                var w2 = s.LookupEditor;
                var w3 = s.EnumEditor;
                var w4 = s.DateTimeEditor;
                var w5 = _Ext.StaticTextBlock;
                Q.initFormType(AuditLogForm, [
                    'EntityTableName', w0,
                    'VersionNo', w1,
                    'UserId', w2,
                    'Username', w0,
                    'Roles', w0,
                    'TotalCount', w1,
                    'ActionType', w3,
                    'ActionDate', w4,
                    'EntityId', w1,
                    'OldEntity', w0,
                    'NewEntity', w0,
                    'Differences', w5,
                    'IpAddress', w0,
                    'SessionId', w0
                ]);
            }
            return _this;
        }
        AuditLogForm.formKey = '_Ext.AuditLog';
        return AuditLogForm;
    }(Serenity.PrefixedContext));
    _Ext.AuditLogForm = AuditLogForm;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditLogRow;
    (function (AuditLogRow) {
        AuditLogRow.idProperty = 'Id';
        AuditLogRow.nameProperty = 'EntityTableName';
        AuditLogRow.localTextPrefix = '_Ext.AuditLog';
    })(AuditLogRow = _Ext.AuditLogRow || (_Ext.AuditLogRow = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditLogService;
    (function (AuditLogService) {
        AuditLogService.baseUrl = '_Ext/AuditLog';
        [
            'Create',
            'Update',
            'Delete',
            'Retrieve',
            'List'
        ].forEach(function (x) {
            AuditLogService[x] = function (r, s, o) {
                return Q.serviceRequest(AuditLogService.baseUrl + '/' + x, r, s, o);
            };
        });
    })(AuditLogService = _Ext.AuditLogService || (_Ext.AuditLogService = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditLogViewerService;
    (function (AuditLogViewerService) {
        AuditLogViewerService.baseUrl = 'AuditLogViewer';
        [
            'List'
        ].forEach(function (x) {
            AuditLogViewerService[x] = function (r, s, o) {
                return Q.serviceRequest(AuditLogViewerService.baseUrl + '/' + x, r, s, o);
            };
        });
    })(AuditLogViewerService = _Ext.AuditLogViewerService || (_Ext.AuditLogViewerService = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var DevTools;
    (function (DevTools) {
        var SergenService;
        (function (SergenService) {
            SergenService.baseUrl = 'DevTools/Sergen';
            [
                'ListConnections',
                'ListTables',
                'Generate'
            ].forEach(function (x) {
                SergenService[x] = function (r, s, o) {
                    return Q.serviceRequest(SergenService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(SergenService = DevTools.SergenService || (DevTools.SergenService = {}));
    })(DevTools = _Ext.DevTools || (_Ext.DevTools = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var LelangGagalLelang;
    (function (LelangGagalLelang) {
        LelangGagalLelang[LelangGagalLelang["GagalLelang"] = 0] = "GagalLelang";
        LelangGagalLelang[LelangGagalLelang["Lelang"] = 1] = "Lelang";
    })(LelangGagalLelang = _Ext.LelangGagalLelang || (_Ext.LelangGagalLelang = {}));
    Serenity.Decorators.registerEnumType(LelangGagalLelang, '_Ext.LelangGagalLelang', 'LelangGagalLelang');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var Months;
    (function (Months) {
        Months[Months["January"] = 0] = "January";
        Months[Months["February"] = 1] = "February";
        Months[Months["March"] = 2] = "March";
        Months[Months["April"] = 3] = "April";
        Months[Months["May"] = 4] = "May";
        Months[Months["June"] = 5] = "June";
        Months[Months["July"] = 6] = "July";
        Months[Months["August"] = 7] = "August";
        Months[Months["September"] = 8] = "September";
        Months[Months["October"] = 9] = "October";
        Months[Months["November"] = 10] = "November";
        Months[Months["December"] = 11] = "December";
    })(Months = _Ext.Months || (_Ext.Months = {}));
    Serenity.Decorators.registerEnumType(Months, '_Ext.Months', 'Months');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ReplaceRowForm = /** @class */ (function (_super) {
        __extends(ReplaceRowForm, _super);
        function ReplaceRowForm(prefix) {
            var _this = _super.call(this, prefix) || this;
            if (!ReplaceRowForm.init) {
                ReplaceRowForm.init = true;
                var s = Serenity;
                var w0 = s.StringEditor;
                var w1 = _Ext.EmptyLookupEditor;
                Q.initFormType(ReplaceRowForm, [
                    'DeletedEntityName', w0,
                    'ReplaceWithEntityId', w1
                ]);
            }
            return _this;
        }
        ReplaceRowForm.formKey = '_Ext.ReplaceRow';
        return ReplaceRowForm;
    }(Serenity.PrefixedContext));
    _Ext.ReplaceRowForm = ReplaceRowForm;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ReplaceRowService;
    (function (ReplaceRowService) {
        ReplaceRowService.baseUrl = 'ReplaceRow';
        [
            'Replace'
        ].forEach(function (x) {
            ReplaceRowService[x] = function (r, s, o) {
                return Q.serviceRequest(ReplaceRowService.baseUrl + '/' + x, r, s, o);
            };
        });
    })(ReplaceRowService = _Ext.ReplaceRowService || (_Ext.ReplaceRowService = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var Reports;
    (function (Reports) {
        var CommonReportService;
        (function (CommonReportService) {
            CommonReportService.baseUrl = 'Reports/CommonReport';
        })(CommonReportService = Reports.CommonReportService || (Reports.CommonReportService = {}));
    })(Reports = _Ext.Reports || (_Ext.Reports = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var TimeUoM;
    (function (TimeUoM) {
        TimeUoM[TimeUoM["Hour"] = 1] = "Hour";
        TimeUoM[TimeUoM["Day"] = 2] = "Day";
        TimeUoM[TimeUoM["Week"] = 3] = "Week";
        TimeUoM[TimeUoM["Month"] = 4] = "Month";
        TimeUoM[TimeUoM["CalenderMonth"] = 5] = "CalenderMonth";
        TimeUoM[TimeUoM["Year"] = 6] = "Year";
    })(TimeUoM = _Ext.TimeUoM || (_Ext.TimeUoM = {}));
    Serenity.Decorators.registerEnumType(TimeUoM, '_Ext.TimeUoM', 'TimeUoM');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var UndangTidakUndang;
    (function (UndangTidakUndang) {
        UndangTidakUndang[UndangTidakUndang["TidakUndang"] = 0] = "TidakUndang";
        UndangTidakUndang[UndangTidakUndang["Undang"] = 1] = "Undang";
    })(UndangTidakUndang = _Ext.UndangTidakUndang || (_Ext.UndangTidakUndang = {}));
    Serenity.Decorators.registerEnumType(UndangTidakUndang, '_Ext.UndangTidakUndang', 'UndangTidakUndang');
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var YaTidak;
    (function (YaTidak) {
        YaTidak[YaTidak["Tidak"] = 0] = "Tidak";
        YaTidak[YaTidak["Ya"] = 1] = "Ya";
    })(YaTidak = _Ext.YaTidak || (_Ext.YaTidak = {}));
    Serenity.Decorators.registerEnumType(YaTidak, '_Ext.YaTidak', 'YaTidak');
})(_Ext || (_Ext = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var LanguageList;
    (function (LanguageList) {
        function getValue() {
            var result = [];
            for (var _i = 0, _a = SCMONLINE.Administration.LanguageRow.getLookup().items; _i < _a.length; _i++) {
                var k = _a[_i];
                if (k.LanguageId !== 'en') {
                    result.push([k.Id.toString(), k.LanguageName]);
                }
            }
            return result;
        }
        LanguageList.getValue = getValue;
    })(LanguageList = SCMONLINE.LanguageList || (SCMONLINE.LanguageList = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../Common/Helpers/LanguageList.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var ScriptInitialization;
    (function (ScriptInitialization) {
        Q.Config.responsiveDialogs = true;
        Q.Config.rootNamespaces.push('SCMONLINE');
        Serenity.EntityDialog.defaultLanguageList = SCMONLINE.LanguageList.getValue;
        if ($.fn['colorbox']) {
            $.fn['colorbox'].settings.maxWidth = "95%";
            $.fn['colorbox'].settings.maxHeight = "95%";
        }
        window.onerror = Q.ErrorHandling.runtimeErrorHandler;
    })(ScriptInitialization = SCMONLINE.ScriptInitialization || (SCMONLINE.ScriptInitialization = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var EmailAccountsDialog = /** @class */ (function (_super) {
            __extends(EmailAccountsDialog, _super);
            function EmailAccountsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.EmailAccountsForm(_this.idPrefix);
                return _this;
            }
            EmailAccountsDialog.prototype.getFormKey = function () { return Administration.EmailAccountsForm.formKey; };
            EmailAccountsDialog.prototype.getIdProperty = function () { return Administration.EmailAccountsRow.idProperty; };
            EmailAccountsDialog.prototype.getLocalTextPrefix = function () { return Administration.EmailAccountsRow.localTextPrefix; };
            EmailAccountsDialog.prototype.getNameProperty = function () { return Administration.EmailAccountsRow.nameProperty; };
            EmailAccountsDialog.prototype.getService = function () { return Administration.EmailAccountsService.baseUrl; };
            EmailAccountsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], EmailAccountsDialog);
            return EmailAccountsDialog;
        }(_Ext.DialogBase));
        Administration.EmailAccountsDialog = EmailAccountsDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var EmailAccountsGrid = /** @class */ (function (_super) {
            __extends(EmailAccountsGrid, _super);
            function EmailAccountsGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            EmailAccountsGrid.prototype.getColumnsKey = function () { return 'Administration.EmailAccounts'; };
            EmailAccountsGrid.prototype.getDialogType = function () { return Administration.EmailAccountsDialog; };
            EmailAccountsGrid.prototype.getIdProperty = function () { return Administration.EmailAccountsRow.idProperty; };
            EmailAccountsGrid.prototype.getLocalTextPrefix = function () { return Administration.EmailAccountsRow.localTextPrefix; };
            EmailAccountsGrid.prototype.getService = function () { return Administration.EmailAccountsService.baseUrl; };
            EmailAccountsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], EmailAccountsGrid);
            return EmailAccountsGrid;
        }(_Ext.GridBase));
        Administration.EmailAccountsGrid = EmailAccountsGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var LanguageDialog = /** @class */ (function (_super) {
            __extends(LanguageDialog, _super);
            function LanguageDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LanguageForm(_this.idPrefix);
                return _this;
            }
            LanguageDialog.prototype.getFormKey = function () { return Administration.LanguageForm.formKey; };
            LanguageDialog.prototype.getIdProperty = function () { return Administration.LanguageRow.idProperty; };
            LanguageDialog.prototype.getLocalTextPrefix = function () { return Administration.LanguageRow.localTextPrefix; };
            LanguageDialog.prototype.getNameProperty = function () { return Administration.LanguageRow.nameProperty; };
            LanguageDialog.prototype.getService = function () { return Administration.LanguageService.baseUrl; };
            LanguageDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LanguageDialog);
            return LanguageDialog;
        }(Serenity.EntityDialog));
        Administration.LanguageDialog = LanguageDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var LanguageGrid = /** @class */ (function (_super) {
            __extends(LanguageGrid, _super);
            function LanguageGrid(container) {
                return _super.call(this, container) || this;
            }
            LanguageGrid.prototype.getColumnsKey = function () { return "Administration.Language"; };
            LanguageGrid.prototype.getDialogType = function () { return Administration.LanguageDialog; };
            LanguageGrid.prototype.getIdProperty = function () { return Administration.LanguageRow.idProperty; };
            LanguageGrid.prototype.getLocalTextPrefix = function () { return Administration.LanguageRow.localTextPrefix; };
            LanguageGrid.prototype.getService = function () { return Administration.LanguageService.baseUrl; };
            LanguageGrid.prototype.getDefaultSortBy = function () {
                return ["LanguageName" /* LanguageName */];
            };
            LanguageGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LanguageGrid);
            return LanguageGrid;
        }(Serenity.EntityGrid));
        Administration.LanguageGrid = LanguageGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var QueuedEmailDialog = /** @class */ (function (_super) {
            __extends(QueuedEmailDialog, _super);
            function QueuedEmailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.QueuedEmailForm(_this.idPrefix);
                return _this;
            }
            QueuedEmailDialog.prototype.getFormKey = function () { return Administration.QueuedEmailForm.formKey; };
            QueuedEmailDialog.prototype.getIdProperty = function () { return Administration.QueuedEmailRow.idProperty; };
            QueuedEmailDialog.prototype.getLocalTextPrefix = function () { return Administration.QueuedEmailRow.localTextPrefix; };
            QueuedEmailDialog.prototype.getNameProperty = function () { return Administration.QueuedEmailRow.nameProperty; };
            QueuedEmailDialog.prototype.getService = function () { return Administration.QueuedEmailService.baseUrl; };
            QueuedEmailDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Kirim Ulang'),
                    cssClass: 'submit-button',
                    icon: 'fa-retweet text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to Repeat Send this Email?', function () {
                            Administration.QueuedEmailService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Mail has been successfully Sent.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                return buttons;
            };
            QueuedEmailDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], QueuedEmailDialog);
            return QueuedEmailDialog;
        }(_Ext.DialogBase));
        Administration.QueuedEmailDialog = QueuedEmailDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var QueuedEmailGrid = /** @class */ (function (_super) {
            __extends(QueuedEmailGrid, _super);
            function QueuedEmailGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            QueuedEmailGrid.prototype.getColumnsKey = function () { return 'Administration.QueuedEmail'; };
            QueuedEmailGrid.prototype.getDialogType = function () { return Administration.QueuedEmailDialog; };
            QueuedEmailGrid.prototype.getIdProperty = function () { return Administration.QueuedEmailRow.idProperty; };
            QueuedEmailGrid.prototype.getLocalTextPrefix = function () { return Administration.QueuedEmailRow.localTextPrefix; };
            QueuedEmailGrid.prototype.getService = function () { return Administration.QueuedEmailService.baseUrl; };
            QueuedEmailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], QueuedEmailGrid);
            return QueuedEmailGrid;
        }(_Ext.GridBase));
        Administration.QueuedEmailGrid = QueuedEmailGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RoleDialog = /** @class */ (function (_super) {
            __extends(RoleDialog, _super);
            function RoleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.RoleForm(_this.idPrefix);
                return _this;
            }
            RoleDialog.prototype.getFormKey = function () { return Administration.RoleForm.formKey; };
            RoleDialog.prototype.getIdProperty = function () { return Administration.RoleRow.idProperty; };
            RoleDialog.prototype.getLocalTextPrefix = function () { return Administration.RoleRow.localTextPrefix; };
            RoleDialog.prototype.getNameProperty = function () { return Administration.RoleRow.nameProperty; };
            RoleDialog.prototype.getService = function () { return Administration.RoleService.baseUrl; };
            RoleDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.RolePermissionDialog.EditButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'fa-lock text-green',
                    onClick: function () {
                        new Administration.RolePermissionDialog({
                            roleID: _this.entity.RoleId,
                            title: _this.entity.RoleName
                        }).dialogOpen();
                    }
                });
                return buttons;
            };
            RoleDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            RoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RoleDialog);
            return RoleDialog;
        }(Serenity.EntityDialog));
        Administration.RoleDialog = RoleDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RoleGrid = /** @class */ (function (_super) {
            __extends(RoleGrid, _super);
            function RoleGrid(container) {
                return _super.call(this, container) || this;
            }
            RoleGrid.prototype.getColumnsKey = function () { return "Administration.Role"; };
            RoleGrid.prototype.getDialogType = function () { return Administration.RoleDialog; };
            RoleGrid.prototype.getIdProperty = function () { return Administration.RoleRow.idProperty; };
            RoleGrid.prototype.getLocalTextPrefix = function () { return Administration.RoleRow.localTextPrefix; };
            RoleGrid.prototype.getService = function () { return Administration.RoleService.baseUrl; };
            RoleGrid.prototype.getDefaultSortBy = function () {
                return ["RoleName" /* RoleName */];
            };
            RoleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RoleGrid);
            return RoleGrid;
        }(Serenity.EntityGrid));
        Administration.RoleGrid = RoleGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RolePermissionDialog = /** @class */ (function (_super) {
            __extends(RolePermissionDialog, _super);
            function RolePermissionDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.PermissionCheckEditor(_this.byId('Permissions'), {
                    showRevoke: false
                });
                Administration.RolePermissionService.List({
                    RoleID: _this.options.roleID,
                    Module: null,
                    Submodule: null
                }, function (response) {
                    _this.permissions.value = response.Entities.map(function (x) { return ({ PermissionKey: x }); });
                });
                _this.permissions.implicitPermissions = Q.getRemoteData('Administration.ImplicitPermissions');
                return _this;
            }
            RolePermissionDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text('Dialogs.OkButton'),
                        click: function (e) {
                            Administration.RolePermissionService.Update({
                                RoleID: _this.options.roleID,
                                Permissions: _this.permissions.value.map(function (x) { return x.PermissionKey; }),
                                Module: null,
                                Submodule: null
                            }, function (response) {
                                _this.dialogClose();
                                window.setTimeout(function () { return Q.notifySuccess(Q.text('Site.RolePermissionDialog.SaveSuccess')); }, 0);
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                opt.title = Q.format(Q.text('Site.RolePermissionDialog.DialogTitle'), this.options.title);
                return opt;
            };
            RolePermissionDialog.prototype.getTemplate = function () {
                return '<div id="~_Permissions"></div>';
            };
            RolePermissionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RolePermissionDialog);
            return RolePermissionDialog;
        }(Serenity.TemplatedDialog));
        Administration.RolePermissionDialog = RolePermissionDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var SettingDialog = /** @class */ (function (_super) {
            __extends(SettingDialog, _super);
            function SettingDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.SettingForm(_this.idPrefix);
                return _this;
            }
            SettingDialog.prototype.getFormKey = function () { return Administration.SettingForm.formKey; };
            SettingDialog.prototype.getIdProperty = function () { return Administration.SettingRow.idProperty; };
            SettingDialog.prototype.getLocalTextPrefix = function () { return Administration.SettingRow.localTextPrefix; };
            SettingDialog.prototype.getNameProperty = function () { return Administration.SettingRow.nameProperty; };
            SettingDialog.prototype.getService = function () { return Administration.SettingService.baseUrl; };
            SettingDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], SettingDialog);
            return SettingDialog;
        }(_Ext.DialogBase));
        Administration.SettingDialog = SettingDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var SettingGrid = /** @class */ (function (_super) {
            __extends(SettingGrid, _super);
            function SettingGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            SettingGrid.prototype.getColumnsKey = function () { return 'Administration.Setting'; };
            SettingGrid.prototype.getDialogType = function () { return Administration.SettingDialog; };
            SettingGrid.prototype.getIdProperty = function () { return Administration.SettingRow.idProperty; };
            SettingGrid.prototype.getLocalTextPrefix = function () { return Administration.SettingRow.localTextPrefix; };
            SettingGrid.prototype.getService = function () { return Administration.SettingService.baseUrl; };
            SettingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SettingGrid);
            return SettingGrid;
        }(_Ext.GridBase));
        Administration.SettingGrid = SettingGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var TranslationGrid = /** @class */ (function (_super) {
            __extends(TranslationGrid, _super);
            function TranslationGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.element.on('keyup.' + _this.uniqueName + ' change.' + _this.uniqueName, 'input.custom-text', function (e) {
                    var value = Q.trimToNull($(e.target).val());
                    if (value === '') {
                        value = null;
                    }
                    _this.view.getItemById($(e.target).data('key')).CustomText = value;
                    _this.hasChanges = true;
                });
                return _this;
            }
            TranslationGrid.prototype.getIdProperty = function () { return "Key"; };
            TranslationGrid.prototype.getLocalTextPrefix = function () { return "Administration.Translation"; };
            TranslationGrid.prototype.getService = function () { return Administration.TranslationService.baseUrl; };
            TranslationGrid.prototype.onClick = function (e, row, cell) {
                var _this = this;
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented()) {
                    return;
                }
                var item = this.itemAt(row);
                var done;
                if ($(e.target).hasClass('source-text')) {
                    e.preventDefault();
                    done = function () {
                        item.CustomText = item.SourceText;
                        _this.view.updateItem(item.Key, item);
                        _this.hasChanges = true;
                    };
                    if (Q.isTrimmedEmpty(item.CustomText) ||
                        (Q.trimToEmpty(item.CustomText) === Q.trimToEmpty(item.SourceText))) {
                        done();
                        return;
                    }
                    Q.confirm(Q.text('Db.Administration.Translation.OverrideConfirmation'), done);
                    return;
                }
                if ($(e.target).hasClass('target-text')) {
                    e.preventDefault();
                    done = function () {
                        item.CustomText = item.TargetText;
                        _this.view.updateItem(item.Key, item);
                        _this.hasChanges = true;
                    };
                    if (Q.isTrimmedEmpty(item.CustomText) ||
                        (Q.trimToEmpty(item.CustomText) === Q.trimToEmpty(item.TargetText))) {
                        done();
                        return;
                    }
                    Q.confirm(Q.text('Db.Administration.Translation.OverrideConfirmation'), done);
                    return;
                }
            };
            TranslationGrid.prototype.getColumns = function () {
                var columns = [];
                columns.push({ field: 'Key', width: 300, sortable: false });
                columns.push({
                    field: 'SourceText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) {
                        return Q.outerHtml($('<a/>')
                            .addClass('source-text')
                            .text(ctx.value || ''));
                    }
                });
                columns.push({
                    field: 'CustomText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) { return Q.outerHtml($('<input/>')
                        .addClass('custom-text')
                        .attr('value', ctx.value)
                        .attr('type', 'text')
                        .attr('data-key', ctx.item.Key)); }
                });
                columns.push({
                    field: 'TargetText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) { return Q.outerHtml($('<a/>')
                        .addClass('target-text')
                        .text(ctx.value || '')); }
                });
                return columns;
            };
            TranslationGrid.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                var opt = {
                    lookupKey: 'Administration.Language'
                };
                this.sourceLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', '--- ' +
                        Q.text('Db.Administration.Translation.SourceLanguage') + ' ---'); },
                    options: opt
                });
                this.sourceLanguage.changeSelect2(function (e) {
                    if (_this.hasChanges) {
                        _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); });
                    }
                    else {
                        _this.refresh();
                    }
                });
                this.targetLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', '--- ' +
                        Q.text('Db.Administration.Translation.TargetLanguage') + ' ---'); },
                    options: opt
                });
                this.targetLanguage.changeSelect2(function (e) {
                    if (_this.hasChanges) {
                        _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); });
                    }
                    else {
                        _this.refresh();
                    }
                });
            };
            TranslationGrid.prototype.saveChanges = function (language) {
                var _this = this;
                var translations = {};
                for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
                    var item = _a[_i];
                    translations[item.Key] = item.CustomText;
                }
                return Promise.resolve(Administration.TranslationService.Update({
                    TargetLanguageID: language,
                    Translations: translations
                })).then(function () {
                    _this.hasChanges = false;
                    language = Q.trimToNull(language) || 'invariant';
                    Q.notifySuccess('User translations in "' + language +
                        '" language are saved to "user.texts.' +
                        language + '.json" ' + 'file under "~/App_Data/texts/"', '');
                });
            };
            TranslationGrid.prototype.onViewSubmit = function () {
                var request = this.view.params;
                request.SourceLanguageID = this.sourceLanguage.value;
                this.targetLanguageKey = this.targetLanguage.value || '';
                request.TargetLanguageID = this.targetLanguageKey;
                this.hasChanges = false;
                return _super.prototype.onViewSubmit.call(this);
            };
            TranslationGrid.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: Q.text('Db.Administration.Translation.SaveChangesButton'),
                        onClick: function (e) { return _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); }); },
                        cssClass: 'apply-changes-button'
                    }];
            };
            TranslationGrid.prototype.createQuickSearchInput = function () {
                var _this = this;
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, searchText) {
                    _this.searchText = searchText;
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            TranslationGrid.prototype.onViewFilter = function (item) {
                if (!_super.prototype.onViewFilter.call(this, item)) {
                    return false;
                }
                if (!this.searchText) {
                    return true;
                }
                var sd = Select2.util.stripDiacritics;
                var searching = sd(this.searchText).toLowerCase();
                function match(str) {
                    if (!str)
                        return false;
                    return str.toLowerCase().indexOf(searching) >= 0;
                }
                return Q.isEmptyOrNull(searching) || match(item.Key) || match(item.SourceText) ||
                    match(item.TargetText) || match(item.CustomText);
            };
            TranslationGrid.prototype.usePager = function () {
                return false;
            };
            TranslationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TranslationGrid);
            return TranslationGrid;
        }(Serenity.EntityGrid));
        Administration.TranslationGrid = TranslationGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserDialog = /** @class */ (function (_super) {
            __extends(UserDialog, _super);
            function UserDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Administration.UserForm(_this.idPrefix);
                _this.form.Password.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value.length < 7)
                        return "Password must be at least 7 characters!";
                });
                _this.form.PasswordConfirm.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value != _this.form.PasswordConfirm.value)
                        return "The passwords entered doesn't match!";
                });
                return _this;
            }
            UserDialog.prototype.getFormKey = function () { return Administration.UserForm.formKey; };
            UserDialog.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserDialog.prototype.getIsActiveProperty = function () { return Administration.UserRow.isActiveProperty; };
            UserDialog.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserDialog.prototype.getNameProperty = function () { return Administration.UserRow.nameProperty; };
            UserDialog.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.UserDialog.EditRolesButton'),
                    cssClass: 'edit-roles-button',
                    icon: 'fa-users text-blue',
                    onClick: function () {
                        new Administration.UserRoleDialog({
                            userID: _this.entity.UserId,
                            username: _this.entity.Username
                        }).dialogOpen();
                    }
                });
                buttons.push({
                    title: Q.text('Site.UserDialog.EditPermissionsButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'fa-lock text-green',
                    onClick: function () {
                        new Administration.UserPermissionDialog({
                            userID: _this.entity.UserId,
                            username: _this.entity.Username
                        }).dialogOpen();
                    }
                });
                return buttons;
            };
            UserDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('edit-roles-button').toggleClass('disabled', this.isNewOrDeleted());
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            UserDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                // these fields are only required in new record mode
                this.form.Password.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
                this.form.PasswordConfirm.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
            };
            UserDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserDialog);
            return UserDialog;
        }(Serenity.EntityDialog));
        Administration.UserDialog = UserDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserGrid = /** @class */ (function (_super) {
            __extends(UserGrid, _super);
            function UserGrid(container) {
                return _super.call(this, container) || this;
            }
            UserGrid.prototype.getColumnsKey = function () { return "Administration.User"; };
            UserGrid.prototype.getDialogType = function () { return Administration.UserDialog; };
            UserGrid.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserGrid.prototype.getIsActiveProperty = function () { return Administration.UserRow.isActiveProperty; };
            UserGrid.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserGrid.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserGrid.prototype.getDefaultSortBy = function () {
                return ["Username" /* Username */];
            };
            UserGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UserGrid);
            return UserGrid;
        }(Serenity.EntityGrid));
        Administration.UserGrid = UserGrid;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var PermissionCheckEditor = /** @class */ (function (_super) {
            __extends(PermissionCheckEditor, _super);
            function PermissionCheckEditor(container, opt) {
                var _this = _super.call(this, container, opt) || this;
                _this._rolePermissions = {};
                _this._implicitPermissions = {};
                var titleByKey = {};
                var permissionKeys = _this.getSortedGroupAndPermissionKeys(titleByKey);
                var items = permissionKeys.map(function (key) { return ({
                    Key: key,
                    ParentKey: _this.getParentKey(key),
                    Title: titleByKey[key],
                    GrantRevoke: null,
                    IsGroup: key.charAt(key.length - 1) === ':'
                }); });
                _this.byParentKey = Q.toGrouping(items, function (x) { return x.ParentKey; });
                _this.setItems(items);
                return _this;
            }
            PermissionCheckEditor.prototype.getIdProperty = function () { return "Key"; };
            PermissionCheckEditor.prototype.getItemGrantRevokeClass = function (item, grant) {
                if (!item.IsGroup) {
                    return ((item.GrantRevoke === grant) ? ' checked' : '');
                }
                var desc = this.getDescendants(item, true);
                var granted = desc.filter(function (x) { return x.GrantRevoke === grant; });
                if (!granted.length) {
                    return '';
                }
                if (desc.length === granted.length) {
                    return 'checked';
                }
                return 'checked partial';
            };
            PermissionCheckEditor.prototype.roleOrImplicit = function (key) {
                if (this._rolePermissions[key])
                    return true;
                for (var _i = 0, _a = Object.keys(this._rolePermissions); _i < _a.length; _i++) {
                    var k = _a[_i];
                    var d = this._implicitPermissions[k];
                    if (d && d[key])
                        return true;
                }
                for (var _b = 0, _c = Object.keys(this._implicitPermissions); _b < _c.length; _b++) {
                    var i = _c[_b];
                    var item = this.view.getItemById(i);
                    if (item && item.GrantRevoke == true) {
                        var d = this._implicitPermissions[i];
                        if (d && d[key])
                            return true;
                    }
                }
            };
            PermissionCheckEditor.prototype.getItemEffectiveClass = function (item) {
                var _this = this;
                if (item.IsGroup) {
                    var desc = this.getDescendants(item, true);
                    var grantCount = Q.count(desc, function (x) { return x.GrantRevoke === true ||
                        (x.GrantRevoke == null && _this.roleOrImplicit(x.Key)); });
                    if (grantCount === desc.length || desc.length === 0) {
                        return 'allow';
                    }
                    if (grantCount === 0) {
                        return 'deny';
                    }
                    return 'partial';
                }
                var granted = item.GrantRevoke === true ||
                    (item.GrantRevoke == null && this.roleOrImplicit(item.Key));
                return (granted ? ' allow' : ' deny');
            };
            PermissionCheckEditor.prototype.getColumns = function () {
                var _this = this;
                var columns = [{
                        name: Q.text('Site.UserPermissionDialog.Permission'),
                        field: 'Title',
                        format: Serenity.SlickFormatting.treeToggle(function () { return _this.view; }, function (x) { return x.Key; }, function (ctx) {
                            var item = ctx.item;
                            var klass = _this.getItemEffectiveClass(item);
                            return '<span class="effective-permission ' + klass + '">' + Q.htmlEncode(ctx.value) + '</span>';
                        }),
                        width: 495,
                        sortable: false
                    }, {
                        name: Q.text('Site.UserPermissionDialog.Grant'), field: 'Grant',
                        format: function (ctx) {
                            var item1 = ctx.item;
                            var klass1 = _this.getItemGrantRevokeClass(item1, true);
                            return "<span class='check-box grant no-float " + klass1 + "'></span>";
                        },
                        width: 65,
                        sortable: false,
                        headerCssClass: 'align-center',
                        cssClass: 'align-center'
                    }];
                if (this.options.showRevoke) {
                    columns.push({
                        name: Q.text('Site.UserPermissionDialog.Revoke'), field: 'Revoke',
                        format: function (ctx) {
                            var item2 = ctx.item;
                            var klass2 = _this.getItemGrantRevokeClass(item2, false);
                            return '<span class="check-box revoke no-float ' + klass2 + '"></span>';
                        },
                        width: 65,
                        sortable: false,
                        headerCssClass: 'align-center',
                        cssClass: 'align-center'
                    });
                }
                return columns;
            };
            PermissionCheckEditor.prototype.setItems = function (items) {
                Serenity.SlickTreeHelper.setIndents(items, function (x) { return x.Key; }, function (x) { return x.ParentKey; }, false);
                this.view.setItems(items, true);
            };
            PermissionCheckEditor.prototype.onViewSubmit = function () {
                return false;
            };
            PermissionCheckEditor.prototype.onViewFilter = function (item) {
                var _this = this;
                if (!_super.prototype.onViewFilter.call(this, item)) {
                    return false;
                }
                if (!Serenity.SlickTreeHelper.filterById(item, this.view, function (x) { return x.ParentKey; }))
                    return false;
                if (this.searchText) {
                    return this.matchContains(item) || item.IsGroup && Q.any(this.getDescendants(item, false), function (x) { return _this.matchContains(x); });
                }
                return true;
            };
            PermissionCheckEditor.prototype.matchContains = function (item) {
                return Select2.util.stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0;
            };
            PermissionCheckEditor.prototype.getDescendants = function (item, excludeGroups) {
                var result = [];
                var stack = [item];
                while (stack.length > 0) {
                    var i = stack.pop();
                    var children = this.byParentKey[i.Key];
                    if (!children)
                        continue;
                    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                        var child = children_1[_i];
                        if (!excludeGroups || !child.IsGroup) {
                            result.push(child);
                        }
                        stack.push(child);
                    }
                }
                return result;
            };
            PermissionCheckEditor.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (!e.isDefaultPrevented()) {
                    Serenity.SlickTreeHelper.toggleClick(e, row, cell, this.view, function (x) { return x.Key; });
                }
                if (e.isDefaultPrevented()) {
                    return;
                }
                var target = $(e.target);
                var grant = target.hasClass('grant');
                if (grant || target.hasClass('revoke')) {
                    e.preventDefault();
                    var item = this.itemAt(row);
                    var checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');
                    if (checkedOrPartial) {
                        grant = null;
                    }
                    else {
                        grant = grant !== checkedOrPartial;
                    }
                    if (item.IsGroup) {
                        for (var _i = 0, _a = this.getDescendants(item, true); _i < _a.length; _i++) {
                            var d = _a[_i];
                            d.GrantRevoke = grant;
                        }
                    }
                    else
                        item.GrantRevoke = grant;
                    this.slickGrid.invalidate();
                }
            };
            PermissionCheckEditor.prototype.getParentKey = function (key) {
                if (key.charAt(key.length - 1) === ':') {
                    key = key.substr(0, key.length - 1);
                }
                var idx = key.lastIndexOf(':');
                if (idx >= 0) {
                    return key.substr(0, idx + 1);
                }
                return null;
            };
            PermissionCheckEditor.prototype.getButtons = function () {
                return [];
            };
            PermissionCheckEditor.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                    _this.searchText = Select2.util.stripDiacritics(Q.trimToNull(text) || '').toLowerCase();
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            PermissionCheckEditor.prototype.getSortedGroupAndPermissionKeys = function (titleByKey) {
                var keys = Q.getRemoteData('Administration.PermissionKeys').Entities;
                var titleWithGroup = {};
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var k = keys_1[_i];
                    var s = k;
                    if (!s) {
                        continue;
                    }
                    if (s.charAt(s.length - 1) == ':') {
                        s = s.substr(0, s.length - 1);
                        if (s.length === 0) {
                            continue;
                        }
                    }
                    if (titleByKey[s]) {
                        continue;
                    }
                    titleByKey[s] = Q.coalesce(Q.tryGetText('Permission.' + s), s);
                    var parts = s.split(':');
                    var group = '';
                    var groupTitle = '';
                    for (var i = 0; i < parts.length - 1; i++) {
                        group = group + parts[i] + ':';
                        var txt = Q.tryGetText('Permission.' + group);
                        if (txt == null) {
                            txt = parts[i];
                        }
                        titleByKey[group] = txt;
                        groupTitle = groupTitle + titleByKey[group] + ':';
                        titleWithGroup[group] = groupTitle;
                    }
                    titleWithGroup[s] = groupTitle + titleByKey[s];
                }
                keys = Object.keys(titleByKey);
                keys = keys.sort(function (x, y) { return Q.turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]); });
                return keys;
            };
            Object.defineProperty(PermissionCheckEditor.prototype, "value", {
                get: function () {
                    var result = [];
                    for (var _i = 0, _a = this.view.getItems(); _i < _a.length; _i++) {
                        var item = _a[_i];
                        if (item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':') {
                            result.push({ PermissionKey: item.Key, Granted: item.GrantRevoke });
                        }
                    }
                    return result;
                },
                set: function (value) {
                    for (var _i = 0, _a = this.view.getItems(); _i < _a.length; _i++) {
                        var item = _a[_i];
                        item.GrantRevoke = null;
                    }
                    if (value != null) {
                        for (var _b = 0, value_1 = value; _b < value_1.length; _b++) {
                            var row = value_1[_b];
                            var r = this.view.getItemById(row.PermissionKey);
                            if (r) {
                                r.GrantRevoke = Q.coalesce(row.Granted, true);
                            }
                        }
                    }
                    this.setItems(this.getItems());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PermissionCheckEditor.prototype, "rolePermissions", {
                get: function () {
                    return Object.keys(this._rolePermissions);
                },
                set: function (value) {
                    this._rolePermissions = {};
                    if (value) {
                        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
                            var k = value_2[_i];
                            this._rolePermissions[k] = true;
                        }
                    }
                    this.setItems(this.getItems());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PermissionCheckEditor.prototype, "implicitPermissions", {
                set: function (value) {
                    this._implicitPermissions = {};
                    if (value) {
                        for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                            var k = _a[_i];
                            this._implicitPermissions[k] = this._implicitPermissions[k] || {};
                            var l = value[k];
                            if (l) {
                                for (var _b = 0, l_1 = l; _b < l_1.length; _b++) {
                                    var s = l_1[_b];
                                    this._implicitPermissions[k][s] = true;
                                }
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            PermissionCheckEditor = __decorate([
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue])
            ], PermissionCheckEditor);
            return PermissionCheckEditor;
        }(Serenity.DataGrid));
        Administration.PermissionCheckEditor = PermissionCheckEditor;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserPermissionDialog = /** @class */ (function (_super) {
            __extends(UserPermissionDialog, _super);
            function UserPermissionDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.PermissionCheckEditor(_this.byId('Permissions'), {
                    showRevoke: true
                });
                Administration.UserPermissionService.List({
                    UserID: _this.options.userID,
                    Module: null,
                    Submodule: null
                }, function (response) {
                    _this.permissions.value = response.Entities;
                });
                Administration.UserPermissionService.ListRolePermissions({
                    UserID: _this.options.userID,
                    Module: null,
                    Submodule: null,
                }, function (response) {
                    _this.permissions.rolePermissions = response.Entities;
                });
                _this.permissions.implicitPermissions = Q.getRemoteData('Administration.ImplicitPermissions');
                return _this;
            }
            UserPermissionDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text('Dialogs.OkButton'),
                        click: function (e) {
                            Administration.UserPermissionService.Update({
                                UserID: _this.options.userID,
                                Permissions: _this.permissions.value,
                                Module: null,
                                Submodule: null
                            }, function (response) {
                                _this.dialogClose();
                                window.setTimeout(function () { return Q.notifySuccess(Q.text('Site.UserPermissionDialog.SaveSuccess')); }, 0);
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                opt.title = Q.format(Q.text('Site.UserPermissionDialog.DialogTitle'), this.options.username);
                return opt;
            };
            UserPermissionDialog.prototype.getTemplate = function () {
                return '<div id="~_Permissions"></div>';
            };
            UserPermissionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserPermissionDialog);
            return UserPermissionDialog;
        }(Serenity.TemplatedDialog));
        Administration.UserPermissionDialog = UserPermissionDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var RoleCheckEditor = /** @class */ (function (_super) {
            __extends(RoleCheckEditor, _super);
            function RoleCheckEditor(div) {
                return _super.call(this, div) || this;
            }
            RoleCheckEditor.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                    _this.searchText = Select2.util.stripDiacritics(text || '').toUpperCase();
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            RoleCheckEditor.prototype.getButtons = function () {
                return [];
            };
            RoleCheckEditor.prototype.getTreeItems = function () {
                return Administration.RoleRow.getLookup().items.map(function (role) { return ({
                    id: role.RoleId.toString(),
                    text: role.RoleName
                }); });
            };
            RoleCheckEditor.prototype.onViewFilter = function (item) {
                return _super.prototype.onViewFilter.call(this, item) &&
                    (Q.isEmptyOrNull(this.searchText) ||
                        Select2.util.stripDiacritics(item.text || '')
                            .toUpperCase().indexOf(this.searchText) >= 0);
            };
            RoleCheckEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], RoleCheckEditor);
            return RoleCheckEditor;
        }(Serenity.CheckTreeEditor));
        Administration.RoleCheckEditor = RoleCheckEditor;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Administration;
    (function (Administration) {
        var UserRoleDialog = /** @class */ (function (_super) {
            __extends(UserRoleDialog, _super);
            function UserRoleDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.RoleCheckEditor(_this.byId('Roles'));
                Administration.UserRoleService.List({
                    UserID: _this.options.userID
                }, function (response) {
                    _this.permissions.value = response.Entities.map(function (x) { return x.toString(); });
                });
                return _this;
            }
            UserRoleDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [{
                        text: Q.text('Dialogs.OkButton'),
                        click: function () {
                            Q.serviceRequest('Administration/UserRole/Update', {
                                UserID: _this.options.userID,
                                Roles: _this.permissions.value.map(function (x) { return parseInt(x, 10); })
                            }, function (response) {
                                _this.dialogClose();
                                Q.notifySuccess(Q.text('Site.UserRoleDialog.SaveSuccess'));
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }];
                opt.title = Q.format(Q.text('Site.UserRoleDialog.DialogTitle'), this.options.username);
                return opt;
            };
            UserRoleDialog.prototype.getTemplate = function () {
                return "<div id='~_Roles'></div>";
            };
            UserRoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserRoleDialog);
            return UserRoleDialog;
        }(Serenity.TemplatedDialog));
        Administration.UserRoleDialog = UserRoleDialog;
    })(Administration = SCMONLINE.Administration || (SCMONLINE.Administration = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicProgressDialog = /** @class */ (function (_super) {
        __extends(BasicProgressDialog, _super);
        function BasicProgressDialog() {
            var _this = _super.call(this) || this;
            _this.byId('ProgressBar').progressbar({
                max: 100,
                value: 0,
                change: function (e, v) {
                    _this.byId('ProgressLabel').text(_this.value + ' / ' + _this.max);
                }
            });
            return _this;
        }
        Object.defineProperty(BasicProgressDialog.prototype, "max", {
            get: function () {
                return this.byId('ProgressBar').progressbar().progressbar('option', 'max');
            },
            set: function (value) {
                this.byId('ProgressBar').progressbar().progressbar('option', 'max', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicProgressDialog.prototype, "value", {
            get: function () {
                return this.byId('ProgressBar').progressbar('value');
            },
            set: function (value) {
                this.byId('ProgressBar').progressbar().progressbar('value', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicProgressDialog.prototype, "title", {
            get: function () {
                return this.element.dialog().dialog('option', 'title');
            },
            set: function (value) {
                this.element.dialog().dialog('option', 'title', value);
            },
            enumerable: true,
            configurable: true
        });
        BasicProgressDialog.prototype.getDialogOptions = function () {
            var _this = this;
            var opt = _super.prototype.getDialogOptions.call(this);
            opt.title = Q.text('Site.BasicProgressDialog.PleaseWait');
            opt.width = 600;
            opt.buttons = [{
                    text: Q.text('Dialogs.CancelButton'),
                    click: function () {
                        _this.cancelled = true;
                        _this.element.closest('.ui-dialog')
                            .find('.ui-dialog-buttonpane .ui-button')
                            .attr('disabled', 'disabled')
                            .css('opacity', '0.5');
                        _this.element.dialog('option', 'title', Q.trimToNull(_this.cancelTitle) ||
                            Q.text('Site.BasicProgressDialog.CancelTitle'));
                    }
                }];
            return opt;
        };
        BasicProgressDialog.prototype.initDialog = function () {
            _super.prototype.initDialog.call(this);
            this.element.closest('.ui-dialog').find('.ui-dialog-titlebar-close').hide();
        };
        BasicProgressDialog.prototype.getTemplate = function () {
            return ("<div class='s-DialogContent s-BasicProgressDialogContent'>" +
                "<div id='~_StatusText' class='status-text' ></div>" +
                "<div id='~_ProgressBar' class='progress-bar'>" +
                "<div id='~_ProgressLabel' class='progress-label' ></div>" +
                "</div>" +
                "</div>");
        };
        return BasicProgressDialog;
    }(Serenity.TemplatedDialog));
    SCMONLINE.BasicProgressDialog = BasicProgressDialog;
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var BulkServiceAction = /** @class */ (function () {
            function BulkServiceAction() {
            }
            BulkServiceAction.prototype.createProgressDialog = function () {
                this.progressDialog = new SCMONLINE.BasicProgressDialog();
                this.progressDialog.dialogOpen();
                this.progressDialog.max = this.keys.length;
                this.progressDialog.value = 0;
            };
            BulkServiceAction.prototype.getConfirmationFormat = function () {
                return Q.text('Site.BulkServiceAction.ConfirmationFormat');
            };
            BulkServiceAction.prototype.getConfirmationMessage = function (targetCount) {
                return Q.format(this.getConfirmationFormat(), targetCount);
            };
            BulkServiceAction.prototype.confirm = function (targetCount, action) {
                Q.confirm(this.getConfirmationMessage(targetCount), action);
            };
            BulkServiceAction.prototype.getNothingToProcessMessage = function () {
                return Q.text('Site.BulkServiceAction.NothingToProcess');
            };
            BulkServiceAction.prototype.nothingToProcess = function () {
                Q.notifyError(this.getNothingToProcessMessage());
            };
            BulkServiceAction.prototype.getParallelRequests = function () {
                return 1;
            };
            BulkServiceAction.prototype.getBatchSize = function () {
                return 1;
            };
            BulkServiceAction.prototype.startParallelExecution = function () {
                this.createProgressDialog();
                this.successCount = 0;
                this.errorCount = 0;
                this.pendingRequests = 0;
                this.completedRequests = 0;
                this.errorCount = 0;
                this.errorByKey = {};
                this.queue = this.keys.slice();
                this.queueIndex = 0;
                var parallelRequests = this.getParallelRequests();
                while (parallelRequests-- > 0) {
                    this.executeNextBatch();
                }
            };
            BulkServiceAction.prototype.serviceCallCleanup = function () {
                this.pendingRequests--;
                this.completedRequests++;
                var title = Q.text((this.progressDialog.cancelled ?
                    'Site.BasicProgressDialog.CancelTitle' : 'Site.BasicProgressDialog.PleaseWait'));
                title += ' (';
                if (this.successCount > 0) {
                    title += Q.format(Q.text('Site.BulkServiceAction.SuccessCount'), this.successCount);
                }
                if (this.errorCount > 0) {
                    if (this.successCount > 0) {
                        title += ', ';
                    }
                    title += Q.format(Q.text('Site.BulkServiceAction.ErrorCount'), this.errorCount);
                }
                this.progressDialog.title = title + ')';
                this.progressDialog.value = this.successCount + this.errorCount;
                if (!this.progressDialog.cancelled && this.progressDialog.value < this.keys.length) {
                    this.executeNextBatch();
                }
                else if (this.pendingRequests === 0) {
                    this.progressDialog.dialogClose();
                    this.showResults();
                    if (this.done) {
                        this.done();
                        this.done = null;
                    }
                }
            };
            BulkServiceAction.prototype.executeForBatch = function (batch) {
            };
            BulkServiceAction.prototype.executeNextBatch = function () {
                var batchSize = this.getBatchSize();
                var batch = [];
                while (true) {
                    if (batch.length >= batchSize) {
                        break;
                    }
                    if (this.queueIndex >= this.queue.length) {
                        break;
                    }
                    batch.push(this.queue[this.queueIndex++]);
                }
                if (batch.length > 0) {
                    this.pendingRequests++;
                    this.executeForBatch(batch);
                }
            };
            BulkServiceAction.prototype.getAllHadErrorsFormat = function () {
                return Q.text('Site.BulkServiceAction.AllHadErrorsFormat');
            };
            BulkServiceAction.prototype.showAllHadErrors = function () {
                Q.notifyError(Q.format(this.getAllHadErrorsFormat(), this.errorCount));
            };
            BulkServiceAction.prototype.getSomeHadErrorsFormat = function () {
                return Q.text('Site.BulkServiceAction.SomeHadErrorsFormat');
            };
            BulkServiceAction.prototype.showSomeHadErrors = function () {
                Q.notifyWarning(Q.format(this.getSomeHadErrorsFormat(), this.successCount, this.errorCount));
            };
            BulkServiceAction.prototype.getAllSuccessFormat = function () {
                return Q.text('Site.BulkServiceAction.AllSuccessFormat');
            };
            BulkServiceAction.prototype.showAllSuccess = function () {
                Q.notifySuccess(Q.format(this.getAllSuccessFormat(), this.successCount));
            };
            BulkServiceAction.prototype.showResults = function () {
                if (this.errorCount === 0 && this.successCount === 0) {
                    this.nothingToProcess();
                    return;
                }
                if (this.errorCount > 0 && this.successCount === 0) {
                    this.showAllHadErrors();
                    return;
                }
                if (this.errorCount > 0) {
                    this.showSomeHadErrors();
                    return;
                }
                this.showAllSuccess();
            };
            BulkServiceAction.prototype.execute = function (keys) {
                var _this = this;
                this.keys = keys;
                if (this.keys.length === 0) {
                    this.nothingToProcess();
                    return;
                }
                this.confirm(this.keys.length, function () { return _this.startParallelExecution(); });
            };
            BulkServiceAction.prototype.get_successCount = function () {
                return this.successCount;
            };
            BulkServiceAction.prototype.set_successCount = function (value) {
                this.successCount = value;
            };
            BulkServiceAction.prototype.get_errorCount = function () {
                return this.errorCount;
            };
            BulkServiceAction.prototype.set_errorCount = function (value) {
                this.errorCount = value;
            };
            return BulkServiceAction;
        }());
        Common.BulkServiceAction = BulkServiceAction;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var DialogUtils;
    (function (DialogUtils) {
        function pendingChangesConfirmation(element, hasPendingChanges) {
            element.on('dialogbeforeclose panelbeforeclose', function (e) {
                if (!Serenity.WX.hasOriginalEvent(e) || !hasPendingChanges()) {
                    return;
                }
                e.preventDefault();
                Q.confirm('You have pending changes. Save them?', function () { return element.find('div.save-and-close-button').click(); }, {
                    onNo: function () {
                        if (element.hasClass('ui-dialog-content'))
                            element.dialog('close');
                        else if (element.hasClass('s-Panel'))
                            Serenity.TemplatedDialog.closePanel(element);
                    }
                });
            });
        }
        DialogUtils.pendingChangesConfirmation = pendingChangesConfirmation;
    })(DialogUtils = SCMONLINE.DialogUtils || (SCMONLINE.DialogUtils = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var EnumSelectFormatter = /** @class */ (function () {
            function EnumSelectFormatter() {
                this.allowClear = true;
            }
            EnumSelectFormatter.prototype.format = function (ctx) {
                var enumType = Serenity.EnumTypeRegistry.get(this.enumKey);
                var sb = "<select>";
                if (this.allowClear) {
                    sb += '<option value="">';
                    sb += Q.htmlEncode(this.emptyItemText || Q.text("Controls.SelectEditor.EmptyItemText"));
                    sb += '</option>';
                }
                for (var _i = 0, _a = Object.keys(enumType).filter(function (v) { return !isNaN(parseInt(v, 10)); }); _i < _a.length; _i++) {
                    var x = _a[_i];
                    sb += '<option value="' + Q.attrEncode(x) + '"';
                    if (x == ctx.value)
                        sb += " selected";
                    var name = enumType[x];
                    sb += ">";
                    sb += Q.htmlEncode(Q.tryGetText("Enums." + this.enumKey + "." + name) || name);
                    sb += "</option>";
                }
                sb += "</select>";
                return sb;
            };
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "enumKey", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "allowClear", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "emptyItemText", void 0);
            EnumSelectFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], EnumSelectFormatter);
            return EnumSelectFormatter;
        }());
        Common.EnumSelectFormatter = EnumSelectFormatter;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var ExcelExportHelper;
        (function (ExcelExportHelper) {
            function createToolButton(options) {
                return {
                    hint: Q.coalesce(options.hint, 'Excel'),
                    title: Q.coalesce(options.title, ''),
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        if (!options.onViewSubmit()) {
                            return;
                        }
                        var grid = options.grid;
                        var request = Q.deepClone(grid.getView().params);
                        request.Take = 0;
                        request.Skip = 0;
                        var sortBy = grid.getView().sortBy;
                        if (sortBy) {
                            request.Sort = sortBy;
                        }
                        request.IncludeColumns = [];
                        var columns = grid.getGrid().getColumns();
                        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                            var column = columns_1[_i];
                            request.IncludeColumns.push(column.id || column.field);
                        }
                        Q.postToService({ service: options.service, request: request, target: '_blank' });
                    },
                    separator: options.separator
                };
            }
            ExcelExportHelper.createToolButton = createToolButton;
        })(ExcelExportHelper = Common.ExcelExportHelper || (Common.ExcelExportHelper = {}));
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var GridEditorBase = /** @class */ (function (_super) {
            __extends(GridEditorBase, _super);
            function GridEditorBase(container) {
                var _this = _super.call(this, container) || this;
                _this.nextId = 1;
                // Add Sort Functionality to Detail Editor
                // Source: https://github.com/volkanceylan/Serenity/issues/3792
                _this.slickGrid.onSort.subscribe(function (e, args) {
                    sortGridFunction(args.grid, args.sortCols[0], args.sortCols[0].sortCol.field);
                    //(args.grid as Slick.Grid).init();
                    args.grid.invalidateAllRows();
                    args.grid.invalidate();
                    args.grid.render();
                    args.grid.resizeCanvas();
                });
                function sortGridFunction(grid, column, field) {
                    grid.getData().sort(function (a, b) {
                        var result = a[field] > b[field] ? 1 :
                            a[field] < b[field] ? -1 :
                                0;
                        return column.sortAsc ? result : -result;
                    });
                }
                return _this;
            }
            GridEditorBase.prototype.getIdProperty = function () { return "__id"; };
            GridEditorBase.prototype.id = function (entity) {
                return entity[this.getIdProperty()];
            };
            GridEditorBase.prototype.getNextId = function () {
                return "`" + this.nextId++;
            };
            GridEditorBase.prototype.setNewId = function (entity) {
                entity[this.getIdProperty()] = this.getNextId();
            };
            GridEditorBase.prototype.save = function (opt, callback) {
                var _this = this;
                var request = opt.request;
                var row = Q.deepClone(request.Entity);
                var id = this.id(row);
                if (id == null) {
                    row[this.getIdProperty()] = this.getNextId();
                }
                if (!this.validateEntity(row, id)) {
                    return;
                }
                var items = this.view.getItems().slice();
                if (id == null) {
                    items.push(row);
                }
                else {
                    var index = Q.indexOf(items, function (x) { return _this.id(x) === id; });
                    items[index] = Q.deepClone({}, items[index], row);
                }
                this.setEntities(items);
                callback({});
            };
            GridEditorBase.prototype.deleteEntity = function (id) {
                this.view.deleteItem(id);
                return true;
            };
            GridEditorBase.prototype.validateEntity = function (row, id) {
                return true;
            };
            GridEditorBase.prototype.setEntities = function (items) {
                this.view.setItems(items, true);
            };
            GridEditorBase.prototype.getNewEntity = function () {
                return {};
            };
            GridEditorBase.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: this.getAddButtonCaption(),
                        cssClass: 'add-button',
                        onClick: function () {
                            _this.createEntityDialog(_this.getItemType(), function (dlg) {
                                var dialog = dlg;
                                dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                                dialog.loadEntityAndOpenDialog(_this.getNewEntity());
                            });
                        }
                    }];
            };
            GridEditorBase.prototype.editItem = function (entityOrId) {
                var _this = this;
                var id = entityOrId;
                var item = this.view.getItemById(id);
                this.createEntityDialog(this.getItemType(), function (dlg) {
                    var dialog = dlg;
                    dialog.onDelete = function (opt, callback) {
                        if (!_this.deleteEntity(id)) {
                            return;
                        }
                        callback({});
                    };
                    dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                    dialog.loadEntityAndOpenDialog(item);
                });
                ;
            };
            GridEditorBase.prototype.getEditValue = function (property, target) {
                target[property.name] = this.value;
            };
            GridEditorBase.prototype.setEditValue = function (source, property) {
                this.value = source[property.name];
            };
            Object.defineProperty(GridEditorBase.prototype, "value", {
                get: function () {
                    var p = this.getIdProperty();
                    return this.view.getItems().map(function (x) {
                        var y = Q.deepClone(x);
                        var id = y[p];
                        if (id && id.toString().charAt(0) == '`')
                            delete y[p];
                        return y;
                    });
                },
                set: function (value) {
                    var _this = this;
                    var p = this.getIdProperty();
                    this.view.setItems((value || []).map(function (x) {
                        var y = Q.deepClone(x);
                        if (y[p] == null)
                            y[p] = "`" + _this.getNextId();
                        return y;
                    }), true);
                },
                enumerable: true,
                configurable: true
            });
            GridEditorBase.prototype.getGridCanLoad = function () {
                return false;
            };
            GridEditorBase.prototype.usePager = function () {
                return false;
            };
            GridEditorBase.prototype.getInitialTitle = function () {
                return null;
            };
            GridEditorBase.prototype.createQuickSearchInput = function () {
            };
            GridEditorBase = __decorate([
                Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.editor(),
                Serenity.Decorators.element("<div/>")
            ], GridEditorBase);
            return GridEditorBase;
        }(Serenity.EntityGrid));
        Common.GridEditorBase = GridEditorBase;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var GridEditorDialog = /** @class */ (function (_super) {
            __extends(GridEditorDialog, _super);
            function GridEditorDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GridEditorDialog.prototype.getIdProperty = function () { return "__id"; };
            GridEditorDialog.prototype.destroy = function () {
                this.onSave = null;
                this.onDelete = null;
                _super.prototype.destroy.call(this);
            };
            GridEditorDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                // apply changes button doesn't work properly with in-memory grids yet
                if (this.applyChangesButton) {
                    this.applyChangesButton.hide();
                }
            };
            GridEditorDialog.prototype.saveHandler = function (options, callback) {
                this.onSave && this.onSave(options, callback);
            };
            GridEditorDialog.prototype.deleteHandler = function (options, callback) {
                this.onDelete && this.onDelete(options, callback);
            };
            GridEditorDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], GridEditorDialog);
            return GridEditorDialog;
        }(Serenity.EntityDialog));
        Common.GridEditorDialog = GridEditorDialog;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    /**
     * This is an editor widget but it only displays a text, not edits it.
     *
     */
    var StaticTextBlock = /** @class */ (function (_super) {
        __extends(StaticTextBlock, _super);
        function StaticTextBlock(container, options) {
            var _this = _super.call(this, container, options) || this;
            // hide the caption label for this editor if in a form. ugly hack
            if (_this.options.hideLabel)
                _this.element.closest('.field').find('.caption').hide();
            _this.updateElementContent();
            return _this;
        }
        StaticTextBlock.prototype.updateElementContent = function () {
            var text = Q.coalesce(this.options.text, this.value);
            // if isLocalText is set, text is actually a local text key
            if (this.options.isLocalText)
                text = Q.text(text);
            // don't html encode if isHtml option is true
            if (this.options.isHtml)
                this.element.html(text);
            else
                this.element.text(text);
        };
        /**
         * By implementing ISetEditValue interface, we allow this editor to display its field value.
         * But only do this when our text content is not explicitly set in options
         */
        StaticTextBlock.prototype.setEditValue = function (source, property) {
            if (this.options.text == null) {
                this.value = Q.coalesce(this.options.text, source[property.name]);
                this.updateElementContent();
            }
        };
        StaticTextBlock = __decorate([
            Serenity.Decorators.element("<div/>"),
            Serenity.Decorators.registerEditor([Serenity.ISetEditValue])
        ], StaticTextBlock);
        return StaticTextBlock;
    }(Serenity.Widget));
    SCMONLINE.StaticTextBlock = StaticTextBlock;
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var LanguageSelection = /** @class */ (function (_super) {
            __extends(LanguageSelection, _super);
            function LanguageSelection(select, currentLanguage) {
                var _this = _super.call(this, select) || this;
                currentLanguage = Q.coalesce(currentLanguage, 'en');
                _this.change(function (e) {
                    $.cookie('LanguagePreference', select.val(), {
                        path: Q.Config.applicationPath,
                        expires: 365
                    });
                    window.location.reload(true);
                });
                Q.getLookupAsync('Administration.Language').then(function (x) {
                    if (!Q.any(x.items, function (z) { return z.LanguageId === currentLanguage; })) {
                        var idx = currentLanguage.lastIndexOf('-');
                        if (idx >= 0) {
                            currentLanguage = currentLanguage.substr(0, idx);
                            if (!Q.any(x.items, function (y) { return y.LanguageId === currentLanguage; })) {
                                currentLanguage = 'en';
                            }
                        }
                        else {
                            currentLanguage = 'en';
                        }
                    }
                    for (var _i = 0, _a = x.items; _i < _a.length; _i++) {
                        var l = _a[_i];
                        Q.addOption(select, l.LanguageId, l.LanguageName);
                    }
                    select.val(currentLanguage);
                });
                return _this;
            }
            return LanguageSelection;
        }(Serenity.Widget));
        Common.LanguageSelection = LanguageSelection;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var SidebarSearch = /** @class */ (function (_super) {
            __extends(SidebarSearch, _super);
            function SidebarSearch(input, menuUL) {
                var _this = _super.call(this, input) || this;
                new Serenity.QuickSearchInput(input, {
                    onSearch: function (field, text, success) {
                        _this.updateMatchFlags(text);
                        success(true);
                    }
                });
                _this.menuUL = menuUL;
                return _this;
            }
            SidebarSearch.prototype.updateMatchFlags = function (text) {
                var liList = this.menuUL.find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (text == null) {
                    liList.show();
                    liList.removeClass('expanded');
                    return;
                }
                var parts = text.replace(',', ' ').split(' ').filter(function (x) { return !Q.isTrimmedEmpty(x); });
                for (var i = 0; i < parts.length; i++) {
                    parts[i] = Q.trimToNull(Select2.util.stripDiacritics(parts[i]).toUpperCase());
                }
                var items = liList;
                items.each(function (idx, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                        var p = parts_1[_i];
                        if (p != null && !(title.indexOf(p) !== -1)) {
                            x.addClass('non-match');
                            break;
                        }
                    }
                });
                var matchingItems = items.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                liList.addClass('expanded');
            };
            return SidebarSearch;
        }(Serenity.Widget));
        Common.SidebarSearch = SidebarSearch;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var ThemeSelection = /** @class */ (function (_super) {
            __extends(ThemeSelection, _super);
            function ThemeSelection(select) {
                var _this = _super.call(this, select) || this;
                _this.change(function (e) {
                    var path = Q.Config.applicationPath;
                    if (path && path != '/' && Q.endsWith(path, '/'))
                        path = path.substr(0, path.length - 1);
                    $.cookie('ThemePreference', select.val(), {
                        path: path,
                        expires: 365
                    });
                    var theme = select.val() || '';
                    var darkSidebar = theme.indexOf('light') < 0;
                    $('body').removeClass('skin-' + _this.getCurrentTheme());
                    $('body').addClass('skin-' + theme)
                        .toggleClass('dark-sidebar', darkSidebar)
                        .toggleClass('light-sidebar', !darkSidebar);
                });
                Q.addOption(select, 'blue', Q.text('Site.Layout.ThemeBlue'));
                Q.addOption(select, 'blue-light', Q.text('Site.Layout.ThemeBlueLight'));
                Q.addOption(select, 'purple', Q.text('Site.Layout.ThemePurple'));
                Q.addOption(select, 'purple-light', Q.text('Site.Layout.ThemePurpleLight'));
                Q.addOption(select, 'red', Q.text('Site.Layout.ThemeRed'));
                Q.addOption(select, 'red-light', Q.text('Site.Layout.ThemeRedLight'));
                Q.addOption(select, 'green', Q.text('Site.Layout.ThemeGreen'));
                Q.addOption(select, 'green-light', Q.text('Site.Layout.ThemeGreenLight'));
                Q.addOption(select, 'yellow', Q.text('Site.Layout.ThemeYellow'));
                Q.addOption(select, 'yellow-light', Q.text('Site.Layout.ThemeYellowLight'));
                Q.addOption(select, 'black', Q.text('Site.Layout.ThemeBlack'));
                Q.addOption(select, 'black-light', Q.text('Site.Layout.ThemeBlackLight'));
                select.val(_this.getCurrentTheme());
                return _this;
            }
            ThemeSelection.prototype.getCurrentTheme = function () {
                var skinClass = Q.first(($('body').attr('class') || '').split(' '), function (x) { return Q.startsWith(x, 'skin-'); });
                if (skinClass) {
                    return skinClass.substr(5);
                }
                return 'blue';
            };
            return ThemeSelection;
        }(Serenity.Widget));
        Common.ThemeSelection = ThemeSelection;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var PdfExportHelper;
        (function (PdfExportHelper) {
            function toAutoTableColumns(srcColumns, columnStyles, columnTitles) {
                return srcColumns.map(function (src) {
                    var col = {
                        dataKey: src.id || src.field,
                        title: src.name || ''
                    };
                    if (columnTitles && columnTitles[col.dataKey] != null)
                        col.title = columnTitles[col.dataKey];
                    var style = {};
                    if ((src.cssClass || '').indexOf("align-right") >= 0)
                        style.halign = 'right';
                    else if ((src.cssClass || '').indexOf("align-center") >= 0)
                        style.halign = 'center';
                    columnStyles[col.dataKey] = style;
                    return col;
                });
            }
            function toAutoTableData(entities, keys, srcColumns) {
                var el = document.createElement('span');
                var row = 0;
                return entities.map(function (item) {
                    var dst = {};
                    for (var cell = 0; cell < srcColumns.length; cell++) {
                        var src = srcColumns[cell];
                        var fld = src.field || '';
                        var key = keys[cell];
                        var txt = void 0;
                        var html = void 0;
                        if (src.formatter) {
                            html = src.formatter(row, cell, item[fld], src, item);
                        }
                        else if (src.format) {
                            html = src.format({ row: row, cell: cell, item: item, value: item[fld] });
                        }
                        else {
                            dst[key] = item[fld];
                            continue;
                        }
                        if (!html || (html.indexOf('<') < 0 && html.indexOf('&') < 0))
                            dst[key] = html;
                        else {
                            el.innerHTML = html;
                            if (el.children.length == 1 &&
                                $(el.children[0]).is(":input")) {
                                dst[key] = $(el.children[0]).val();
                            }
                            else if (el.children.length == 1 &&
                                $(el.children).is('.check-box')) {
                                dst[key] = $(el.children).hasClass("checked") ? "X" : "";
                            }
                            else
                                dst[key] = el.textContent || '';
                        }
                    }
                    row++;
                    return dst;
                });
            }
            function exportToPdf(options) {
                var g = options.grid;
                if (!options.onViewSubmit())
                    return;
                includeAutoTable();
                var request = Q.deepClone(g.view.params);
                request.Take = 0;
                request.Skip = 0;
                var sortBy = g.view.sortBy;
                if (sortBy != null)
                    request.Sort = sortBy;
                var gridColumns = g.slickGrid.getColumns();
                gridColumns = gridColumns.filter(function (x) { return x.id !== "__select__"; });
                request.IncludeColumns = [];
                for (var _i = 0, gridColumns_1 = gridColumns; _i < gridColumns_1.length; _i++) {
                    var column = gridColumns_1[_i];
                    request.IncludeColumns.push(column.id || column.field);
                }
                Q.serviceCall({
                    url: g.view.url,
                    request: request,
                    onSuccess: function (response) {
                        var doc = new jsPDF('l', 'pt');
                        var srcColumns = gridColumns;
                        var columnStyles = {};
                        var columns = toAutoTableColumns(srcColumns, columnStyles, options.columnTitles);
                        var keys = columns.map(function (x) { return x.dataKey; });
                        var entities = response.Entities || [];
                        var data = toAutoTableData(entities, keys, srcColumns);
                        doc.setFontSize(options.titleFontSize || 10);
                        doc.setFontStyle('bold');
                        var reportTitle = options.reportTitle || g.getTitle() || "Report";
                        doc.autoTableText(reportTitle, doc.internal.pageSize.width / 2, options.titleTop || 25, { halign: 'center' });
                        var totalPagesExp = "{{T}}";
                        var pageNumbers = options.pageNumbers == null || options.pageNumbers;
                        var autoOptions = $.extend({
                            margin: { top: 25, left: 25, right: 25, bottom: pageNumbers ? 25 : 30 },
                            startY: 60,
                            styles: {
                                fontSize: 8,
                                overflow: 'linebreak',
                                cellPadding: 2,
                                valign: 'middle'
                            },
                            columnStyles: columnStyles
                        }, options.tableOptions);
                        if (pageNumbers) {
                            var footer = function (data) {
                                var str = data.pageCount;
                                // Total page number plugin only available in jspdf v1.0+
                                if (typeof doc.putTotalPages === 'function') {
                                    str = str + " / " + totalPagesExp;
                                }
                                doc.autoTableText(str, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - autoOptions.margin.bottom, {
                                    halign: 'center'
                                });
                            };
                            autoOptions.afterPageContent = footer;
                        }
                        // Print header of page
                        if (options.printDateTimeHeader == null || options.printDateTimeHeader) {
                            var beforePage = function (data) {
                                doc.setFontStyle('normal');
                                doc.setFontSize(8);
                                // Date and time of the report
                                doc.autoTableText(Q.formatDate(new Date(), "dd-MM-yyyy HH:mm"), doc.internal.pageSize.width - autoOptions.margin.right, 13, {
                                    halign: 'right'
                                });
                            };
                            autoOptions.beforePageContent = beforePage;
                        }
                        doc.autoTable(columns, data, autoOptions);
                        if (typeof doc.putTotalPages === 'function') {
                            doc.putTotalPages(totalPagesExp);
                        }
                        if (!options.output || options.output == "file") {
                            var fileName = options.fileName || options.reportTitle || "{0}_{1}.pdf";
                            fileName = Q.format(fileName, g.getTitle() || "report", Q.formatDate(new Date(), "yyyyMMdd_HHmm"));
                            doc.save(fileName);
                            return;
                        }
                        if (options.autoPrint)
                            doc.autoPrint();
                        var output = options.output;
                        if (output == 'newwindow' || '_blank')
                            output = 'dataurlnewwindow';
                        else if (output == 'window')
                            output = 'datauri';
                        if (output == 'datauri')
                            doc.output(output);
                        else {
                            var tmpOut = doc.output('datauristring');
                            if (output == 'dataurlnewwindow') {
                                var fileTmpName = options.reportTitle || g.getTitle();
                                var url_with_name = tmpOut.replace("data:application/pdf;", "data:application/pdf;name=" + fileTmpName + ".pdf;");
                                var html = '<html>' +
                                    '<style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style>' +
                                    '<body>' +
                                    '<p></p>' +
                                    '<iframe type="application/pdf" src="' + url_with_name + '"></iframe>' +
                                    '</body></html>';
                                var a = window.open("about:blank", "_blank");
                                a.document.write(html);
                                a.document.close();
                            }
                        }
                    }
                });
            }
            PdfExportHelper.exportToPdf = exportToPdf;
            function createToolButton(options) {
                return {
                    title: options.title || '',
                    hint: options.hint || 'PDF',
                    cssClass: 'export-pdf-button',
                    onClick: function () { return exportToPdf(options); },
                    separator: options.separator
                };
            }
            PdfExportHelper.createToolButton = createToolButton;
            function includeJsPDF() {
                if (typeof jsPDF !== "undefined")
                    return;
                var script = $("jsPDFScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.min.js"))
                    .appendTo(document.head);
            }
            function includeAutoTable() {
                includeJsPDF();
                if (typeof jsPDF === "undefined" ||
                    typeof jsPDF.API == "undefined" ||
                    typeof jsPDF.API.autoTable !== "undefined")
                    return;
                var script = $("jsPDFAutoTableScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFAutoTableScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.plugin.autotable.min.js"))
                    .appendTo(document.head);
            }
        })(PdfExportHelper = Common.PdfExportHelper || (Common.PdfExportHelper = {}));
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var ReportDialog = /** @class */ (function (_super) {
            __extends(ReportDialog, _super);
            function ReportDialog(options) {
                var _this = _super.call(this, options) || this;
                _this.updateInterface();
                _this.loadReport(_this.options.reportKey);
                return _this;
            }
            ReportDialog.prototype.getDialogButtons = function () {
                return null;
            };
            ReportDialog.prototype.createPropertyGrid = function () {
                this.propertyGrid && this.byId('PropertyGrid').html('').attr('class', '');
                this.propertyGrid = new Serenity.PropertyGrid(this.byId('PropertyGrid'), {
                    idPrefix: this.idPrefix,
                    useCategories: true,
                    items: this.report.Properties
                }).init(null);
            };
            ReportDialog.prototype.loadReport = function (reportKey) {
                var _this = this;
                Q.serviceCall({
                    url: Q.resolveUrl('~/Report/Retrieve'),
                    request: {
                        ReportKey: reportKey
                    },
                    onSuccess: function (response) {
                        _this.report = response;
                        _this.element.dialog().dialog('option', 'title', _this.report.Title);
                        _this.createPropertyGrid();
                        _this.propertyGrid.load(_this.report.InitialSettings || {});
                        _this.updateInterface();
                        _this.dialogOpen();
                    }
                });
            };
            ReportDialog.prototype.updateInterface = function () {
                this.toolbar.findButton('print-preview-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-pdf-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-xlsx-button')
                    .toggle(this.report && this.report.IsDataOnlyReport);
            };
            ReportDialog.prototype.executeReport = function (target, ext, download) {
                if (!this.validateForm()) {
                    return;
                }
                var opt = {};
                this.propertyGrid.save(opt);
                Common.ReportHelper.execute({
                    download: download,
                    reportKey: this.report.ReportKey,
                    extension: ext,
                    target: target,
                    params: opt
                });
            };
            ReportDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                return [
                    {
                        title: 'Preview',
                        cssClass: 'print-preview-button',
                        onClick: function () { return _this.executeReport('_blank', null, false); }
                    },
                    {
                        title: 'PDF',
                        cssClass: 'export-pdf-button',
                        onClick: function () { return _this.executeReport('_blank', 'pdf', true); }
                    },
                    {
                        title: 'Excel',
                        cssClass: 'export-xlsx-button',
                        onClick: function () { return _this.executeReport('_blank', 'xlsx', true); }
                    }
                ];
            };
            return ReportDialog;
        }(Serenity.TemplatedDialog));
        Common.ReportDialog = ReportDialog;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var ReportHelper;
        (function (ReportHelper) {
            function createToolButton(options) {
                return {
                    title: Q.coalesce(options.title, 'Report'),
                    cssClass: Q.coalesce(options.cssClass, 'print-button'),
                    icon: options.icon,
                    onClick: function () {
                        ReportHelper.execute(options);
                    }
                };
            }
            ReportHelper.createToolButton = createToolButton;
            function execute(options) {
                var opt = options.getParams ? options.getParams() : options.params;
                Q.postToUrl({
                    url: '~/Report/' + (options.download ? 'Download' : 'Render'),
                    params: {
                        key: options.reportKey,
                        ext: Q.coalesce(options.extension, 'pdf'),
                        opt: opt ? $.toJSON(opt) : ''
                    },
                    target: Q.coalesce(options.target, '_blank')
                });
            }
            ReportHelper.execute = execute;
        })(ReportHelper = Common.ReportHelper || (Common.ReportHelper = {}));
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var ReportPage = /** @class */ (function (_super) {
            __extends(ReportPage, _super);
            function ReportPage(element) {
                var _this = _super.call(this, element) || this;
                $('.report-link', element).click(function (e) { return _this.reportLinkClick(e); });
                $('div.line', element).click(function (e) { return _this.categoryClick(e); });
                new Serenity.QuickSearchInput($('.s-QuickSearchBar input', element), {
                    onSearch: function (field, text, done) {
                        _this.updateMatchFlags(text);
                        done(true);
                    }
                });
                return _this;
            }
            ReportPage.prototype.updateMatchFlags = function (text) {
                var liList = $('.report-list', this.element).find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (!text) {
                    liList.children('ul').hide();
                    liList.show().removeClass('expanded');
                    return;
                }
                text = Select2.util.stripDiacritics(text).toUpperCase();
                var reportItems = liList.filter('.report-item');
                reportItems.each(function (ix, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    if (title.indexOf(text) < 0) {
                        x.addClass('non-match');
                    }
                });
                var matchingItems = reportItems.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                if (visibles.length <= 100) {
                    liList.children('ul').show();
                    liList.addClass('expanded');
                }
            };
            ReportPage.prototype.categoryClick = function (e) {
                var li = $(e.target).closest('li');
                if (li.hasClass('expanded')) {
                    li.find('ul').hide('fast');
                    li.removeClass('expanded');
                    li.find('li').removeClass('expanded');
                }
                else {
                    li.addClass('expanded');
                    li.children('ul').show('fast');
                    if (li.children('ul').children('li').length === 1 && !li.children('ul').children('li').hasClass('expanded')) {
                        li.children('ul').children('li').children('.line').click();
                    }
                }
            };
            ReportPage.prototype.reportLinkClick = function (e) {
                e.preventDefault();
                new Common.ReportDialog({
                    reportKey: $(e.target).data('key')
                }).dialogOpen();
            };
            return ReportPage;
        }(Serenity.Widget));
        Common.ReportPage = ReportPage;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Common;
    (function (Common) {
        var UserPreferenceStorage = /** @class */ (function () {
            function UserPreferenceStorage() {
            }
            UserPreferenceStorage.prototype.getItem = function (key) {
                var value;
                Common.UserPreferenceService.Retrieve({
                    PreferenceType: "UserPreferenceStorage",
                    Name: key
                }, function (response) { return value = response.Value; }, {
                    async: false
                });
                return value;
            };
            UserPreferenceStorage.prototype.setItem = function (key, data) {
                Common.UserPreferenceService.Update({
                    PreferenceType: "UserPreferenceStorage",
                    Name: key,
                    Value: data
                });
            };
            return UserPreferenceStorage;
        }());
        Common.UserPreferenceStorage = UserPreferenceStorage;
    })(Common = SCMONLINE.Common || (SCMONLINE.Common = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(ProcParticipantDialog, _super);
            function ProcParticipantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Default.ProcParticipantForm(_this.idPrefix);
                return _this;
            }
            ProcParticipantDialog.prototype.getFormKey = function () { return Default.ProcParticipantForm.formKey; };
            ProcParticipantDialog.prototype.getIdProperty = function () { return Default.ProcParticipantRow.idProperty; };
            ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Default.ProcParticipantRow.localTextPrefix; };
            ProcParticipantDialog.prototype.getNameProperty = function () { return Default.ProcParticipantRow.nameProperty; };
            ProcParticipantDialog.prototype.getService = function () { return Default.ProcParticipantService.baseUrl; };
            ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantDialog);
            return ProcParticipantDialog;
        }(_Ext.DialogBase));
        Default.ProcParticipantDialog = ProcParticipantDialog;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(ProcParticipantGrid, _super);
            function ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Default.ProcParticipant'; };
            ProcParticipantGrid.prototype.getDialogType = function () { return Default.ProcParticipantDialog; };
            ProcParticipantGrid.prototype.getIdProperty = function () { return Default.ProcParticipantRow.idProperty; };
            ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Default.ProcParticipantRow.localTextPrefix; };
            ProcParticipantGrid.prototype.getService = function () { return Default.ProcParticipantService.baseUrl; };
            ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantGrid);
            return ProcParticipantGrid;
        }(_Ext.GridBase));
        Default.ProcParticipantGrid = ProcParticipantGrid;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(ProcParticipantItemDialog, _super);
            function ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Default.ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            ProcParticipantItemDialog.prototype.getFormKey = function () { return Default.ProcParticipantItemForm.formKey; };
            ProcParticipantItemDialog.prototype.getIdProperty = function () { return Default.ProcParticipantItemRow.idProperty; };
            ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Default.ProcParticipantItemRow.localTextPrefix; };
            ProcParticipantItemDialog.prototype.getNameProperty = function () { return Default.ProcParticipantItemRow.nameProperty; };
            ProcParticipantItemDialog.prototype.getService = function () { return Default.ProcParticipantItemService.baseUrl; };
            ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantItemDialog);
            return ProcParticipantItemDialog;
        }(_Ext.DialogBase));
        Default.ProcParticipantItemDialog = ProcParticipantItemDialog;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(ProcParticipantItemGrid, _super);
            function ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Default.ProcParticipantItem'; };
            ProcParticipantItemGrid.prototype.getDialogType = function () { return Default.ProcParticipantItemDialog; };
            ProcParticipantItemGrid.prototype.getIdProperty = function () { return Default.ProcParticipantItemRow.idProperty; };
            ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Default.ProcParticipantItemRow.localTextPrefix; };
            ProcParticipantItemGrid.prototype.getService = function () { return Default.ProcParticipantItemService.baseUrl; };
            ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantItemGrid);
            return ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Default.ProcParticipantItemGrid = ProcParticipantItemGrid;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcurementDialog = /** @class */ (function (_super) {
            __extends(ProcurementDialog, _super);
            function ProcurementDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Default.ProcurementForm(_this.idPrefix);
                return _this;
            }
            ProcurementDialog.prototype.getFormKey = function () { return Default.ProcurementForm.formKey; };
            ProcurementDialog.prototype.getIdProperty = function () { return Default.ProcurementRow.idProperty; };
            ProcurementDialog.prototype.getLocalTextPrefix = function () { return Default.ProcurementRow.localTextPrefix; };
            ProcurementDialog.prototype.getNameProperty = function () { return Default.ProcurementRow.nameProperty; };
            ProcurementDialog.prototype.getService = function () { return Default.ProcurementService.baseUrl; };
            ProcurementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementDialog);
            return ProcurementDialog;
        }(_Ext.DialogBase));
        Default.ProcurementDialog = ProcurementDialog;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Default;
    (function (Default) {
        var ProcurementGrid = /** @class */ (function (_super) {
            __extends(ProcurementGrid, _super);
            function ProcurementGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcurementGrid.prototype.getColumnsKey = function () { return 'Default.Procurement'; };
            ProcurementGrid.prototype.getDialogType = function () { return Default.ProcurementDialog; };
            ProcurementGrid.prototype.getIdProperty = function () { return Default.ProcurementRow.idProperty; };
            ProcurementGrid.prototype.getLocalTextPrefix = function () { return Default.ProcurementRow.localTextPrefix; };
            ProcurementGrid.prototype.getService = function () { return Default.ProcurementService.baseUrl; };
            ProcurementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementGrid);
            return ProcurementGrid;
        }(_Ext.GridBase));
        Default.ProcurementGrid = ProcurementGrid;
    })(Default = SCMONLINE.Default || (SCMONLINE.Default = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var NotificationDialog = /** @class */ (function (_super) {
            __extends(NotificationDialog, _super);
            function NotificationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inbox.NotificationForm(_this.idPrefix);
                return _this;
                //constructor() {
                //    super();
                //    this.texteditor = new Serenity.HtmlNoteContentEditor(this.byId('Text'));
                //}
                //protected getTemplate() {
                //    return (
                //        "<form id='~_Form' class='s-Form'>" +
                //        "<textarea id='~_Text' class='required'></textarea>" +
                //        "</form>");
                //}
                //protected getDialogOptions() {
                //    var opt = super.getDialogOptions();
                //    opt.buttons = [{
                //        text: Q.text('Dialogs.OkButton'),
                //        click: () => {
                //            if (!this.validateForm()) {
                //                return;
                //            }
                //            this.okClick && this.okClick();
                //        }
                //    }, {
                //        text: Q.text('Dialogs.CancelButton'),
                //        click: () => this.dialogClose()
                //    }
                //    ];
                //    return opt;
                //}
                //get text(): string {
                //    return this.texteditor.value;
                //}
                //set text(value: string) {
                //    this.texteditor.value = value;
                //}
                //public okClick: () => void;
            }
            NotificationDialog.prototype.getFormKey = function () { return Inbox.NotificationForm.formKey; };
            NotificationDialog.prototype.getIdProperty = function () { return Inbox.NotificationRow.idProperty; };
            NotificationDialog.prototype.getLocalTextPrefix = function () { return Inbox.NotificationRow.localTextPrefix; };
            NotificationDialog.prototype.getNameProperty = function () { return Inbox.NotificationRow.nameProperty; };
            NotificationDialog.prototype.getService = function () { return Inbox.NotificationService.baseUrl; };
            NotificationDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(0, 4);
                return buttons;
            };
            NotificationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], NotificationDialog);
            return NotificationDialog;
        }(_Ext.DialogBase));
        Inbox.NotificationDialog = NotificationDialog;
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Inbox;
    (function (Inbox) {
        var NotificationGrid = /** @class */ (function (_super) {
            __extends(NotificationGrid, _super);
            function NotificationGrid(container) {
                return _super.call(this, container) || this;
            }
            NotificationGrid.prototype.getColumnsKey = function () { return 'Inbox.Notification'; };
            NotificationGrid.prototype.getDialogType = function () { return Inbox.NotificationDialog; };
            NotificationGrid.prototype.getIdProperty = function () { return Inbox.NotificationRow.idProperty; };
            NotificationGrid.prototype.getLocalTextPrefix = function () { return Inbox.NotificationRow.localTextPrefix; };
            NotificationGrid.prototype.getService = function () { return Inbox.NotificationService.baseUrl; };
            NotificationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(0, 4);
                return buttons;
            };
            NotificationGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(0, 3);
                columns.splice(1, 2);
                columns.splice(2, 3);
                return columns;
            };
            NotificationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], NotificationGrid);
            return NotificationGrid;
        }(_Ext.GridBase));
        Inbox.NotificationGrid = NotificationGrid;
    })(Inbox = SCMONLINE.Inbox || (SCMONLINE.Inbox = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryDialog = /** @class */ (function (_super) {
            __extends(CategoryDialog, _super);
            function CategoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Northwind.CategoryForm(_this.idPrefix);
                return _this;
            }
            CategoryDialog.prototype.getFormKey = function () { return Northwind.CategoryForm.formKey; };
            CategoryDialog.prototype.getIdProperty = function () { return Northwind.CategoryRow.idProperty; };
            CategoryDialog.prototype.getLocalTextPrefix = function () { return Northwind.CategoryRow.localTextPrefix; };
            CategoryDialog.prototype.getNameProperty = function () { return Northwind.CategoryRow.nameProperty; };
            CategoryDialog.prototype.getService = function () { return Northwind.CategoryService.baseUrl; };
            CategoryDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CategoryDialog);
            return CategoryDialog;
        }(Serenity.EntityDialog));
        Northwind.CategoryDialog = CategoryDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CategoryGrid = /** @class */ (function (_super) {
            __extends(CategoryGrid, _super);
            function CategoryGrid(container) {
                return _super.call(this, container) || this;
            }
            CategoryGrid.prototype.getColumnsKey = function () { return "Northwind.Category"; };
            CategoryGrid.prototype.getDialogType = function () { return Northwind.CategoryDialog; };
            CategoryGrid.prototype.getIdProperty = function () { return Northwind.CategoryRow.idProperty; };
            CategoryGrid.prototype.getLocalTextPrefix = function () { return Northwind.CategoryRow.localTextPrefix; };
            CategoryGrid.prototype.getService = function () { return Northwind.CategoryService.baseUrl; };
            CategoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CategoryGrid);
            return CategoryGrid;
        }(Serenity.EntityGrid));
        Northwind.CategoryGrid = CategoryGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerDialog = /** @class */ (function (_super) {
            __extends(CustomerDialog, _super);
            function CustomerDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Northwind.CustomerForm(_this.idPrefix);
                _this.ordersGrid = new Northwind.CustomerOrdersGrid(_this.byId('OrdersGrid'));
                // force order dialog to open in Dialog mode instead of Panel mode
                // which is set as default on OrderDialog with @panelAttribute
                _this.ordersGrid.openDialogsAsPanel = false;
                _this.byId('NoteList').closest('.field').hide().end().appendTo(_this.byId('TabNotes'));
                SCMONLINE.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            CustomerDialog.prototype.getFormKey = function () { return Northwind.CustomerForm.formKey; };
            CustomerDialog.prototype.getIdProperty = function () { return Northwind.CustomerRow.idProperty; };
            CustomerDialog.prototype.getLocalTextPrefix = function () { return Northwind.CustomerRow.localTextPrefix; };
            CustomerDialog.prototype.getNameProperty = function () { return Northwind.CustomerRow.nameProperty; };
            CustomerDialog.prototype.getService = function () { return Northwind.CustomerService.baseUrl; };
            CustomerDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            CustomerDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            CustomerDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Orders', this.isNewOrDeleted());
                this.ordersGrid.customerID = entity.CustomerID;
            };
            CustomerDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                Q.reloadLookup('Northwind.Customer');
            };
            CustomerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], CustomerDialog);
            return CustomerDialog;
        }(Serenity.EntityDialog));
        Northwind.CustomerDialog = CustomerDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerEditor = /** @class */ (function (_super) {
            __extends(CustomerEditor, _super);
            function CustomerEditor(hidden) {
                return _super.call(this, hidden) || this;
            }
            CustomerEditor.prototype.getLookupKey = function () {
                return Northwind.CustomerRow.lookupKey;
            };
            CustomerEditor.prototype.getItemText = function (item, lookup) {
                return _super.prototype.getItemText.call(this, item, lookup) + ' [' + item.CustomerID + ']';
            };
            CustomerEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], CustomerEditor);
            return CustomerEditor;
        }(Serenity.LookupEditorBase));
        Northwind.CustomerEditor = CustomerEditor;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerGrid = /** @class */ (function (_super) {
            __extends(CustomerGrid, _super);
            function CustomerGrid(container) {
                return _super.call(this, container) || this;
            }
            CustomerGrid.prototype.getColumnsKey = function () { return "Northwind.Customer"; };
            CustomerGrid.prototype.getDialogType = function () { return Northwind.CustomerDialog; };
            CustomerGrid.prototype.getIdProperty = function () { return Northwind.CustomerRow.idProperty; };
            CustomerGrid.prototype.getLocalTextPrefix = function () { return Northwind.CustomerRow.localTextPrefix; };
            CustomerGrid.prototype.getService = function () { return Northwind.CustomerService.baseUrl; };
            CustomerGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(SCMONLINE.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    service: 'Northwind/Customer/ListExcel',
                    separator: true
                }));
                buttons.push(SCMONLINE.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); }
                }));
                return buttons;
            };
            CustomerGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], CustomerGrid);
            return CustomerGrid;
        }(Serenity.EntityGrid));
        Northwind.CustomerGrid = CustomerGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderDialog = /** @class */ (function (_super) {
            __extends(OrderDialog, _super);
            function OrderDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Northwind.OrderForm(_this.idPrefix);
                return _this;
            }
            OrderDialog.prototype.getFormKey = function () { return Northwind.OrderForm.formKey; };
            OrderDialog.prototype.getIdProperty = function () { return Northwind.OrderRow.idProperty; };
            OrderDialog.prototype.getLocalTextPrefix = function () { return Northwind.OrderRow.localTextPrefix; };
            OrderDialog.prototype.getNameProperty = function () { return Northwind.OrderRow.nameProperty; };
            OrderDialog.prototype.getService = function () { return Northwind.OrderService.baseUrl; };
            OrderDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push(SCMONLINE.Common.ReportHelper.createToolButton({
                    title: 'Invoice',
                    cssClass: 'export-pdf-button',
                    reportKey: 'Northwind.OrderDetail',
                    getParams: function () { return ({
                        OrderID: _this.get_entityId()
                    }); }
                }));
                return buttons;
            };
            OrderDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('export-pdf-button').toggle(this.isEditMode());
            };
            OrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], OrderDialog);
            return OrderDialog;
        }(Serenity.EntityDialog));
        Northwind.OrderDialog = OrderDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../Order/OrderDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerOrderDialog = /** @class */ (function (_super) {
            __extends(CustomerOrderDialog, _super);
            function CustomerOrderDialog() {
                return _super.call(this) || this;
            }
            CustomerOrderDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.CustomerID, true);
            };
            CustomerOrderDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerOrderDialog);
            return CustomerOrderDialog;
        }(Northwind.OrderDialog));
        Northwind.CustomerOrderDialog = CustomerOrderDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderGrid = /** @class */ (function (_super) {
            __extends(OrderGrid, _super);
            function OrderGrid(container) {
                return _super.call(this, container) || this;
            }
            OrderGrid.prototype.getColumnsKey = function () { return "Northwind.Order"; };
            OrderGrid.prototype.getDialogType = function () { return Northwind.OrderDialog; };
            OrderGrid.prototype.getIdProperty = function () { return Northwind.OrderRow.idProperty; };
            OrderGrid.prototype.getLocalTextPrefix = function () { return Northwind.OrderRow.localTextPrefix; };
            OrderGrid.prototype.getService = function () { return Northwind.OrderService.baseUrl; };
            OrderGrid.prototype.getQuickFilters = function () {
                var _this = this;
                var filters = _super.prototype.getQuickFilters.call(this);
                filters.push({
                    type: Serenity.LookupEditor,
                    options: {
                        lookupKey: Northwind.ProductRow.lookupKey
                    },
                    field: 'ProductID',
                    title: 'Contains Product in Details',
                    handler: function (w) {
                        _this.view.params.ProductID = Q.toId(w.value);
                    },
                    cssClass: 'hidden-xs'
                });
                return filters;
            };
            OrderGrid.prototype.createQuickFilters = function () {
                _super.prototype.createQuickFilters.call(this);
                this.shippingStateFilter = this.findQuickFilter(Serenity.EnumEditor, "ShippingState" /* ShippingState */);
            };
            OrderGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(SCMONLINE.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: Northwind.OrderService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push(SCMONLINE.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); }
                }));
                return buttons;
            };
            OrderGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(1, 0, {
                    field: 'Print Invoice',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action print-invoice" title="invoice">' +
                        '<i class="fa fa-file-pdf-o text-red"></i></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            OrderGrid.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                // if user clicks "i" element, e.g. icon
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('print-invoice')) {
                        SCMONLINE.Common.ReportHelper.execute({
                            reportKey: 'Northwind.OrderDetail',
                            params: {
                                OrderID: item.OrderID
                            }
                        });
                    }
                }
            };
            OrderGrid.prototype.set_shippingState = function (value) {
                this.shippingStateFilter.set_value(value == null ? '' : value.toString());
            };
            OrderGrid.prototype.addButtonClick = function () {
                var eq = this.view.params.EqualityFilter;
                this.editItem({
                    CustomerID: eq ? eq.CustomerID : null
                });
            };
            OrderGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], OrderGrid);
            return OrderGrid;
        }(Serenity.EntityGrid));
        Northwind.OrderGrid = OrderGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var CustomerOrdersGrid = /** @class */ (function (_super) {
            __extends(CustomerOrdersGrid, _super);
            function CustomerOrdersGrid(container) {
                return _super.call(this, container) || this;
            }
            CustomerOrdersGrid.prototype.getDialogType = function () { return Northwind.CustomerOrderDialog; };
            CustomerOrdersGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this).filter(function (x) { return x.field !== "CustomerCompanyName" /* CustomerCompanyName */; });
            };
            CustomerOrdersGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CustomerOrdersGrid.prototype.addButtonClick = function () {
                this.editItem({ CustomerID: this.customerID });
            };
            CustomerOrdersGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CustomerOrdersGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.customerID;
            };
            Object.defineProperty(CustomerOrdersGrid.prototype, "customerID", {
                get: function () {
                    return this._customerID;
                },
                set: function (value) {
                    if (this._customerID !== value) {
                        this._customerID = value;
                        this.setEquality('CustomerID', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CustomerOrdersGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerOrdersGrid);
            return CustomerOrdersGrid;
        }(Northwind.OrderGrid));
        Northwind.CustomerOrdersGrid = CustomerOrdersGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var EmployeeListFormatter = /** @class */ (function () {
            function EmployeeListFormatter() {
            }
            EmployeeListFormatter.prototype.format = function (ctx) {
                var idList = ctx.value;
                if (!idList || !idList.length)
                    return "";
                var byId = Northwind.EmployeeRow.getLookup().itemById;
                var z;
                return idList.map(function (x) { return ((z = byId[x]) ? z.FullName : x); }).join(", ");
            };
            EmployeeListFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], EmployeeListFormatter);
            return EmployeeListFormatter;
        }());
        Northwind.EmployeeListFormatter = EmployeeListFormatter;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var EmployeeFormatter = /** @class */ (function () {
            function EmployeeFormatter() {
            }
            EmployeeFormatter.prototype.format = function (ctx) {
                var text = Q.htmlEncode(ctx.value);
                if (!this.genderProperty) {
                    return text;
                }
                var gender = ctx.item[this.genderProperty];
                return "<span class='" + ((gender === Northwind.Gender.Female) ?
                    'employee-symbol female' : 'employee-symbol male') +
                    "'>" + text + '</span>';
            };
            EmployeeFormatter.prototype.initializeColumn = function (column) {
                column.referencedFields = column.referencedFields || [];
                if (this.genderProperty)
                    column.referencedFields.push(this.genderProperty);
            };
            __decorate([
                Serenity.Decorators.option()
            ], EmployeeFormatter.prototype, "genderProperty", void 0);
            EmployeeFormatter = __decorate([
                Serenity.Decorators.registerFormatter([Serenity.ISlickFormatter, Serenity.IInitializeColumn])
            ], EmployeeFormatter);
            return EmployeeFormatter;
        }());
        Northwind.EmployeeFormatter = EmployeeFormatter;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var NoteDialog = /** @class */ (function (_super) {
            __extends(NoteDialog, _super);
            function NoteDialog() {
                var _this = _super.call(this) || this;
                _this.textEditor = new Serenity.HtmlNoteContentEditor(_this.byId('Text'));
                return _this;
            }
            NoteDialog.prototype.getTemplate = function () {
                return ("<form id='~_Form' class='s-Form'>" +
                    "<textarea id='~_Text' class='required'></textarea>" +
                    "</form>");
            };
            NoteDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [{
                        text: Q.text('Dialogs.OkButton'),
                        click: function () {
                            if (!_this.validateForm()) {
                                return;
                            }
                            _this.okClick && _this.okClick();
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                return opt;
            };
            Object.defineProperty(NoteDialog.prototype, "text", {
                get: function () {
                    return this.textEditor.value;
                },
                set: function (value) {
                    this.textEditor.value = value;
                },
                enumerable: true,
                configurable: true
            });
            NoteDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], NoteDialog);
            return NoteDialog;
        }(Serenity.TemplatedDialog));
        Northwind.NoteDialog = NoteDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var NotesEditor = /** @class */ (function (_super) {
            __extends(NotesEditor, _super);
            function NotesEditor(div) {
                var _this = _super.call(this, div) || this;
                new Serenity.Toolbar(_this.byId('Toolbar'), {
                    buttons: [{
                            title: 'Add Note',
                            cssClass: 'add-button',
                            onClick: function (e) {
                                e.preventDefault();
                                _this.addClick();
                            }
                        }]
                });
                return _this;
            }
            NotesEditor.prototype.getTemplate = function () {
                return "<div><div id='~_Toolbar'></div><ul id='~_NoteList'></ul></div>";
            };
            NotesEditor.prototype.updateContent = function () {
                var _this = this;
                var noteList = this.byId('NoteList');
                noteList.children().remove();
                if (this.items) {
                    var index = 0;
                    for (var t1 = 0; t1 < this.items.length; t1++) {
                        var item = this.items[t1];
                        var li = $('<li/>');
                        $('<div/>').addClass('note-text').html(Q.coalesce(item.Text, '')).appendTo(li);
                        $('<a/>').attr('href', '#').addClass('note-date')
                            .text(item.InsertUserDisplayName + ' - ' +
                            Q.formatDate(item.InsertDate, 'g'))
                            .data('index', index).appendTo(li).click(function (e) { return _this.editClick(e); });
                        $('<a/>').attr('href', '#').addClass('note-delete')
                            .attr('title', 'delete note').data('index', index)
                            .appendTo(li).click(function (e) { return _this.deleteClick(e); });
                        li.appendTo(noteList);
                        index++;
                    }
                }
            };
            NotesEditor.prototype.addClick = function () {
                var _this = this;
                var dlg = new Northwind.NoteDialog();
                dlg.dialogTitle = 'Add Note';
                dlg.okClick = function () {
                    var text = Q.trimToNull(dlg.text);
                    if (text == null) {
                        return;
                    }
                    _this.items = _this.items || [];
                    Q.insert(_this.items, 0, {
                        Text: text,
                        InsertUserDisplayName: SCMONLINE.Authorization.userDefinition.DisplayName,
                        InsertDate: Q.formatISODateTimeUTC(new Date())
                    });
                    _this.updateContent();
                    dlg.dialogClose();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                };
                dlg.dialogOpen();
            };
            NotesEditor.prototype.editClick = function (e) {
                var _this = this;
                e.preventDefault();
                var index = $(e.target).data('index');
                var old = this.items[index];
                var dlg = new Northwind.NoteDialog();
                dlg.dialogTitle = 'Edit Note';
                dlg.text = old.Text;
                dlg.okClick = function () {
                    var text = Q.trimToNull(dlg.text);
                    if (!text) {
                        return;
                    }
                    _this.items[index].Text = text;
                    _this.updateContent();
                    dlg.dialogClose();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                };
                dlg.dialogOpen();
            };
            NotesEditor.prototype.deleteClick = function (e) {
                var _this = this;
                e.preventDefault();
                var index = $(e.target).data('index');
                Q.confirm('Delete this note?', function () {
                    _this.items.splice(index, 1);
                    _this.updateContent();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                });
            };
            Object.defineProperty(NotesEditor.prototype, "value", {
                get: function () {
                    return this.items;
                },
                set: function (value) {
                    this.items = value || [];
                    this.set_isDirty(false);
                    this.updateContent();
                },
                enumerable: true,
                configurable: true
            });
            NotesEditor.prototype.getEditValue = function (prop, target) {
                target[prop.name] = this.value;
            };
            NotesEditor.prototype.setEditValue = function (source, prop) {
                this.value = source[prop.name] || [];
            };
            NotesEditor.prototype.get_isDirty = function () {
                return this.isDirty;
            };
            NotesEditor.prototype.set_isDirty = function (value) {
                this.isDirty = value;
            };
            NotesEditor = __decorate([
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.element("<div/>")
            ], NotesEditor);
            return NotesEditor;
        }(Serenity.TemplatedWidget));
        Northwind.NotesEditor = NotesEditor;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var FreightFormatter = /** @class */ (function () {
            function FreightFormatter() {
            }
            FreightFormatter.prototype.format = function (ctx) {
                return "<span class='freight-symbol'>" + Q.htmlEncode(ctx.value) + '</span>';
            };
            FreightFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], FreightFormatter);
            return FreightFormatter;
        }());
        Northwind.FreightFormatter = FreightFormatter;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderDetailDialog = /** @class */ (function (_super) {
            __extends(OrderDetailDialog, _super);
            function OrderDetailDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Northwind.OrderDetailForm(_this.idPrefix);
                _this.form.ProductID.changeSelect2(function (e) {
                    var productID = Q.toId(_this.form.ProductID.value);
                    if (productID != null) {
                        _this.form.UnitPrice.value = Northwind.ProductRow.getLookup().itemById[productID].UnitPrice;
                    }
                });
                _this.form.Discount.addValidationRule(_this.uniqueName, function (e) {
                    var price = _this.form.UnitPrice.value;
                    var quantity = _this.form.Quantity.value;
                    var discount = _this.form.Discount.value;
                    if (price != null && quantity != null && discount != null &&
                        discount > 0 && discount >= price * quantity) {
                        return "Discount can't be higher than total price!";
                    }
                });
                return _this;
            }
            OrderDetailDialog.prototype.getFormKey = function () { return Northwind.OrderDetailForm.formKey; };
            OrderDetailDialog.prototype.getLocalTextPrefix = function () { return Northwind.OrderDetailRow.localTextPrefix; };
            OrderDetailDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OrderDetailDialog);
            return OrderDetailDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Northwind.OrderDetailDialog = OrderDetailDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var OrderDetailsEditor = /** @class */ (function (_super) {
            __extends(OrderDetailsEditor, _super);
            function OrderDetailsEditor(container) {
                return _super.call(this, container) || this;
            }
            OrderDetailsEditor.prototype.getColumnsKey = function () { return "Northwind.OrderDetail"; };
            OrderDetailsEditor.prototype.getDialogType = function () { return Northwind.OrderDetailDialog; };
            OrderDetailsEditor.prototype.getLocalTextPrefix = function () { return Northwind.OrderDetailRow.localTextPrefix; };
            OrderDetailsEditor.prototype.validateEntity = function (row, id) {
                row.ProductID = Q.toId(row.ProductID);
                var sameProduct = Q.tryFirst(this.view.getItems(), function (x) { return x.ProductID === row.ProductID; });
                if (sameProduct && this.id(sameProduct) !== id) {
                    Q.alert('This product is already in order details!');
                    return false;
                }
                row.ProductName = Northwind.ProductRow.getLookup().itemById[row.ProductID].ProductName;
                row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            OrderDetailsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], OrderDetailsEditor);
            return OrderDetailsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Northwind.OrderDetailsEditor = OrderDetailsEditor;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductDialog = /** @class */ (function (_super) {
            __extends(ProductDialog, _super);
            function ProductDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Northwind.ProductForm(_this.idPrefix);
                return _this;
            }
            ProductDialog.prototype.getFormKey = function () { return Northwind.ProductForm.formKey; };
            ProductDialog.prototype.getIdProperty = function () { return Northwind.ProductRow.idProperty; };
            ProductDialog.prototype.getLocalTextPrefix = function () { return Northwind.ProductRow.localTextPrefix; };
            ProductDialog.prototype.getNameProperty = function () { return Northwind.ProductRow.nameProperty; };
            ProductDialog.prototype.getService = function () { return Northwind.ProductService.baseUrl; };
            ProductDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.maximizable()
            ], ProductDialog);
            return ProductDialog;
        }(Serenity.EntityDialog));
        Northwind.ProductDialog = ProductDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ProductGrid = /** @class */ (function (_super) {
            __extends(ProductGrid, _super);
            function ProductGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.pendingChanges = {};
                _this.slickContainer.on('change', '.edit:input', function (e) { return _this.inputsChange(e); });
                return _this;
            }
            ProductGrid.prototype.getColumnsKey = function () { return "Northwind.Product"; };
            ProductGrid.prototype.getDialogType = function () { return Northwind.ProductDialog; };
            ProductGrid.prototype.getIdProperty = function () { return Northwind.ProductRow.idProperty; };
            ProductGrid.prototype.getLocalTextPrefix = function () { return Northwind.ProductRow.localTextPrefix; };
            ProductGrid.prototype.getService = function () { return Northwind.ProductService.baseUrl; };
            ProductGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push(SCMONLINE.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: Northwind.ProductService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push(SCMONLINE.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    reportTitle: 'Product List',
                    columnTitles: {
                        'Discontinued': 'Dis.',
                    },
                    tableOptions: {
                        columnStyles: {
                            ProductID: {
                                columnWidth: 25,
                                halign: 'right'
                            },
                            Discountinued: {
                                columnWidth: 25
                            }
                        }
                    }
                }));
                buttons.push({
                    title: 'Save Changes',
                    cssClass: 'apply-changes-button disabled',
                    onClick: function (e) { return _this.saveClick(); },
                    separator: true
                });
                return buttons;
            };
            ProductGrid.prototype.onViewProcessData = function (response) {
                this.pendingChanges = {};
                this.setSaveButtonState();
                return _super.prototype.onViewProcessData.call(this, response);
            };
            // PLEASE NOTE! Inline editing in grids is not something Serenity supports nor recommends.
            // SlickGrid has some set of limitations, UI is very hard to use on some devices like mobile, 
            // custom widgets and validations are not possible, and as a bonus the code can become a mess.
            // 
            // This was just a sample how-to after much requests, and is not supported. 
            // This is all we can offer, please don't ask us to Guide you...
            /**
             * It would be nice if we could use autonumeric, Serenity editors etc. here, to control input validation,
             * but it's not supported by SlickGrid as we are only allowed to return a string, and should attach
             * no event handlers to rendered cell contents
             */
            ProductGrid.prototype.numericInputFormatter = function (ctx) {
                var klass = 'edit numeric';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductID];
                if (pending && pending[ctx.column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, ctx.column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + ctx.column.field +
                    "' value='" + Q.formatNumber(value, '0.##') + "'/>";
            };
            ProductGrid.prototype.stringInputFormatter = function (ctx) {
                var klass = 'edit string';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductID];
                var column = ctx.column;
                if (pending && pending[column.field] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, column.field);
                return "<input type='text' class='" + klass +
                    "' data-field='" + column.field +
                    "' value='" + Q.attrEncode(value) +
                    "' maxlength='" + column.sourceItem.maxLength + "'/>";
            };
            /**
             * Sorry but you cannot use LookupEditor, e.g. Select2 here, only possible is a SELECT element
             */
            ProductGrid.prototype.selectFormatter = function (ctx, idField, lookup) {
                var klass = 'edit';
                var item = ctx.item;
                var pending = this.pendingChanges[item.ProductID];
                var column = ctx.column;
                if (pending && pending[idField] !== undefined) {
                    klass += ' dirty';
                }
                var value = this.getEffectiveValue(item, idField);
                var markup = "<select class='" + klass +
                    "' data-field='" + idField +
                    "' style='width: 100%; max-width: 100%'>";
                for (var _i = 0, _a = lookup.items; _i < _a.length; _i++) {
                    var c = _a[_i];
                    var id = c[lookup.idField];
                    markup += "<option value='" + Q.attrEncode(id) + "'";
                    if (id == value) {
                        markup += " selected";
                    }
                    markup += ">" + Q.htmlEncode(c[lookup.textField]) + "</option>";
                }
                return markup + "</select>";
            };
            ProductGrid.prototype.getEffectiveValue = function (item, field) {
                var pending = this.pendingChanges[item.ProductID];
                if (pending && pending[field] !== undefined) {
                    return pending[field];
                }
                return item[field];
            };
            ProductGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                var num = function (ctx) { return _this.numericInputFormatter(ctx); };
                var str = function (ctx) { return _this.stringInputFormatter(ctx); };
                Q.first(columns, function (x) { return x.field === 'QuantityPerUnit'; }).format = str;
                var category = Q.first(columns, function (x) { return x.field === "CategoryName" /* CategoryName */; });
                category.referencedFields = ["CategoryID" /* CategoryID */];
                category.format = function (ctx) { return _this.selectFormatter(ctx, "CategoryID" /* CategoryID */, Northwind.CategoryRow.getLookup()); };
                var supplier = Q.first(columns, function (x) { return x.field === "SupplierCompanyName" /* SupplierCompanyName */; });
                supplier.referencedFields = ["SupplierID" /* SupplierID */];
                supplier.format = function (ctx) { return _this.selectFormatter(ctx, "SupplierID" /* SupplierID */, Northwind.SupplierRow.getLookup()); };
                Q.first(columns, function (x) { return x.field === "UnitPrice" /* UnitPrice */; }).format = num;
                Q.first(columns, function (x) { return x.field === "UnitsInStock" /* UnitsInStock */; }).format = num;
                Q.first(columns, function (x) { return x.field === "UnitsOnOrder" /* UnitsOnOrder */; }).format = num;
                Q.first(columns, function (x) { return x.field === "ReorderLevel" /* ReorderLevel */; }).format = num;
                return columns;
            };
            ProductGrid.prototype.inputsChange = function (e) {
                var cell = this.slickGrid.getCellFromEvent(e);
                var item = this.itemAt(cell.row);
                var input = $(e.target);
                var field = input.data('field');
                var text = Q.coalesce(Q.trimToNull(input.val()), '0');
                var pending = this.pendingChanges[item.ProductID];
                var effective = this.getEffectiveValue(item, field);
                var oldText;
                if (input.hasClass("numeric"))
                    oldText = Q.formatNumber(effective, '0.##');
                else
                    oldText = effective;
                var value;
                if (field === 'UnitPrice') {
                    value = Q.parseDecimal(text);
                    if (value == null || isNaN(value)) {
                        Q.notifyError(Q.text('Validation.Decimal'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                }
                else if (input.hasClass("numeric")) {
                    var i = Q.parseInteger(text);
                    if (isNaN(i) || i > 32767 || i < 0) {
                        Q.notifyError(Q.text('Validation.Integer'), '', null);
                        input.val(oldText);
                        input.focus();
                        return;
                    }
                    value = i;
                }
                else
                    value = text;
                if (!pending) {
                    this.pendingChanges[item.ProductID] = pending = {};
                }
                pending[field] = value;
                item[field] = value;
                this.view.refresh();
                if (input.hasClass("numeric"))
                    value = Q.formatNumber(value, '0.##');
                input.val(value).addClass('dirty');
                this.setSaveButtonState();
            };
            ProductGrid.prototype.setSaveButtonState = function () {
                this.toolbar.findButton('apply-changes-button').toggleClass('disabled', Object.keys(this.pendingChanges).length === 0);
            };
            ProductGrid.prototype.saveClick = function () {
                if (Object.keys(this.pendingChanges).length === 0) {
                    return;
                }
                // this calls save service for all modified rows, one by one
                // you could write a batch update service
                var keys = Object.keys(this.pendingChanges);
                var current = -1;
                var self = this;
                (function saveNext() {
                    if (++current >= keys.length) {
                        self.refresh();
                        return;
                    }
                    var key = keys[current];
                    var entity = Q.deepClone(self.pendingChanges[key]);
                    entity.ProductID = key;
                    Q.serviceRequest('Northwind/Product/Update', {
                        EntityId: key,
                        Entity: entity
                    }, function (response) {
                        delete self.pendingChanges[key];
                        saveNext();
                    });
                })();
            };
            ProductGrid.prototype.getQuickFilters = function () {
                var flt = _super.prototype.getQuickFilters.call(this);
                var q = Q.parseQueryString();
                if (q["cat"]) {
                    var category = Q.tryFirst(flt, function (x) { return x.field == "CategoryID"; });
                    category.init = function (e) {
                        e.element.getWidget(Serenity.LookupEditor).value = q["cat"];
                    };
                }
                return flt;
            };
            ProductGrid = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.filterable()
            ], ProductGrid);
            return ProductGrid;
        }(Serenity.EntityGrid));
        Northwind.ProductGrid = ProductGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var RegionDialog = /** @class */ (function (_super) {
            __extends(RegionDialog, _super);
            function RegionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Northwind.RegionForm(_this.idPrefix);
                return _this;
            }
            RegionDialog.prototype.getFormKey = function () { return Northwind.RegionForm.formKey; };
            RegionDialog.prototype.getIdProperty = function () { return Northwind.RegionRow.idProperty; };
            RegionDialog.prototype.getLocalTextPrefix = function () { return Northwind.RegionRow.localTextPrefix; };
            RegionDialog.prototype.getNameProperty = function () { return Northwind.RegionRow.nameProperty; };
            RegionDialog.prototype.getService = function () { return Northwind.RegionService.baseUrl; };
            RegionDialog.prototype.getLanguages = function () {
                return SCMONLINE.LanguageList.getValue();
            };
            RegionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RegionDialog);
            return RegionDialog;
        }(Serenity.EntityDialog));
        Northwind.RegionDialog = RegionDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var RegionGrid = /** @class */ (function (_super) {
            __extends(RegionGrid, _super);
            function RegionGrid(container) {
                return _super.call(this, container) || this;
            }
            RegionGrid.prototype.getColumnsKey = function () { return "Northwind.Region"; };
            RegionGrid.prototype.getDialogType = function () { return Northwind.RegionDialog; };
            RegionGrid.prototype.getIdProperty = function () { return Northwind.RegionRow.idProperty; };
            RegionGrid.prototype.getLocalTextPrefix = function () { return Northwind.RegionRow.localTextPrefix; };
            RegionGrid.prototype.getService = function () { return Northwind.RegionService.baseUrl; };
            RegionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RegionGrid);
            return RegionGrid;
        }(Serenity.EntityGrid));
        Northwind.RegionGrid = RegionGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var PhoneEditor = /** @class */ (function (_super) {
            __extends(PhoneEditor, _super);
            function PhoneEditor(input) {
                var _this = _super.call(this, input) || this;
                _this.addValidationRule(_this.uniqueName, function (e) {
                    var value = Q.trimToNull(_this.get_value());
                    if (value == null) {
                        return null;
                    }
                    return PhoneEditor_1.validate(value, _this.multiple);
                });
                input.bind('change', function (e) {
                    if (!Serenity.WX.hasOriginalEvent(e)) {
                        return;
                    }
                    _this.formatValue();
                });
                input.bind('blur', function (e) {
                    if (_this.element.hasClass('valid')) {
                        _this.formatValue();
                    }
                });
                return _this;
            }
            PhoneEditor_1 = PhoneEditor;
            PhoneEditor.prototype.formatValue = function () {
                this.element.val(this.getFormattedValue());
            };
            PhoneEditor.prototype.getFormattedValue = function () {
                var value = this.element.val();
                if (this.multiple) {
                    return PhoneEditor_1.formatMulti(value, PhoneEditor_1.formatPhone);
                }
                return PhoneEditor_1.formatPhone(value);
            };
            PhoneEditor.prototype.get_value = function () {
                return this.getFormattedValue();
            };
            PhoneEditor.prototype.set_value = function (value) {
                this.element.val(value);
            };
            PhoneEditor.validate = function (phone, isMultiple) {
                var valid = (isMultiple ? PhoneEditor_1.isValidMulti(phone, PhoneEditor_1.isValidPhone) : PhoneEditor_1.isValidPhone(phone));
                if (valid) {
                    return null;
                }
                return Q.text((isMultiple ? 'Validation.NorthwindPhoneMultiple' : 'Validation.NorthwindPhone'));
            };
            PhoneEditor.isValidPhone = function (phone) {
                if (Q.isEmptyOrNull(phone)) {
                    return false;
                }
                phone = Q.replaceAll(Q.replaceAll(phone, ' ', ''), '-', '');
                if (phone.length < 10) {
                    return false;
                }
                if (Q.startsWith(phone, '0')) {
                    phone = phone.substring(1);
                }
                if (Q.startsWith(phone, '(') && phone.charAt(4) === ')') {
                    phone = phone.substr(1, 3) + phone.substring(5);
                }
                if (phone.length !== 10) {
                    return false;
                }
                if (Q.startsWith(phone, '0')) {
                    return false;
                }
                for (var i = 0; i < phone.length; i++) {
                    var c = phone.charAt(i);
                    if (c < '0' || c > '9') {
                        return false;
                    }
                }
                return true;
            };
            PhoneEditor.formatPhone = function (phone) {
                if (!PhoneEditor_1.isValidPhone(phone)) {
                    return phone;
                }
                phone = Q.replaceAll(Q.replaceAll(Q.replaceAll(Q.replaceAll(phone, ' ', ''), '-', ''), '(', ''), ')', '');
                if (Q.startsWith(phone, '0')) {
                    phone = phone.substring(1);
                }
                phone = '(' + phone.substr(0, 3) + ') ' + phone.substr(3, 3) + '-' + phone.substr(6, 2) + phone.substr(8, 2);
                return phone;
            };
            PhoneEditor.formatMulti = function (phone, format) {
                var phones = Q.replaceAll(phone, String.fromCharCode(59), String.fromCharCode(44)).split(String.fromCharCode(44));
                var result = '';
                for (var _i = 0, phones_1 = phones; _i < phones_1.length; _i++) {
                    var x = phones_1[_i];
                    var s = Q.trimToNull(x);
                    if (s == null) {
                        continue;
                    }
                    if (result.length > 0) {
                        result += ', ';
                    }
                    result += format(s);
                }
                return result;
            };
            PhoneEditor.isValidMulti = function (phone, check) {
                if (Q.isEmptyOrNull(phone)) {
                    return false;
                }
                var phones = Q.replaceAll(phone, String.fromCharCode(59), String.fromCharCode(44)).split(String.fromCharCode(44));
                var anyValid = false;
                for (var $t1 = 0; $t1 < phones.length; $t1++) {
                    var x = phones[$t1];
                    var s = Q.trimToNull(x);
                    if (s == null) {
                        continue;
                    }
                    if (!check(s)) {
                        return false;
                    }
                    anyValid = true;
                }
                if (!anyValid) {
                    return false;
                }
                return true;
            };
            var PhoneEditor_1;
            __decorate([
                Serenity.Decorators.option()
            ], PhoneEditor.prototype, "multiple", void 0);
            PhoneEditor = PhoneEditor_1 = __decorate([
                Serenity.Decorators.registerEditor()
            ], PhoneEditor);
            return PhoneEditor;
        }(Serenity.StringEditor));
        Northwind.PhoneEditor = PhoneEditor;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ShipperDialog = /** @class */ (function (_super) {
            __extends(ShipperDialog, _super);
            function ShipperDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Northwind.ShipperForm(_this.idPrefix);
                return _this;
            }
            ShipperDialog.prototype.getFormKey = function () { return Northwind.ShipperForm.formKey; };
            ShipperDialog.prototype.getIdProperty = function () { return Northwind.ShipperRow.idProperty; };
            ShipperDialog.prototype.getLocalTextPrefix = function () { return Northwind.ShipperRow.localTextPrefix; };
            ShipperDialog.prototype.getNameProperty = function () { return Northwind.ShipperRow.nameProperty; };
            ShipperDialog.prototype.getService = function () { return Northwind.ShipperService.baseUrl; };
            ShipperDialog.prototype.getLanguages = function () {
                return SCMONLINE.LanguageList.getValue();
            };
            ShipperDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ShipperDialog);
            return ShipperDialog;
        }(Serenity.EntityDialog));
        Northwind.ShipperDialog = ShipperDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ShipperFormatter = /** @class */ (function () {
            function ShipperFormatter() {
            }
            ShipperFormatter.prototype.format = function (ctx) {
                return "<span class='shipper-symbol shipper-" +
                    Q.replaceAll((ctx.value || '').toString(), ' ', '') +
                    "'>" + Q.htmlEncode(ctx.value) + '</span>';
            };
            ShipperFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], ShipperFormatter);
            return ShipperFormatter;
        }());
        Northwind.ShipperFormatter = ShipperFormatter;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var ShipperGrid = /** @class */ (function (_super) {
            __extends(ShipperGrid, _super);
            function ShipperGrid(container) {
                return _super.call(this, container) || this;
            }
            ShipperGrid.prototype.getColumnsKey = function () { return "Northwind.Shipper"; };
            ShipperGrid.prototype.getDialogType = function () { return Northwind.ShipperDialog; };
            ShipperGrid.prototype.getIdProperty = function () { return Northwind.ShipperRow.idProperty; };
            ShipperGrid.prototype.getLocalTextPrefix = function () { return Northwind.ShipperRow.localTextPrefix; };
            ShipperGrid.prototype.getService = function () { return Northwind.ShipperService.baseUrl; };
            ShipperGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ShipperGrid);
            return ShipperGrid;
        }(Serenity.EntityGrid));
        Northwind.ShipperGrid = ShipperGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SupplierDialog = /** @class */ (function (_super) {
            __extends(SupplierDialog, _super);
            function SupplierDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Northwind.SupplierForm(_this.idPrefix);
                return _this;
            }
            SupplierDialog.prototype.getFormKey = function () { return Northwind.SupplierForm.formKey; };
            SupplierDialog.prototype.getIdProperty = function () { return Northwind.SupplierRow.idProperty; };
            SupplierDialog.prototype.getLocalTextPrefix = function () { return Northwind.SupplierRow.localTextPrefix; };
            SupplierDialog.prototype.getNameProperty = function () { return Northwind.SupplierRow.nameProperty; };
            SupplierDialog.prototype.getService = function () { return Northwind.SupplierService.baseUrl; };
            SupplierDialog.prototype.getLanguages = function () {
                return SCMONLINE.LanguageList.getValue();
            };
            SupplierDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], SupplierDialog);
            return SupplierDialog;
        }(Serenity.EntityDialog));
        Northwind.SupplierDialog = SupplierDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var SupplierGrid = /** @class */ (function (_super) {
            __extends(SupplierGrid, _super);
            function SupplierGrid(container) {
                return _super.call(this, container) || this;
            }
            SupplierGrid.prototype.getColumnsKey = function () { return "Northwind.Supplier"; };
            SupplierGrid.prototype.getDialogType = function () { return Northwind.SupplierDialog; };
            SupplierGrid.prototype.getIdProperty = function () { return Northwind.SupplierRow.idProperty; };
            SupplierGrid.prototype.getLocalTextPrefix = function () { return Northwind.SupplierRow.localTextPrefix; };
            SupplierGrid.prototype.getService = function () { return Northwind.SupplierService.baseUrl; };
            SupplierGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SupplierGrid);
            return SupplierGrid;
        }(Serenity.EntityGrid));
        Northwind.SupplierGrid = SupplierGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var TerritoryDialog = /** @class */ (function (_super) {
            __extends(TerritoryDialog, _super);
            function TerritoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Northwind.TerritoryForm(_this.idPrefix);
                return _this;
            }
            TerritoryDialog.prototype.getFormKey = function () { return Northwind.TerritoryForm.formKey; };
            TerritoryDialog.prototype.getIdProperty = function () { return Northwind.TerritoryRow.idProperty; };
            TerritoryDialog.prototype.getLocalTextPrefix = function () { return Northwind.TerritoryRow.localTextPrefix; };
            TerritoryDialog.prototype.getNameProperty = function () { return Northwind.TerritoryRow.nameProperty; };
            TerritoryDialog.prototype.getService = function () { return Northwind.TerritoryService.baseUrl; };
            TerritoryDialog.prototype.getLanguages = function () {
                return SCMONLINE.LanguageList.getValue();
            };
            TerritoryDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TerritoryDialog);
            return TerritoryDialog;
        }(Serenity.EntityDialog));
        Northwind.TerritoryDialog = TerritoryDialog;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Northwind;
    (function (Northwind) {
        var TerritoryGrid = /** @class */ (function (_super) {
            __extends(TerritoryGrid, _super);
            function TerritoryGrid(container) {
                return _super.call(this, container) || this;
            }
            TerritoryGrid.prototype.getColumnsKey = function () { return "Northwind.Territory"; };
            TerritoryGrid.prototype.getDialogType = function () { return Northwind.TerritoryDialog; };
            TerritoryGrid.prototype.getIdProperty = function () { return Northwind.TerritoryRow.idProperty; };
            TerritoryGrid.prototype.getLocalTextPrefix = function () { return Northwind.TerritoryRow.localTextPrefix; };
            TerritoryGrid.prototype.getService = function () { return Northwind.TerritoryService.baseUrl; };
            TerritoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TerritoryGrid);
            return TerritoryGrid;
        }(Serenity.EntityGrid));
        Northwind.TerritoryGrid = TerritoryGrid;
    })(Northwind = SCMONLINE.Northwind || (SCMONLINE.Northwind = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressDialog = /** @class */ (function (_super) {
            __extends(AddressDialog, _super);
            function AddressDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.AddressForm(_this.idPrefix);
                return _this;
            }
            AddressDialog.prototype.getFormKey = function () { return Procurement.AddressForm.formKey; };
            AddressDialog.prototype.getIdProperty = function () { return Procurement.AddressRow.idProperty; };
            AddressDialog.prototype.getLocalTextPrefix = function () { return Procurement.AddressRow.localTextPrefix; };
            AddressDialog.prototype.getNameProperty = function () { return Procurement.AddressRow.nameProperty; };
            AddressDialog.prototype.getService = function () { return Procurement.AddressService.baseUrl; };
            AddressDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], AddressDialog);
            return AddressDialog;
        }(_Ext.DialogBase));
        Procurement.AddressDialog = AddressDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressGrid = /** @class */ (function (_super) {
            __extends(AddressGrid, _super);
            function AddressGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            AddressGrid.prototype.getColumnsKey = function () { return 'Procurement.Address'; };
            AddressGrid.prototype.getDialogType = function () { return Procurement.AddressDialog; };
            AddressGrid.prototype.getIdProperty = function () { return Procurement.AddressRow.idProperty; };
            AddressGrid.prototype.getLocalTextPrefix = function () { return Procurement.AddressRow.localTextPrefix; };
            AddressGrid.prototype.getService = function () { return Procurement.AddressService.baseUrl; };
            AddressGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AddressGrid);
            return AddressGrid;
        }(_Ext.GridBase));
        Procurement.AddressGrid = AddressGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressTypeDialog = /** @class */ (function (_super) {
            __extends(AddressTypeDialog, _super);
            function AddressTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.AddressTypeForm(_this.idPrefix);
                return _this;
            }
            AddressTypeDialog.prototype.getFormKey = function () { return Procurement.AddressTypeForm.formKey; };
            AddressTypeDialog.prototype.getIdProperty = function () { return Procurement.AddressTypeRow.idProperty; };
            AddressTypeDialog.prototype.getLocalTextPrefix = function () { return Procurement.AddressTypeRow.localTextPrefix; };
            AddressTypeDialog.prototype.getNameProperty = function () { return Procurement.AddressTypeRow.nameProperty; };
            AddressTypeDialog.prototype.getService = function () { return Procurement.AddressTypeService.baseUrl; };
            AddressTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], AddressTypeDialog);
            return AddressTypeDialog;
        }(_Ext.DialogBase));
        Procurement.AddressTypeDialog = AddressTypeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AddressTypeGrid = /** @class */ (function (_super) {
            __extends(AddressTypeGrid, _super);
            function AddressTypeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            AddressTypeGrid.prototype.getColumnsKey = function () { return 'Procurement.AddressType'; };
            AddressTypeGrid.prototype.getDialogType = function () { return Procurement.AddressTypeDialog; };
            AddressTypeGrid.prototype.getIdProperty = function () { return Procurement.AddressTypeRow.idProperty; };
            AddressTypeGrid.prototype.getLocalTextPrefix = function () { return Procurement.AddressTypeRow.localTextPrefix; };
            AddressTypeGrid.prototype.getService = function () { return Procurement.AddressTypeService.baseUrl; };
            AddressTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AddressTypeGrid);
            return AddressTypeGrid;
        }(_Ext.GridBase));
        Procurement.AddressTypeGrid = AddressTypeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ApprovalAuthorityRangeDialog = /** @class */ (function (_super) {
            __extends(ApprovalAuthorityRangeDialog, _super);
            function ApprovalAuthorityRangeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ApprovalAuthorityRangeForm(_this.idPrefix);
                return _this;
            }
            ApprovalAuthorityRangeDialog.prototype.getFormKey = function () { return Procurement.ApprovalAuthorityRangeForm.formKey; };
            ApprovalAuthorityRangeDialog.prototype.getIdProperty = function () { return Procurement.ApprovalAuthorityRangeRow.idProperty; };
            ApprovalAuthorityRangeDialog.prototype.getLocalTextPrefix = function () { return Procurement.ApprovalAuthorityRangeRow.localTextPrefix; };
            ApprovalAuthorityRangeDialog.prototype.getNameProperty = function () { return Procurement.ApprovalAuthorityRangeRow.nameProperty; };
            ApprovalAuthorityRangeDialog.prototype.getService = function () { return Procurement.ApprovalAuthorityRangeService.baseUrl; };
            ApprovalAuthorityRangeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ApprovalAuthorityRangeDialog);
            return ApprovalAuthorityRangeDialog;
        }(_Ext.DialogBase));
        Procurement.ApprovalAuthorityRangeDialog = ApprovalAuthorityRangeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ApprovalAuthorityRangeGrid = /** @class */ (function (_super) {
            __extends(ApprovalAuthorityRangeGrid, _super);
            function ApprovalAuthorityRangeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ApprovalAuthorityRangeGrid.prototype.getColumnsKey = function () { return 'Procurement.ApprovalAuthorityRange'; };
            ApprovalAuthorityRangeGrid.prototype.getDialogType = function () { return Procurement.ApprovalAuthorityRangeDialog; };
            ApprovalAuthorityRangeGrid.prototype.getIdProperty = function () { return Procurement.ApprovalAuthorityRangeRow.idProperty; };
            ApprovalAuthorityRangeGrid.prototype.getLocalTextPrefix = function () { return Procurement.ApprovalAuthorityRangeRow.localTextPrefix; };
            ApprovalAuthorityRangeGrid.prototype.getService = function () { return Procurement.ApprovalAuthorityRangeService.baseUrl; };
            ApprovalAuthorityRangeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ApprovalAuthorityRangeGrid);
            return ApprovalAuthorityRangeGrid;
        }(_Ext.GridBase));
        Procurement.ApprovalAuthorityRangeGrid = ApprovalAuthorityRangeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerLookupViewDialog = /** @class */ (function (_super) {
            __extends(BuyerLookupViewDialog, _super);
            function BuyerLookupViewDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.BuyerLookupViewForm(_this.idPrefix);
                return _this;
            }
            BuyerLookupViewDialog.prototype.getFormKey = function () { return Procurement.BuyerLookupViewForm.formKey; };
            BuyerLookupViewDialog.prototype.getIdProperty = function () { return Procurement.BuyerLookupViewRow.idProperty; };
            BuyerLookupViewDialog.prototype.getLocalTextPrefix = function () { return Procurement.BuyerLookupViewRow.localTextPrefix; };
            BuyerLookupViewDialog.prototype.getNameProperty = function () { return Procurement.BuyerLookupViewRow.nameProperty; };
            BuyerLookupViewDialog.prototype.getService = function () { return Procurement.BuyerLookupViewService.baseUrl; };
            BuyerLookupViewDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], BuyerLookupViewDialog);
            return BuyerLookupViewDialog;
        }(_Ext.DialogBase));
        Procurement.BuyerLookupViewDialog = BuyerLookupViewDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerLookupViewGrid = /** @class */ (function (_super) {
            __extends(BuyerLookupViewGrid, _super);
            function BuyerLookupViewGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            BuyerLookupViewGrid.prototype.getColumnsKey = function () { return 'Procurement.BuyerLookupView'; };
            BuyerLookupViewGrid.prototype.getDialogType = function () { return Procurement.BuyerLookupViewDialog; };
            BuyerLookupViewGrid.prototype.getIdProperty = function () { return Procurement.BuyerLookupViewRow.idProperty; };
            BuyerLookupViewGrid.prototype.getLocalTextPrefix = function () { return Procurement.BuyerLookupViewRow.localTextPrefix; };
            BuyerLookupViewGrid.prototype.getService = function () { return Procurement.BuyerLookupViewService.baseUrl; };
            BuyerLookupViewGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BuyerLookupViewGrid);
            return BuyerLookupViewGrid;
        }(_Ext.GridBase));
        Procurement.BuyerLookupViewGrid = BuyerLookupViewGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicDescriptionDialog = /** @class */ (function (_super) {
            __extends(CharacteristicDescriptionDialog, _super);
            function CharacteristicDescriptionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.CharacteristicDescriptionForm(_this.idPrefix);
                return _this;
            }
            CharacteristicDescriptionDialog.prototype.getFormKey = function () { return Procurement.CharacteristicDescriptionForm.formKey; };
            CharacteristicDescriptionDialog.prototype.getIdProperty = function () { return Procurement.CharacteristicDescriptionRow.idProperty; };
            CharacteristicDescriptionDialog.prototype.getLocalTextPrefix = function () { return Procurement.CharacteristicDescriptionRow.localTextPrefix; };
            CharacteristicDescriptionDialog.prototype.getNameProperty = function () { return Procurement.CharacteristicDescriptionRow.nameProperty; };
            CharacteristicDescriptionDialog.prototype.getService = function () { return Procurement.CharacteristicDescriptionService.baseUrl; };
            CharacteristicDescriptionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CharacteristicDescriptionDialog);
            return CharacteristicDescriptionDialog;
        }(_Ext.DialogBase));
        Procurement.CharacteristicDescriptionDialog = CharacteristicDescriptionDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicDescriptionGrid = /** @class */ (function (_super) {
            __extends(CharacteristicDescriptionGrid, _super);
            function CharacteristicDescriptionGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CharacteristicDescriptionGrid.prototype.getColumnsKey = function () { return 'Procurement.CharacteristicDescription'; };
            CharacteristicDescriptionGrid.prototype.getDialogType = function () { return Procurement.CharacteristicDescriptionDialog; };
            CharacteristicDescriptionGrid.prototype.getIdProperty = function () { return Procurement.CharacteristicDescriptionRow.idProperty; };
            CharacteristicDescriptionGrid.prototype.getLocalTextPrefix = function () { return Procurement.CharacteristicDescriptionRow.localTextPrefix; };
            CharacteristicDescriptionGrid.prototype.getService = function () { return Procurement.CharacteristicDescriptionService.baseUrl; };
            CharacteristicDescriptionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CharacteristicDescriptionGrid);
            return CharacteristicDescriptionGrid;
        }(_Ext.GridBase));
        Procurement.CharacteristicDescriptionGrid = CharacteristicDescriptionGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicValueDialog = /** @class */ (function (_super) {
            __extends(CharacteristicValueDialog, _super);
            function CharacteristicValueDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.CharacteristicValueForm(_this.idPrefix);
                return _this;
            }
            CharacteristicValueDialog.prototype.getFormKey = function () { return Procurement.CharacteristicValueForm.formKey; };
            CharacteristicValueDialog.prototype.getIdProperty = function () { return Procurement.CharacteristicValueRow.idProperty; };
            CharacteristicValueDialog.prototype.getLocalTextPrefix = function () { return Procurement.CharacteristicValueRow.localTextPrefix; };
            CharacteristicValueDialog.prototype.getNameProperty = function () { return Procurement.CharacteristicValueRow.nameProperty; };
            CharacteristicValueDialog.prototype.getService = function () { return Procurement.CharacteristicValueService.baseUrl; };
            CharacteristicValueDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CharacteristicValueDialog);
            return CharacteristicValueDialog;
        }(_Ext.DialogBase));
        Procurement.CharacteristicValueDialog = CharacteristicValueDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CharacteristicValueGrid = /** @class */ (function (_super) {
            __extends(CharacteristicValueGrid, _super);
            function CharacteristicValueGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CharacteristicValueGrid.prototype.getColumnsKey = function () { return 'Procurement.CharacteristicValue'; };
            CharacteristicValueGrid.prototype.getDialogType = function () { return Procurement.CharacteristicValueDialog; };
            CharacteristicValueGrid.prototype.getIdProperty = function () { return Procurement.CharacteristicValueRow.idProperty; };
            CharacteristicValueGrid.prototype.getLocalTextPrefix = function () { return Procurement.CharacteristicValueRow.localTextPrefix; };
            CharacteristicValueGrid.prototype.getService = function () { return Procurement.CharacteristicValueService.baseUrl; };
            CharacteristicValueGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CharacteristicValueGrid);
            return CharacteristicValueGrid;
        }(_Ext.GridBase));
        Procurement.CharacteristicValueGrid = CharacteristicValueGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberDialog = /** @class */ (function (_super) {
            __extends(CommitteeMemberDialog, _super);
            function CommitteeMemberDialog() {
                var _this = _super.call(this) || this;
                //protected getService() { return CommitteeMemberService.baseUrl; }
                _this.form = new Procurement.CommitteeMemberForm(_this.idPrefix);
                return _this;
            }
            CommitteeMemberDialog.prototype.getFormKey = function () { return Procurement.CommitteeMemberForm.formKey; };
            //protected getIdProperty() { return CommitteeMemberRow.idProperty; }
            CommitteeMemberDialog.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberRow.localTextPrefix; };
            CommitteeMemberDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                if (this.isNew()) {
                    //Committe Role Default Value
                    this.form.CommitteeRoleId.value = 5;
                }
            };
            CommitteeMemberDialog = __decorate([
                Serenity.Decorators.registerClass()
                //    export class CommitteeMemberDialog extends _Ext.DialogBase<CommitteeMemberRow, any> {
            ], CommitteeMemberDialog);
            return CommitteeMemberDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.CommitteeMemberDialog = CommitteeMemberDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberGrid = /** @class */ (function (_super) {
            __extends(CommitteeMemberGrid, _super);
            function CommitteeMemberGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CommitteeMemberGrid.prototype.getColumnsKey = function () { return 'Procurement.CommitteeMember'; };
            CommitteeMemberGrid.prototype.getDialogType = function () { return Procurement.CommitteeMemberDialog; };
            CommitteeMemberGrid.prototype.getIdProperty = function () { return Procurement.CommitteeMemberRow.idProperty; };
            CommitteeMemberGrid.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberRow.localTextPrefix; };
            CommitteeMemberGrid.prototype.getService = function () { return Procurement.CommitteeMemberService.baseUrl; };
            CommitteeMemberGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeMemberGrid);
            return CommitteeMemberGrid;
        }(_Ext.GridBase));
        Procurement.CommitteeMemberGrid = CommitteeMemberGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMembersEditor = /** @class */ (function (_super) {
            __extends(CommitteeMembersEditor, _super);
            function CommitteeMembersEditor(container) {
                return _super.call(this, container) || this;
            }
            CommitteeMembersEditor.prototype.getColumnsKey = function () { return "Procurement.CommitteeMember"; };
            CommitteeMembersEditor.prototype.getDialogType = function () { return Procurement.CommitteeMemberDialog; };
            CommitteeMembersEditor.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberRow.localTextPrefix; };
            CommitteeMembersEditor.prototype.validateEntity = function (row, id) {
                var sameRole = Q.tryFirst(this.view.getItems(), function (x) { return x.RoleId === row.RoleId; });
                if (sameRole && this.id(sameRole) !== id) {
                    Q.alert('This Role is already in Committee List');
                    return false;
                }
                row.RoleRoleName = SCMONLINE.Administration.RoleRow.getLookup().itemById[row.RoleId].RoleName;
                row.CommitteeRoleName = Procurement.CommitteeRoleRow.getLookup().itemById[row.CommitteeRoleId].Name;
                return true;
            };
            CommitteeMembersEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeMembersEditor);
            return CommitteeMembersEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.CommitteeMembersEditor = CommitteeMembersEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberMappingDialog = /** @class */ (function (_super) {
            __extends(CommitteeMemberMappingDialog, _super);
            function CommitteeMemberMappingDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.CommitteeMemberMappingForm(_this.idPrefix);
                return _this;
            }
            CommitteeMemberMappingDialog.prototype.getFormKey = function () { return Procurement.CommitteeMemberMappingForm.formKey; };
            CommitteeMemberMappingDialog.prototype.getIdProperty = function () { return Procurement.CommitteeMemberMappingRow.idProperty; };
            CommitteeMemberMappingDialog.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberMappingRow.localTextPrefix; };
            CommitteeMemberMappingDialog.prototype.getNameProperty = function () { return Procurement.CommitteeMemberMappingRow.nameProperty; };
            CommitteeMemberMappingDialog.prototype.getService = function () { return Procurement.CommitteeMemberMappingService.baseUrl; };
            CommitteeMemberMappingDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeMemberMappingDialog);
            return CommitteeMemberMappingDialog;
        }(_Ext.DialogBase));
        Procurement.CommitteeMemberMappingDialog = CommitteeMemberMappingDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeMemberMappingGrid = /** @class */ (function (_super) {
            __extends(CommitteeMemberMappingGrid, _super);
            function CommitteeMemberMappingGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CommitteeMemberMappingGrid.prototype.getColumnsKey = function () { return 'Procurement.CommitteeMemberMapping'; };
            CommitteeMemberMappingGrid.prototype.getDialogType = function () { return Procurement.CommitteeMemberMappingDialog; };
            CommitteeMemberMappingGrid.prototype.getIdProperty = function () { return Procurement.CommitteeMemberMappingRow.idProperty; };
            CommitteeMemberMappingGrid.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberMappingRow.localTextPrefix; };
            CommitteeMemberMappingGrid.prototype.getService = function () { return Procurement.CommitteeMemberMappingService.baseUrl; };
            CommitteeMemberMappingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeMemberMappingGrid);
            return CommitteeMemberMappingGrid;
        }(_Ext.GridBase));
        Procurement.CommitteeMemberMappingGrid = CommitteeMemberMappingGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeRoleDialog = /** @class */ (function (_super) {
            __extends(CommitteeRoleDialog, _super);
            function CommitteeRoleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.CommitteeRoleForm(_this.idPrefix);
                return _this;
            }
            CommitteeRoleDialog.prototype.getFormKey = function () { return Procurement.CommitteeRoleForm.formKey; };
            CommitteeRoleDialog.prototype.getIdProperty = function () { return Procurement.CommitteeRoleRow.idProperty; };
            CommitteeRoleDialog.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeRoleRow.localTextPrefix; };
            CommitteeRoleDialog.prototype.getNameProperty = function () { return Procurement.CommitteeRoleRow.nameProperty; };
            CommitteeRoleDialog.prototype.getService = function () { return Procurement.CommitteeRoleService.baseUrl; };
            CommitteeRoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeRoleDialog);
            return CommitteeRoleDialog;
        }(_Ext.DialogBase));
        Procurement.CommitteeRoleDialog = CommitteeRoleDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeRoleGrid = /** @class */ (function (_super) {
            __extends(CommitteeRoleGrid, _super);
            function CommitteeRoleGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CommitteeRoleGrid.prototype.getColumnsKey = function () { return 'Procurement.CommitteeRole'; };
            CommitteeRoleGrid.prototype.getDialogType = function () { return Procurement.CommitteeRoleDialog; };
            CommitteeRoleGrid.prototype.getIdProperty = function () { return Procurement.CommitteeRoleRow.idProperty; };
            CommitteeRoleGrid.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeRoleRow.localTextPrefix; };
            CommitteeRoleGrid.prototype.getService = function () { return Procurement.CommitteeRoleService.baseUrl; };
            CommitteeRoleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeRoleGrid);
            return CommitteeRoleGrid;
        }(_Ext.GridBase));
        Procurement.CommitteeRoleGrid = CommitteeRoleGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeTypeDialog = /** @class */ (function (_super) {
            __extends(CommitteeTypeDialog, _super);
            function CommitteeTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.CommitteeTypeForm(_this.idPrefix);
                return _this;
            }
            CommitteeTypeDialog.prototype.getFormKey = function () { return Procurement.CommitteeTypeForm.formKey; };
            CommitteeTypeDialog.prototype.getIdProperty = function () { return Procurement.CommitteeTypeRow.idProperty; };
            CommitteeTypeDialog.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeTypeRow.localTextPrefix; };
            CommitteeTypeDialog.prototype.getNameProperty = function () { return Procurement.CommitteeTypeRow.nameProperty; };
            CommitteeTypeDialog.prototype.getService = function () { return Procurement.CommitteeTypeService.baseUrl; };
            CommitteeTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeTypeDialog);
            return CommitteeTypeDialog;
        }(_Ext.DialogBase));
        Procurement.CommitteeTypeDialog = CommitteeTypeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CommitteeTypeGrid = /** @class */ (function (_super) {
            __extends(CommitteeTypeGrid, _super);
            function CommitteeTypeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CommitteeTypeGrid.prototype.getColumnsKey = function () { return 'Procurement.CommitteeType'; };
            CommitteeTypeGrid.prototype.getDialogType = function () { return Procurement.CommitteeTypeDialog; };
            CommitteeTypeGrid.prototype.getIdProperty = function () { return Procurement.CommitteeTypeRow.idProperty; };
            CommitteeTypeGrid.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeTypeRow.localTextPrefix; };
            CommitteeTypeGrid.prototype.getService = function () { return Procurement.CommitteeTypeService.baseUrl; };
            CommitteeTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CommitteeTypeGrid);
            return CommitteeTypeGrid;
        }(_Ext.GridBase));
        Procurement.CommitteeTypeGrid = CommitteeTypeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ContractTypeDialog = /** @class */ (function (_super) {
            __extends(ContractTypeDialog, _super);
            function ContractTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ContractTypeForm(_this.idPrefix);
                return _this;
            }
            ContractTypeDialog.prototype.getFormKey = function () { return Procurement.ContractTypeForm.formKey; };
            ContractTypeDialog.prototype.getIdProperty = function () { return Procurement.ContractTypeRow.idProperty; };
            ContractTypeDialog.prototype.getLocalTextPrefix = function () { return Procurement.ContractTypeRow.localTextPrefix; };
            ContractTypeDialog.prototype.getNameProperty = function () { return Procurement.ContractTypeRow.nameProperty; };
            ContractTypeDialog.prototype.getService = function () { return Procurement.ContractTypeService.baseUrl; };
            ContractTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ContractTypeDialog);
            return ContractTypeDialog;
        }(_Ext.DialogBase));
        Procurement.ContractTypeDialog = ContractTypeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ContractTypeGrid = /** @class */ (function (_super) {
            __extends(ContractTypeGrid, _super);
            function ContractTypeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ContractTypeGrid.prototype.getColumnsKey = function () { return 'Procurement.ContractType'; };
            ContractTypeGrid.prototype.getDialogType = function () { return Procurement.ContractTypeDialog; };
            ContractTypeGrid.prototype.getIdProperty = function () { return Procurement.ContractTypeRow.idProperty; };
            ContractTypeGrid.prototype.getLocalTextPrefix = function () { return Procurement.ContractTypeRow.localTextPrefix; };
            ContractTypeGrid.prototype.getService = function () { return Procurement.ContractTypeService.baseUrl; };
            ContractTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ContractTypeGrid);
            return ContractTypeGrid;
        }(_Ext.GridBase));
        Procurement.ContractTypeGrid = ContractTypeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CurrencyDialog = /** @class */ (function (_super) {
            __extends(CurrencyDialog, _super);
            function CurrencyDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.CurrencyForm(_this.idPrefix);
                return _this;
            }
            CurrencyDialog.prototype.getFormKey = function () { return Procurement.CurrencyForm.formKey; };
            CurrencyDialog.prototype.getIdProperty = function () { return Procurement.CurrencyRow.idProperty; };
            CurrencyDialog.prototype.getLocalTextPrefix = function () { return Procurement.CurrencyRow.localTextPrefix; };
            CurrencyDialog.prototype.getNameProperty = function () { return Procurement.CurrencyRow.nameProperty; };
            CurrencyDialog.prototype.getService = function () { return Procurement.CurrencyService.baseUrl; };
            CurrencyDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CurrencyDialog);
            return CurrencyDialog;
        }(_Ext.DialogBase));
        Procurement.CurrencyDialog = CurrencyDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var CurrencyGrid = /** @class */ (function (_super) {
            __extends(CurrencyGrid, _super);
            function CurrencyGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            CurrencyGrid.prototype.getColumnsKey = function () { return 'Procurement.Currency'; };
            CurrencyGrid.prototype.getDialogType = function () { return Procurement.CurrencyDialog; };
            CurrencyGrid.prototype.getIdProperty = function () { return Procurement.CurrencyRow.idProperty; };
            CurrencyGrid.prototype.getLocalTextPrefix = function () { return Procurement.CurrencyRow.localTextPrefix; };
            CurrencyGrid.prototype.getService = function () { return Procurement.CurrencyService.baseUrl; };
            CurrencyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CurrencyGrid);
            return CurrencyGrid;
        }(_Ext.GridBase));
        Procurement.CurrencyGrid = CurrencyGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocSubmitMethodDialog = /** @class */ (function (_super) {
            __extends(DocSubmitMethodDialog, _super);
            function DocSubmitMethodDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.DocSubmitMethodForm(_this.idPrefix);
                return _this;
            }
            DocSubmitMethodDialog.prototype.getFormKey = function () { return Procurement.DocSubmitMethodForm.formKey; };
            DocSubmitMethodDialog.prototype.getIdProperty = function () { return Procurement.DocSubmitMethodRow.idProperty; };
            DocSubmitMethodDialog.prototype.getLocalTextPrefix = function () { return Procurement.DocSubmitMethodRow.localTextPrefix; };
            DocSubmitMethodDialog.prototype.getNameProperty = function () { return Procurement.DocSubmitMethodRow.nameProperty; };
            DocSubmitMethodDialog.prototype.getService = function () { return Procurement.DocSubmitMethodService.baseUrl; };
            DocSubmitMethodDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DocSubmitMethodDialog);
            return DocSubmitMethodDialog;
        }(_Ext.DialogBase));
        Procurement.DocSubmitMethodDialog = DocSubmitMethodDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocSubmitMethodGrid = /** @class */ (function (_super) {
            __extends(DocSubmitMethodGrid, _super);
            function DocSubmitMethodGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            DocSubmitMethodGrid.prototype.getColumnsKey = function () { return 'Procurement.DocSubmitMethod'; };
            DocSubmitMethodGrid.prototype.getDialogType = function () { return Procurement.DocSubmitMethodDialog; };
            DocSubmitMethodGrid.prototype.getIdProperty = function () { return Procurement.DocSubmitMethodRow.idProperty; };
            DocSubmitMethodGrid.prototype.getLocalTextPrefix = function () { return Procurement.DocSubmitMethodRow.localTextPrefix; };
            DocSubmitMethodGrid.prototype.getService = function () { return Procurement.DocSubmitMethodService.baseUrl; };
            DocSubmitMethodGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DocSubmitMethodGrid);
            return DocSubmitMethodGrid;
        }(_Ext.GridBase));
        Procurement.DocSubmitMethodGrid = DocSubmitMethodGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocumentStatusDialog = /** @class */ (function (_super) {
            __extends(DocumentStatusDialog, _super);
            function DocumentStatusDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.DocumentStatusForm(_this.idPrefix);
                return _this;
            }
            DocumentStatusDialog.prototype.getFormKey = function () { return Procurement.DocumentStatusForm.formKey; };
            DocumentStatusDialog.prototype.getIdProperty = function () { return Procurement.DocumentStatusRow.idProperty; };
            DocumentStatusDialog.prototype.getLocalTextPrefix = function () { return Procurement.DocumentStatusRow.localTextPrefix; };
            DocumentStatusDialog.prototype.getNameProperty = function () { return Procurement.DocumentStatusRow.nameProperty; };
            DocumentStatusDialog.prototype.getService = function () { return Procurement.DocumentStatusService.baseUrl; };
            DocumentStatusDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DocumentStatusDialog);
            return DocumentStatusDialog;
        }(_Ext.DialogBase));
        Procurement.DocumentStatusDialog = DocumentStatusDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var DocumentStatusGrid = /** @class */ (function (_super) {
            __extends(DocumentStatusGrid, _super);
            function DocumentStatusGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            DocumentStatusGrid.prototype.getColumnsKey = function () { return 'Procurement.DocumentStatus'; };
            DocumentStatusGrid.prototype.getDialogType = function () { return Procurement.DocumentStatusDialog; };
            DocumentStatusGrid.prototype.getIdProperty = function () { return Procurement.DocumentStatusRow.idProperty; };
            DocumentStatusGrid.prototype.getLocalTextPrefix = function () { return Procurement.DocumentStatusRow.localTextPrefix; };
            DocumentStatusGrid.prototype.getService = function () { return Procurement.DocumentStatusService.baseUrl; };
            DocumentStatusGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DocumentStatusGrid);
            return DocumentStatusGrid;
        }(_Ext.GridBase));
        Procurement.DocumentStatusGrid = DocumentStatusGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionDialog = /** @class */ (function (_super) {
            __extends(EvaluationConclusionDialog, _super);
            function EvaluationConclusionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.EvaluationConclusionForm(_this.idPrefix);
                return _this;
            }
            EvaluationConclusionDialog.prototype.getFormKey = function () { return Procurement.EvaluationConclusionForm.formKey; };
            EvaluationConclusionDialog.prototype.getIdProperty = function () { return Procurement.EvaluationConclusionRow.idProperty; };
            EvaluationConclusionDialog.prototype.getLocalTextPrefix = function () { return Procurement.EvaluationConclusionRow.localTextPrefix; };
            EvaluationConclusionDialog.prototype.getNameProperty = function () { return Procurement.EvaluationConclusionRow.nameProperty; };
            EvaluationConclusionDialog.prototype.getService = function () { return Procurement.EvaluationConclusionService.baseUrl; };
            EvaluationConclusionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], EvaluationConclusionDialog);
            return EvaluationConclusionDialog;
        }(_Ext.DialogBase));
        Procurement.EvaluationConclusionDialog = EvaluationConclusionDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionGrid = /** @class */ (function (_super) {
            __extends(EvaluationConclusionGrid, _super);
            function EvaluationConclusionGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            EvaluationConclusionGrid.prototype.getColumnsKey = function () { return 'Procurement.EvaluationConclusion'; };
            EvaluationConclusionGrid.prototype.getDialogType = function () { return Procurement.EvaluationConclusionDialog; };
            EvaluationConclusionGrid.prototype.getIdProperty = function () { return Procurement.EvaluationConclusionRow.idProperty; };
            EvaluationConclusionGrid.prototype.getLocalTextPrefix = function () { return Procurement.EvaluationConclusionRow.localTextPrefix; };
            EvaluationConclusionGrid.prototype.getService = function () { return Procurement.EvaluationConclusionService.baseUrl; };
            EvaluationConclusionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], EvaluationConclusionGrid);
            return EvaluationConclusionGrid;
        }(_Ext.GridBase));
        Procurement.EvaluationConclusionGrid = EvaluationConclusionGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionItemDialog = /** @class */ (function (_super) {
            __extends(EvaluationConclusionItemDialog, _super);
            function EvaluationConclusionItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.EvaluationConclusionItemForm(_this.idPrefix);
                return _this;
            }
            EvaluationConclusionItemDialog.prototype.getFormKey = function () { return Procurement.EvaluationConclusionItemForm.formKey; };
            EvaluationConclusionItemDialog.prototype.getIdProperty = function () { return Procurement.EvaluationConclusionItemRow.idProperty; };
            EvaluationConclusionItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.EvaluationConclusionItemRow.localTextPrefix; };
            EvaluationConclusionItemDialog.prototype.getNameProperty = function () { return Procurement.EvaluationConclusionItemRow.nameProperty; };
            EvaluationConclusionItemDialog.prototype.getService = function () { return Procurement.EvaluationConclusionItemService.baseUrl; };
            EvaluationConclusionItemDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], EvaluationConclusionItemDialog);
            return EvaluationConclusionItemDialog;
        }(_Ext.DialogBase));
        Procurement.EvaluationConclusionItemDialog = EvaluationConclusionItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var EvaluationConclusionItemGrid = /** @class */ (function (_super) {
            __extends(EvaluationConclusionItemGrid, _super);
            function EvaluationConclusionItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            EvaluationConclusionItemGrid.prototype.getColumnsKey = function () { return 'Procurement.EvaluationConclusionItem'; };
            EvaluationConclusionItemGrid.prototype.getDialogType = function () { return Procurement.EvaluationConclusionItemDialog; };
            EvaluationConclusionItemGrid.prototype.getIdProperty = function () { return Procurement.EvaluationConclusionItemRow.idProperty; };
            EvaluationConclusionItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.EvaluationConclusionItemRow.localTextPrefix; };
            EvaluationConclusionItemGrid.prototype.getService = function () { return Procurement.EvaluationConclusionItemService.baseUrl; };
            EvaluationConclusionItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], EvaluationConclusionItemGrid);
            return EvaluationConclusionItemGrid;
        }(_Ext.GridBase));
        Procurement.EvaluationConclusionItemGrid = EvaluationConclusionItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_NegotiationDialog = /** @class */ (function (_super) {
            __extends(F10_NegotiationDialog, _super);
            function F10_NegotiationDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F10_NegotiationForm(_this.idPrefix);
                _this.form.ProcParticipantItems.parentDialog = _this;
                _this.form.ReviewOeRequired.changeSelect2(function (e) { return _this.updateInterface(); });
                return _this;
            }
            F10_NegotiationDialog.prototype.getFormKey = function () { return Procurement.F10_NegotiationForm.formKey; };
            F10_NegotiationDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F10_NegotiationDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F10_NegotiationDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F10_NegotiationDialog.prototype.getService = function () { return Procurement.F10_NegotiationService.baseUrl; };
            F10_NegotiationDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F10_NegotiationService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R5] - Berita Acara Evaluasi Nego",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entityId();
                        var linkReportR5 = '../Procurement/Report/ReportR5?';
                        //window.open(a, '_blank');
                        window.open(linkReportR5 + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F10_NegotiationDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                if (this.form.ReviewOeRequired.get_value() == "true") {
                    this.form.RfqItems.element.parent().parent().toggle(true);
                    this.onDialogOpen();
                }
                else {
                    this.form.RfqItems.element.parent().parent().toggle(false);
                    this.onDialogOpen();
                }
            };
            F10_NegotiationDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                //need this to re-adjust detail grid, otherwise some column wouldn't shown
                this.form.ProcParticipantItems.slickGrid.resizeCanvas();
                this.form.RfqItems.slickGrid.resizeCanvas();
            };
            F10_NegotiationDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F10SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
                this.form.RfqItems.slickGrid.resizeCanvas();
                this.adjustItemGrid();
            };
            F10_NegotiationDialog.prototype.adjustItemGrid = function (changedVendorId, evaluationConclusionItemId) {
                var _this = this;
                var data = this.form.ProcParticipantItems.view.getItems();
                console.log("TEST DEBUG DAta");
                console.log(data);
                function uniqueBy(arr, prop) {
                    return arr.reduce(function (a, d) {
                        if (!a.includes(d[prop])) {
                            a.push(d[prop]);
                        }
                        return a;
                    }, []);
                }
                //rank item
                var items = uniqueBy(data, "ItemSequence");
                console.log(this.form.ContractTypeId.value);
                console.log(evaluationConclusionItemId);
                console.log(changedVendorId);
                var resultArr = [];
                items.forEach(function (item) {
                    var filteredArr = data.filter(function (o) { return o.ItemSequence == item; });
                    console.log("TEST DEBUG");
                    console.log(filteredArr);
                    console.log(item);
                    //filteredArr.sort((a, b) => (a.BidPrice > b.BidPrice) ? 1 : ((b.BidPrice > a.BidPrice) ? -1 : 0))
                    filteredArr.sort(function (a, b) {
                        return (a.BidPrice > b.BidPrice) ? 1 : ((b.BidPrice > a.BidPrice) ? -1 :
                            //if same price, sort by document submit date
                            (a.F5ParticipantSubmitDate > b.F5ParticipantSubmitDate) ? 1 : ((b.F5ParticipantSubmitDate > a.F5ParticipantSubmitDate) ? -1 : 0));
                    });
                    //console.log(a.BidPrice);
                    //console.log(b.BidPrice);
                    //console.log(a.F5ParticipantSubmitDate);
                    //console.log(b.F5ParticipantSubmitDate);
                    console.log("apapun");
                    console.log(filteredArr.length);
                    for (var i = 0; i < filteredArr.length; i++) {
                        filteredArr[i].Rank = i + 1;
                        console.log(_this.form.ContractTypeId.value);
                        console.log("juga");
                        //contract type lumpsum
                        if (_this.form.ContractTypeId.value == 1
                            && typeof evaluationConclusionItemId !== "undefined") {
                            //assign all item conclusion as winner based vendor
                            console.log("apa");
                            console.log(evaluationConclusionItemId);
                            console.log(filteredArr[i]);
                            if (changedVendorId == filteredArr[i].VendorId
                                && evaluationConclusionItemId == 1 //winner
                            ) {
                                console.log("itu");
                                filteredArr[i].EvaluationConclusionItemId = evaluationConclusionItemId;
                                filteredArr[i].EvaluationConclusionItemName = Procurement.EvaluationConclusionItemRow.getLookup().itemById[evaluationConclusionItemId].Name;
                            }
                            else {
                                filteredArr[i].EvaluationConclusionItemId = null;
                                filteredArr[i].EvaluationConclusionItemName = null;
                            }
                        }
                    }
                    resultArr = resultArr.concat(filteredArr);
                });
                this.form.ProcParticipantItems.view.setItems(data, true);
            };
            F10_NegotiationDialog.prototype.compare = function (a, b) {
                if (a.ItemSequence < b.ItemSequence)
                    return -1;
                if (a.ItemSequence > b.ItemSequence)
                    return 1;
                return 0;
            };
            F10_NegotiationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_NegotiationDialog);
            return F10_NegotiationDialog;
        }(_Ext.DialogBase));
        Procurement.F10_NegotiationDialog = F10_NegotiationDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_NegotiationGrid = /** @class */ (function (_super) {
            __extends(F10_NegotiationGrid, _super);
            function F10_NegotiationGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F10_NegotiationGrid.prototype.getColumnsKey = function () { return 'Procurement.F10_Negotiation'; };
            F10_NegotiationGrid.prototype.getDialogType = function () { return Procurement.F10_NegotiationDialog; };
            F10_NegotiationGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F10_NegotiationGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F10_NegotiationGrid.prototype.getService = function () { return Procurement.F10_NegotiationService.baseUrl; };
            F10_NegotiationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F10_NegotiationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_NegotiationGrid);
            return F10_NegotiationGrid;
        }(_Ext.GridBase));
        Procurement.F10_NegotiationGrid = F10_NegotiationGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OwnerEstimateReviewImportDialog = /** @class */ (function (_super) {
            __extends(OwnerEstimateReviewImportDialog, _super);
            function OwnerEstimateReviewImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.OwnerEstimateReviewImportForm(_this.idPrefix);
                return _this;
            }
            OwnerEstimateReviewImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            OwnerEstimateReviewImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            Procurement.F10_NegotiationService.OwnerEstimateReviewImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                Q.notifyInfo('Updated: ' + (response.Updated || 0));
                                //Q.notifyInfo(
                                //    'Inserted: ' + (response.Inserted || 0) +
                                //    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                var rfqList = _this.rfqItemsEditor.view.getItems();
                                var importedRfqList = response.ImportedData;
                                var i = 1;
                                rfqList.forEach(function (row) {
                                    //sequence match
                                    var matchExcelRow = importedRfqList[importedRfqList.map(function (e) { return e.Item; }).indexOf(row.Item)];
                                    if (matchExcelRow) {
                                        row.OwnerEstimateReview = matchExcelRow.OwnerEstimateReview;
                                    }
                                    row["__id"] = "``" + i;
                                    i++;
                                });
                                _this.rfqItemsEditor.view.setItems(rfqList, false);
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            OwnerEstimateReviewImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OwnerEstimateReviewImportDialog);
            return OwnerEstimateReviewImportDialog;
        }(Serenity.PropertyDialog));
        Procurement.OwnerEstimateReviewImportDialog = OwnerEstimateReviewImportDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantDialog, _super);
            function F10_ProcParticipantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F10_ProcParticipantForm(_this.idPrefix);
                return _this;
            }
            F10_ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.F10_ProcParticipantForm.formKey; };
            F10_ProcParticipantDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F10_ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F10_ProcParticipantDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F10_ProcParticipantDialog.prototype.getService = function () { return Procurement.F10_ProcParticipantService.baseUrl; };
            F10_ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_ProcParticipantDialog);
            return F10_ProcParticipantDialog;
        }(Serenity.EntityDialog));
        Procurement.F10_ProcParticipantDialog = F10_ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantGrid, _super);
            function F10_ProcParticipantGrid(container) {
                return _super.call(this, container) || this;
            }
            F10_ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.F10_ProcParticipant'; };
            F10_ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.F10_ProcParticipantDialog; };
            F10_ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F10_ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F10_ProcParticipantGrid.prototype.getService = function () { return Procurement.F10_ProcParticipantService.baseUrl; };
            F10_ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_ProcParticipantGrid);
            return F10_ProcParticipantGrid;
        }(Serenity.EntityGrid));
        Procurement.F10_ProcParticipantGrid = F10_ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantItemDialog, _super);
            function F10_ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                //protected getService() { return F10_ProcParticipantItemService.baseUrl; }
                _this.form = new Procurement.F10_ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            F10_ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.F10_ProcParticipantItemForm.formKey; };
            //protected getIdProperty() { return ProcParticipantItemRow.idProperty; }
            F10_ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F10_ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            F10_ProcParticipantItemDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //this.form.Rank
            };
            F10_ProcParticipantItemDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                //if (this.parentForm.form.ContractTypeId.value == 1) {
                //}
            };
            F10_ProcParticipantItemDialog.prototype.onDialogClose = function () {
                this.parentDialog.adjustItemGrid(this.form.ProcParticipantVendorId.value, this.form.EvaluationConclusionItemId.value);
            };
            F10_ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class F10_ProcParticipantItemDialog extends _Ext.DialogBase<ProcParticipantItemRow, any> {
            ], F10_ProcParticipantItemDialog);
            return F10_ProcParticipantItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.F10_ProcParticipantItemDialog = F10_ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantItemGrid, _super);
            function F10_ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F10_ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F10_ProcParticipantItem'; };
            F10_ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.F10_ProcParticipantItemDialog; };
            F10_ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F10_ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F10_ProcParticipantItemGrid.prototype.getService = function () { return Procurement.F10_ProcParticipantItemService.baseUrl; };
            F10_ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_ProcParticipantItemGrid);
            return F10_ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.F10_ProcParticipantItemGrid = F10_ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_ProcParticipantItemsEditor = /** @class */ (function (_super) {
            __extends(F10_ProcParticipantItemsEditor, _super);
            function F10_ProcParticipantItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.toolbar.element.toggle(false);
                return _this;
                //let columns = this.slickGrid.getColumns();
                //console.log(columns);
                ////columns = columns.filter(f => f.field != 'RfqItemId');
                //columns = columns.filter(f => f.field != 'ProcurementStatus');
            }
            F10_ProcParticipantItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F10_ProcParticipantItem"; };
            F10_ProcParticipantItemsEditor.prototype.getDialogType = function () { return Procurement.F10_ProcParticipantItemDialog; };
            F10_ProcParticipantItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F10_ProcParticipantItemsEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F10_ProcParticipantItemsEditor.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                // need to register this plugin for grouping or you'll have errors
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setGrouping([
                    {
                        formatter: function (x) { return x.rows[0]["VendorName" /* VendorName */] + ' (' + x.value + '), Doc Submit Date: ' + Q.formatDate(x.rows[0]["F5ParticipantSubmitDate" /* F5ParticipantSubmitDate */], 'dd/MM/yyyy HH:mm:ss'); },
                        getter: "ProcParticipantVendorId" /* ProcParticipantVendorId */
                    },
                ]);
                ////ProcParticipantVendorId
                //this.view.setSummaryOptions({
                //    aggregators: [
                //        //new Slick.Aggregators.Avg(fld.UnitPrice),
                //        new Slick.Aggregators.Sum(fld.BidPrice),
                //        //new Slick.Aggregators.Max(fld.UnitsOnOrder),
                //        //new Slick.Aggregators.Avg(fld.ReorderLevel)
                //    ]
                //});
                return grid;
            };
            //protected getColumns() {
            //    var columns = super.getColumns();
            //    console.log(columns);
            //    Q.first(columns, x => x.field === fld.BidPrice)
            //        .groupTotalsFormatter = (totals, col) =>
            //            (totals.sum ? ('sum: ' + Q.coalesce(totals.sum[col.field], '')) : '');
            //    //Q.first(columns, x => x.field === fld.ReorderLevel)
            //    //    .groupTotalsFormatter = (totals, col) =>
            //    //        (totals.avg ? ('avg: ' + Q.coalesce(Q.formatNumber(totals.avg[col.field], '0.'), '')) : '');
            //    return columns; 
            //}
            //protected getSlickOptions() {
            //    var opt = super.getSlickOptions();
            //    opt.showFooterRow = true;
            //    return opt;
            //}
            F10_ProcParticipantItemsEditor.prototype.usePager = function () {
                return false;
            };
            F10_ProcParticipantItemsEditor.prototype.validateEntity = function (row, id) {
                var itemRow = row;
                //row
                //row.ProcParticipantItemId = Q.toId(row.ProcParticipantItemId);
                //var sameProcParticipantItem = Q.tryFirst(this.view.getItems(), x => x.ProcParticipantItemId === row.ProcParticipantItemId);
                //if (sameProcParticipantItem && this.id(sameProcParticipantItem) !== id) {
                //    Q.alert('This ProcParticipantItem is already in list');
                //    return false;
                //}
                //console.log(row);
                //console.log(ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId]);
                //row.TextLine = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].TextLine;
                //row.TextMeaning = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].TextMeaning;
                //row.TextId = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].TextId;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                //row.ProcParticipantVendorId = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].ProcParticipantVendorId;
                //row.VendorName = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].VendorName;
                //var newRow = ProcParticipantItemRow.getLookup().items.filter(function (item) {
                //    //for (var key in filter) {
                //    //console.log("row.Item");
                //    //console.log(row.Item);
                //    //console.log("item[\"Item\"]");
                //    //console.log(item["Item"]);
                //    //console.log("item[\"Item\"] == row.Item")
                //    //console.log(item["Item"] == row.Item);
                //    console.log("item");
                //    console.log(item);
                //    console.log("item[ProcParticipantId]");
                //    console.log(item["ProcParticipantId"]);
                //    console.log("row.ProcParticipantId");
                //    console.log(row.ProcParticipantId);
                //    if (item["ProcParticipantId"] == row.ProcParticipantId
                //        && item["Item"] == row.Item) {
                //        console.log("true")
                //        return true;
                //    } else {
                //        console.log("false")
                //        return false;
                //    }
                //    //}
                //});
                //console.log("newRow");
                //console.log(newRow);
                //row.EvaluationConclusionItemName = newRow[0].EvaluationConclusionItemName;
                if (itemRow.EvaluationConclusionItemId) {
                    itemRow.EvaluationConclusionItemName = Procurement.EvaluationConclusionItemRow.getLookup().itemById[itemRow.EvaluationConclusionItemId].Name;
                }
                return true;
            };
            F10_ProcParticipantItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_ProcParticipantItemsEditor);
            return F10_ProcParticipantItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F10_ProcParticipantItemsEditor = F10_ProcParticipantItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_RfqItemDialog = /** @class */ (function (_super) {
            __extends(F10_RfqItemDialog, _super);
            function F10_RfqItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F10_RfqItemForm(_this.idPrefix);
                return _this;
            }
            F10_RfqItemDialog.prototype.getFormKey = function () { return Procurement.F10_RfqItemForm.formKey; };
            F10_RfqItemDialog.prototype.getIdProperty = function () { return Procurement.RfqItemRow.idProperty; };
            F10_RfqItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            F10_RfqItemDialog.prototype.getNameProperty = function () { return Procurement.RfqItemRow.nameProperty; };
            F10_RfqItemDialog.prototype.getService = function () { return Procurement.F10_RfqItemService.baseUrl; };
            F10_RfqItemDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_RfqItemDialog);
            return F10_RfqItemDialog;
        }(_Ext.DialogBase));
        Procurement.F10_RfqItemDialog = F10_RfqItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_RfqItemGrid = /** @class */ (function (_super) {
            __extends(F10_RfqItemGrid, _super);
            function F10_RfqItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F10_RfqItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F10_RfqItem'; };
            F10_RfqItemGrid.prototype.getDialogType = function () { return Procurement.F10_RfqItemDialog; };
            F10_RfqItemGrid.prototype.getIdProperty = function () { return Procurement.RfqItemRow.idProperty; };
            F10_RfqItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            F10_RfqItemGrid.prototype.getService = function () { return Procurement.F10_RfqItemService.baseUrl; };
            F10_RfqItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_RfqItemGrid);
            return F10_RfqItemGrid;
        }(_Ext.GridBase));
        Procurement.F10_RfqItemGrid = F10_RfqItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F10_RfqItemsEditor = /** @class */ (function (_super) {
            __extends(F10_RfqItemsEditor, _super);
            function F10_RfqItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                //  this.toolbar.element.remove();
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                //columns = columns.filter(f => f.field != 'OwnerEstimateReview');
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                columns = columns.filter(function (f) { return f.field != 'Plant'; });
                columns = columns.filter(function (f) { return f.field != 'StorageLocation'; });
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            F10_RfqItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F10_RfqItem"; };
            F10_RfqItemsEditor.prototype.getDialogType = function () { return Procurement.F10_RfqItemDialog; };
            F10_RfqItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            F10_RfqItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F10_RfqItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            F10_RfqItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our export button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.F10_RfqItemService.baseUrl + "/ListExcelOwnerEstimateReview", request: gridRows, target: '_blank' });
                    }
                });
                // add our import button
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new Procurement.OwnerEstimateReviewImportDialog();
                        dialog.rfqItemsEditor = _this;
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            F10_RfqItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F10_RfqItemsEditor);
            return F10_RfqItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F10_RfqItemsEditor = F10_RfqItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F11_ProposeWinnerDialog = /** @class */ (function (_super) {
            __extends(F11_ProposeWinnerDialog, _super);
            //public parentDialog: F11_ProposeWinnerDialog;
            function F11_ProposeWinnerDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F11_ProposeWinnerForm(_this.idPrefix);
                //Change when click dropdowntext evaluation conclution
                _this.form.ProcRejectTender.changeSelect2(function (e) { return _this.updateInterface(); });
                return _this;
            }
            F11_ProposeWinnerDialog.prototype.getFormKey = function () { return Procurement.F11_ProposeWinnerForm.formKey; };
            F11_ProposeWinnerDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F11_ProposeWinnerDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F11_ProposeWinnerDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F11_ProposeWinnerDialog.prototype.getService = function () { return Procurement.F11_ProposeWinnerService.baseUrl; };
            F11_ProposeWinnerDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F11_ProposeWinnerService.Submit({
                                EntityId: _this.get_entityId(),
                                //Entity: this.entity.ProcAgreement,
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F11_ProposeWinnerService.SendMail({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "reject-button"; }) + 1, 0, {
                    title: Q.text('Reject'),
                    cssClass: 'reject',
                    icon: 'fa-times-circle text-red',
                    onClick: function () {
                        Q.confirm('Are you sure want to Reject?', function () {
                            Procurement.F11_ProposeWinnerService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F11_ProposeWinnerService.SendMailReject({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Rejected.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R6] - Berita Acara Hasil Pengadaan",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entityId();
                        var a = '../Procurement/Report/ReportR6?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F11_ProposeWinnerDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                //console.log("Apapun itu" + this.form.ProcRejectTender.get_value());
                //if (this.form.EvaluationConclusionId.get_value() == "No Quote") {
                if (this.form.ProcRejectTender.get_value() != 1) {
                    this.form.ProcRejectTenderDesc.getGridField().toggle(true);
                    this.toolbar.findButton(".reject").show();
                    this.toolbar.findButton(".submit-button").hide();
                    //this.onDialogOpen();
                }
                else {
                    //this.form.RfqItems.element.parent().parent().toggle(false);
                    this.form.ProcRejectTenderDesc.getGridField().toggle(false);
                    this.toolbar.findButton(".reject").hide();
                    this.toolbar.findButton(".submit-button").show();
                    //this.onDialogOpen();
                }
            };
            F11_ProposeWinnerDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                this.toolbar.findButton(".reject").hide();
                this.toolbar.findButton(".submit-button").show();
                this.form.ProcRejectTenderDesc.getGridField().toggle(false);
                //hide next button when flow passed
                if (this.entity.F11SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F11_ProposeWinnerDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F11_ProposeWinnerDialog);
            return F11_ProposeWinnerDialog;
        }(_Ext.DialogBase));
        Procurement.F11_ProposeWinnerDialog = F11_ProposeWinnerDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F11_ProposeWinnerGrid = /** @class */ (function (_super) {
            __extends(F11_ProposeWinnerGrid, _super);
            function F11_ProposeWinnerGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F11_ProposeWinnerGrid.prototype.getColumnsKey = function () { return 'Procurement.F11_ProposeWinner'; };
            F11_ProposeWinnerGrid.prototype.getDialogType = function () { return Procurement.F11_ProposeWinnerDialog; };
            F11_ProposeWinnerGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F11_ProposeWinnerGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F11_ProposeWinnerGrid.prototype.getService = function () { return Procurement.F11_ProposeWinnerService.baseUrl; };
            F11_ProposeWinnerGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F11_ProposeWinnerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F11_ProposeWinnerGrid);
            return F11_ProposeWinnerGrid;
        }(_Ext.GridBase));
        Procurement.F11_ProposeWinnerGrid = F11_ProposeWinnerGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F12_ProcAsDialog = /** @class */ (function (_super) {
            __extends(F12_ProcAsDialog, _super);
            function F12_ProcAsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F12_ProcAsForm(_this.idPrefix);
                return _this;
            }
            F12_ProcAsDialog.prototype.getFormKey = function () { return Procurement.F12_ProcAsForm.formKey; };
            F12_ProcAsDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F12_ProcAsDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F12_ProcAsDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F12_ProcAsDialog.prototype.getService = function () { return Procurement.F12_ProcAsService.baseUrl; };
            F12_ProcAsDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        //this.save();
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F12_ProcAsService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                return buttons;
            };
            F12_ProcAsDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F12SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F12_ProcAsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F12_ProcAsDialog);
            return F12_ProcAsDialog;
        }(_Ext.DialogBase));
        Procurement.F12_ProcAsDialog = F12_ProcAsDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F12_ProcAsGrid = /** @class */ (function (_super) {
            __extends(F12_ProcAsGrid, _super);
            function F12_ProcAsGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F12_ProcAsGrid.prototype.getColumnsKey = function () { return 'Procurement.F12_ProcAs'; };
            F12_ProcAsGrid.prototype.getDialogType = function () { return Procurement.F12_ProcAsDialog; };
            F12_ProcAsGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F12_ProcAsGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F12_ProcAsGrid.prototype.getService = function () { return Procurement.F12_ProcAsService.baseUrl; };
            F12_ProcAsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F12_ProcAsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F12_ProcAsGrid);
            return F12_ProcAsGrid;
        }(_Ext.GridBase));
        Procurement.F12_ProcAsGrid = F12_ProcAsGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(F13_ProcParticipantDialog, _super);
            function F13_ProcParticipantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F13_ProcParticipantForm(_this.idPrefix);
                return _this;
            }
            F13_ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.F13_ProcParticipantForm.formKey; };
            F13_ProcParticipantDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F13_ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F13_ProcParticipantDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F13_ProcParticipantDialog.prototype.getService = function () { return Procurement.F13_ProcParticipantService.baseUrl; };
            F13_ProcParticipantDialog.prototype.getToolbarButtons = function () {
                return [];
            };
            F13_ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_ProcParticipantDialog);
            return F13_ProcParticipantDialog;
        }(_Ext.DialogBase));
        Procurement.F13_ProcParticipantDialog = F13_ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(F13_ProcParticipantGrid, _super);
            function F13_ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F13_ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.F13_ProcParticipant'; };
            F13_ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.F13_ProcParticipantDialog; };
            F13_ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F13_ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F13_ProcParticipantGrid.prototype.getService = function () { return Procurement.F13_ProcParticipantService.baseUrl; };
            F13_ProcParticipantGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F13_ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_ProcParticipantGrid);
            return F13_ProcParticipantGrid;
        }(_Ext.GridBase));
        Procurement.F13_ProcParticipantGrid = F13_ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcParticipantsEditor = /** @class */ (function (_super) {
            __extends(F13_ProcParticipantsEditor, _super);
            function F13_ProcParticipantsEditor(container) {
                return _super.call(this, container) || this;
                //this.toolbar.element.remove();
            }
            F13_ProcParticipantsEditor.prototype.getColumnsKey = function () { return "Procurement.F13_ProcParticipant"; };
            F13_ProcParticipantsEditor.prototype.getDialogType = function () { return Procurement.F13_ProcParticipantDialog; };
            F13_ProcParticipantsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F13_ProcParticipantsEditor.prototype.validateEntity = function (row, id) {
                //row.VendorId = Q.toId(row.VendorId);
                var sameVendor = Q.tryFirst(this.view.getItems(), function (x) { return x.VendorId === row.VendorId; });
                if (sameVendor && this.id(sameVendor) !== id) {
                    Q.alert('This Vendor is already in procurement participants');
                    return false;
                }
                //console.log(row);
                //console.log(VendorRow.getLookup().items);
                //console.log(VendorRow.getLookup().itemById[row.VendorId]);
                //console.log(row.VendorId);
                row.VendorName = Procurement.VendorRow.getLookup().itemById[row.VendorId].Name;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F13_ProcParticipantsEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F13_ProcParticipantsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_ProcParticipantsEditor);
            return F13_ProcParticipantsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F13_ProcParticipantsEditor = F13_ProcParticipantsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcResultDecisionDialog = /** @class */ (function (_super) {
            __extends(F13_ProcResultDecisionDialog, _super);
            function F13_ProcResultDecisionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F13_ProcResultDecisionForm(_this.idPrefix);
                return _this;
            }
            F13_ProcResultDecisionDialog.prototype.getFormKey = function () { return Procurement.F13_ProcResultDecisionForm.formKey; };
            F13_ProcResultDecisionDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F13_ProcResultDecisionDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F13_ProcResultDecisionDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F13_ProcResultDecisionDialog.prototype.getService = function () { return Procurement.F13_ProcResultDecisionService.baseUrl; };
            F13_ProcResultDecisionDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.push({
                    title: Q.text('Approve'),
                    cssClass: 'approve-button',
                    icon: 'fa-check text-green',
                    onClick: function () {
                        if (!_this.validateForm())
                            return;
                        Q.confirm('Are you sure want to approve?', function () {
                            Procurement.F13_ProcResultDecisionService.Approve({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F13_ProcResultDecisionService.SendMailApprove({ EntityId: _this.get_entityId() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                buttons.push({
                    title: Q.text('Reject'),
                    cssClass: 'reject-button',
                    icon: 'fa-close text-red',
                    onClick: function () {
                        if (!_this.validateForm())
                            return;
                        Q.confirm('Are you sure want to reject?', function () {
                            Procurement.F13_ProcResultDecisionService.Reject({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F13_ProcResultDecisionService.SendMailReject({ EntityId: _this.get_entityId() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                return buttons;
                //buttons.push({
                //    title: "Report R1",
                //    cssClass: "'dd-note-button",
                //    icon: "fa-print",
                //    separator: true,
                //    onClick: () => {
                //        this.get_entity
                //        this.get_entityId()
                //        var a = '/Procurement/Report/ReportR1?';
                //        //window.open(a, '_blank');
                //        window.open(a + 'ProcurementId=' + this.get_entityId(), '_blank');
                //        //window.location.href = a + this.get_entityId(), '_blank';
                //    }
                //});
            };
            F13_ProcResultDecisionDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //remove button after submision completed
                if (this.form.F13SubmitDate.value) {
                    this.toolbar.findButton(".approve-button").remove();
                    this.toolbar.findButton(".reject-button").remove();
                }
            };
            F13_ProcResultDecisionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_ProcResultDecisionDialog);
            return F13_ProcResultDecisionDialog;
        }(_Ext.DialogBase));
        Procurement.F13_ProcResultDecisionDialog = F13_ProcResultDecisionDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_ProcResultDecisionGrid = /** @class */ (function (_super) {
            __extends(F13_ProcResultDecisionGrid, _super);
            function F13_ProcResultDecisionGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F13_ProcResultDecisionGrid.prototype.getColumnsKey = function () { return 'Procurement.F13_ProcResultDecision'; };
            F13_ProcResultDecisionGrid.prototype.getDialogType = function () { return Procurement.F13_ProcResultDecisionDialog; };
            F13_ProcResultDecisionGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F13_ProcResultDecisionGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F13_ProcResultDecisionGrid.prototype.getService = function () { return Procurement.F13_ProcResultDecisionService.baseUrl; };
            F13_ProcResultDecisionGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F13_ProcResultDecisionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_ProcResultDecisionGrid);
            return F13_ProcResultDecisionGrid;
        }(_Ext.GridBase));
        Procurement.F13_ProcResultDecisionGrid = F13_ProcResultDecisionGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_RfqItemDialog = /** @class */ (function (_super) {
            __extends(F13_RfqItemDialog, _super);
            function F13_RfqItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F13_RfqItemForm(_this.idPrefix);
                return _this;
            }
            F13_RfqItemDialog.prototype.getFormKey = function () { return Procurement.F13_RfqItemForm.formKey; };
            F13_RfqItemDialog.prototype.getIdProperty = function () { return Procurement.RfqItemRow.idProperty; };
            F13_RfqItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            F13_RfqItemDialog.prototype.getNameProperty = function () { return Procurement.RfqItemRow.nameProperty; };
            F13_RfqItemDialog.prototype.getService = function () { return Procurement.F13_RfqItemService.baseUrl; };
            F13_RfqItemDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_RfqItemDialog);
            return F13_RfqItemDialog;
        }(_Ext.DialogBase));
        Procurement.F13_RfqItemDialog = F13_RfqItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_RfqItemGrid = /** @class */ (function (_super) {
            __extends(F13_RfqItemGrid, _super);
            function F13_RfqItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F13_RfqItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F13_RfqItem'; };
            F13_RfqItemGrid.prototype.getDialogType = function () { return Procurement.F13_RfqItemDialog; };
            F13_RfqItemGrid.prototype.getIdProperty = function () { return Procurement.RfqItemRow.idProperty; };
            F13_RfqItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            F13_RfqItemGrid.prototype.getService = function () { return Procurement.F13_RfqItemService.baseUrl; };
            F13_RfqItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_RfqItemGrid);
            return F13_RfqItemGrid;
        }(_Ext.GridBase));
        Procurement.F13_RfqItemGrid = F13_RfqItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F13_RfqItemsEditor = /** @class */ (function (_super) {
            __extends(F13_RfqItemsEditor, _super);
            function F13_RfqItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                //  this.toolbar.element.remove();
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                //columns = columns.filter(f => f.field != 'OwnerEstimateReview');
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                columns = columns.filter(function (f) { return f.field != 'Plant'; });
                columns = columns.filter(function (f) { return f.field != 'StorageLocation'; });
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            F13_RfqItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F13_RfqItem"; };
            F13_RfqItemsEditor.prototype.getDialogType = function () { return Procurement.F13_RfqItemDialog; };
            F13_RfqItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            F13_RfqItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F13_RfqItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            F13_RfqItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our export button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.F13_RfqItemService.baseUrl + "/ListExcelOwnerEstimateReview", request: gridRows, target: '_blank' });
                    }
                });
                // add our import button
                //buttons.push({
                //    title: 'Import From Excel',
                //    cssClass: 'export-xlsx-button',
                //    onClick: () => {
                //        // open import dialog, let it handle rest
                //        var dialog = new OwnerEstimateReviewImportDialog();
                //        dialog.rfqItemsEditor = this;
                //        dialog.element.on('dialogclose', () => {
                //            this.refresh();
                //            dialog = null;
                //        });
                //        dialog.dialogOpen();
                //    }
                //});
                return buttons;
            };
            F13_RfqItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F13_RfqItemsEditor);
            return F13_RfqItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F13_RfqItemsEditor = F13_RfqItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F14_WinnerAnnouncementDialog = /** @class */ (function (_super) {
            __extends(F14_WinnerAnnouncementDialog, _super);
            function F14_WinnerAnnouncementDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F14_WinnerAnnouncementForm(_this.idPrefix);
                return _this;
            }
            F14_WinnerAnnouncementDialog.prototype.getFormKey = function () { return Procurement.F14_WinnerAnnouncementForm.formKey; };
            F14_WinnerAnnouncementDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F14_WinnerAnnouncementDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F14_WinnerAnnouncementDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F14_WinnerAnnouncementDialog.prototype.getService = function () { return Procurement.F14_WinnerAnnouncementService.baseUrl; };
            F14_WinnerAnnouncementDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F14_WinnerAnnouncementService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F14_WinnerAnnouncementService.SendMail({ EntityId: _this.get_entityId() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                return buttons;
            };
            F14_WinnerAnnouncementDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F14SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F14_WinnerAnnouncementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F14_WinnerAnnouncementDialog);
            return F14_WinnerAnnouncementDialog;
        }(_Ext.DialogBase));
        Procurement.F14_WinnerAnnouncementDialog = F14_WinnerAnnouncementDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F14_WinnerAnnouncementGrid = /** @class */ (function (_super) {
            __extends(F14_WinnerAnnouncementGrid, _super);
            function F14_WinnerAnnouncementGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F14_WinnerAnnouncementGrid.prototype.getColumnsKey = function () { return 'Procurement.F14_WinnerAnnouncement'; };
            F14_WinnerAnnouncementGrid.prototype.getDialogType = function () { return Procurement.F14_WinnerAnnouncementDialog; };
            F14_WinnerAnnouncementGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F14_WinnerAnnouncementGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F14_WinnerAnnouncementGrid.prototype.getService = function () { return Procurement.F14_WinnerAnnouncementService.baseUrl; };
            F14_WinnerAnnouncementGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F14_WinnerAnnouncementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F14_WinnerAnnouncementGrid);
            return F14_WinnerAnnouncementGrid;
        }(_Ext.GridBase));
        Procurement.F14_WinnerAnnouncementGrid = F14_WinnerAnnouncementGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F15_ObjectionProcessDialog = /** @class */ (function (_super) {
            __extends(F15_ObjectionProcessDialog, _super);
            function F15_ObjectionProcessDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F15_ObjectionProcessForm(_this.idPrefix);
                _this.form.SubmitObjection.changeSelect2(function (e) {
                    _this.updateInterface();
                });
                return _this;
            }
            F15_ObjectionProcessDialog.prototype.getFormKey = function () { return Procurement.F15_ObjectionProcessForm.formKey; };
            F15_ObjectionProcessDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F15_ObjectionProcessDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F15_ObjectionProcessDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F15_ObjectionProcessDialog.prototype.getService = function () { return Procurement.F15_ObjectionProcessService.baseUrl; };
            F15_ObjectionProcessDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F15_ObjectionProcessService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Data has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                return buttons;
            };
            F15_ObjectionProcessDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F15ParticipantSubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
                this.form.ObjectionTerms.value = SCMONLINE.Administration.SettingRow.getLookup().itemById["objection_terms"].Value;
                this.updateInterface();
            };
            F15_ObjectionProcessDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                if (this.form.SubmitObjection.get_value() == "true") {
                    this.form.ObjectionTerms.element.parent().show();
                    this.form.ObjectionDescription.element.parent().show();
                }
                else {
                    this.form.ObjectionTerms.element.parent().hide();
                    this.form.ObjectionDescription.element.parent().hide();
                }
            };
            F15_ObjectionProcessDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F15_ObjectionProcessDialog);
            return F15_ObjectionProcessDialog;
        }(_Ext.DialogBase));
        Procurement.F15_ObjectionProcessDialog = F15_ObjectionProcessDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F15_ObjectionProcessGrid = /** @class */ (function (_super) {
            __extends(F15_ObjectionProcessGrid, _super);
            function F15_ObjectionProcessGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F15_ObjectionProcessGrid.prototype.getColumnsKey = function () { return 'Procurement.F15_ObjectionProcess'; };
            F15_ObjectionProcessGrid.prototype.getDialogType = function () { return Procurement.F15_ObjectionProcessDialog; };
            F15_ObjectionProcessGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F15_ObjectionProcessGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F15_ObjectionProcessGrid.prototype.getService = function () { return Procurement.F15_ObjectionProcessService.baseUrl; };
            F15_ObjectionProcessGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F15_ObjectionProcessGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F15_ObjectionProcessGrid);
            return F15_ObjectionProcessGrid;
        }(_Ext.GridBase));
        Procurement.F15_ObjectionProcessGrid = F15_ObjectionProcessGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F16_WinnerDesignationDialog = /** @class */ (function (_super) {
            __extends(F16_WinnerDesignationDialog, _super);
            function F16_WinnerDesignationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F16_WinnerDesignationForm(_this.idPrefix);
                return _this;
            }
            F16_WinnerDesignationDialog.prototype.getFormKey = function () { return Procurement.F16_WinnerDesignationForm.formKey; };
            F16_WinnerDesignationDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F16_WinnerDesignationDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F16_WinnerDesignationDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F16_WinnerDesignationDialog.prototype.getService = function () { return Procurement.F16_WinnerDesignationService.baseUrl; };
            F16_WinnerDesignationDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F16_WinnerDesignationService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R7] - SPPL",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entityId();
                        var a = '../Procurement/Report/ReportR7?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F16_WinnerDesignationDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F16SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F16_WinnerDesignationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F16_WinnerDesignationDialog);
            return F16_WinnerDesignationDialog;
        }(_Ext.DialogBase));
        Procurement.F16_WinnerDesignationDialog = F16_WinnerDesignationDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F16_WinnerDesignationGrid = /** @class */ (function (_super) {
            __extends(F16_WinnerDesignationGrid, _super);
            function F16_WinnerDesignationGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F16_WinnerDesignationGrid.prototype.getColumnsKey = function () { return 'Procurement.F16_WinnerDesignation'; };
            F16_WinnerDesignationGrid.prototype.getDialogType = function () { return Procurement.F16_WinnerDesignationDialog; };
            F16_WinnerDesignationGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F16_WinnerDesignationGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F16_WinnerDesignationGrid.prototype.getService = function () { return Procurement.F16_WinnerDesignationService.baseUrl; };
            F16_WinnerDesignationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F16_WinnerDesignationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F16_WinnerDesignationGrid);
            return F16_WinnerDesignationGrid;
        }(_Ext.GridBase));
        Procurement.F16_WinnerDesignationGrid = F16_WinnerDesignationGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F17_PurchOrderDocUploadDialog = /** @class */ (function (_super) {
            __extends(F17_PurchOrderDocUploadDialog, _super);
            function F17_PurchOrderDocUploadDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F17_PurchOrderDocUploadForm(_this.idPrefix);
                return _this;
            }
            F17_PurchOrderDocUploadDialog.prototype.getFormKey = function () { return Procurement.F17_PurchOrderDocUploadForm.formKey; };
            F17_PurchOrderDocUploadDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F17_PurchOrderDocUploadDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F17_PurchOrderDocUploadDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F17_PurchOrderDocUploadDialog.prototype.getService = function () { return Procurement.F17_PurchOrderDocUploadService.baseUrl; };
            F17_PurchOrderDocUploadDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F17_PurchOrderDocUploadService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Data has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                return buttons;
            };
            F17_PurchOrderDocUploadDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F17SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F17_PurchOrderDocUploadDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F17_PurchOrderDocUploadDialog);
            return F17_PurchOrderDocUploadDialog;
        }(_Ext.DialogBase));
        Procurement.F17_PurchOrderDocUploadDialog = F17_PurchOrderDocUploadDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F17_PurchOrderDocUploadGrid = /** @class */ (function (_super) {
            __extends(F17_PurchOrderDocUploadGrid, _super);
            function F17_PurchOrderDocUploadGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F17_PurchOrderDocUploadGrid.prototype.getColumnsKey = function () { return 'Procurement.F17_PurchOrderDocUpload'; };
            F17_PurchOrderDocUploadGrid.prototype.getDialogType = function () { return Procurement.F17_PurchOrderDocUploadDialog; };
            F17_PurchOrderDocUploadGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F17_PurchOrderDocUploadGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F17_PurchOrderDocUploadGrid.prototype.getService = function () { return Procurement.F17_PurchOrderDocUploadService.baseUrl; };
            F17_PurchOrderDocUploadGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F17_PurchOrderDocUploadGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F17_PurchOrderDocUploadGrid);
            return F17_PurchOrderDocUploadGrid;
        }(_Ext.GridBase));
        Procurement.F17_PurchOrderDocUploadGrid = F17_PurchOrderDocUploadGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeApprovalDialog = /** @class */ (function (_super) {
            __extends(F19_CommitteeApprovalDialog, _super);
            function F19_CommitteeApprovalDialog(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Procurement.F19_CommitteeApprovalForm(_this.idPrefix);
                _this.form.CommitteeMember.parentDialog = _this;
                return _this;
            }
            F19_CommitteeApprovalDialog.prototype.getFormKey = function () { return Procurement.F19_CommitteeApprovalForm.formKey; };
            F19_CommitteeApprovalDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F19_CommitteeApprovalDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F19_CommitteeApprovalDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F19_CommitteeApprovalDialog.prototype.getService = function () { return Procurement.F19_CommitteeApprovalService.baseUrl; };
            F19_CommitteeApprovalDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.push({
                    title: Q.text('Approve'),
                    cssClass: 'approve-button',
                    icon: 'fa-check text-green',
                    onClick: function () {
                        if (!_this.validateForm())
                            return;
                        Q.confirm('Are you sure want to approve?', function () {
                            Procurement.F19_CommitteeApprovalService.Approve({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                //F19_CommitteeMemberService.Submit({ EntityId: this.get_entityId() },
                                //    response => {
                                Q.notifySuccess("Procuremnt " + _this.form.ProcurementId.value + " has been successfully Submitted.");
                                _this.reloadById();
                                //    }
                                //);
                            });
                        });
                    }
                });
                buttons.push({
                    title: Q.text('Reject'),
                    cssClass: 'reject-button',
                    icon: 'fa-close text-red',
                    onClick: function () {
                        if (!_this.validateForm())
                            return;
                        Q.confirm('Are you sure want to reject?', function () {
                            Procurement.F19_CommitteeApprovalService.Reject({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                //F19_CommitteeMemberService.SendMailReject({ EntityId: this.get_entityId() },
                                //    response => {
                                Q.notifyError("Procuremnt " + _this.form.ProcurementId.value + " has been successfully Rejected.");
                                _this.reloadById();
                                //}
                                //);
                            });
                        });
                    }
                });
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                return buttons;
            };
            F19_CommitteeApprovalDialog.prototype.afterLoadEntity = function () {
                var _this = this;
                _super.prototype.afterLoadEntity.call(this);
                //remove button after submision completed
                var permissions = null;
                //Console.log(this.permissions);
                this.form.CommitteeMember.view.getItems().forEach(function (x) {
                    //console.log(x.ApprovalDate + ",Coba")
                    //var auth = Authorization.userDefinition.UserId
                    //console.log(auth)
                    console.log(x.RoleId);
                    console.log(SCMONLINE.Authorization.userDefinition.UserId);
                    var request;
                    //request = {};
                    //request.Criteria = Serenity.Criteria.and(request.Criteria,[["UserId"], "=", Authorization.userDefinition.UserId]);
                    SCMONLINE.Administration.UserRoleService.List({
                        UserID: SCMONLINE.Authorization.userDefinition.UserId
                    }, function (response) {
                        response.Entities.forEach(function (item) {
                            if (item == x.RoleId) {
                                var a = x.ApprovalDate;
                                console.log(x.ApprovalDate);
                                console.log(item);
                                console.log(x);
                                if (x.ApprovalDate != null) {
                                    _this.toolbar.findButton(".approve-button").remove();
                                    _this.toolbar.findButton(".reject-button").remove();
                                }
                            }
                        });
                        //////response.Entities.forEach(item => {
                        //////    var user: UserRoleRow;
                        console.log(permissions);
                        //////})
                    });
                    //if (Authorization.userDefinition.UserId == x.RoleId) {
                    //    var a = x.RoleId;
                    //    console.log("coba aja tes")
                    //    console.log(x.ApprovalDate)
                    //    console.log(a)
                    //    if (x.ApprovalDate != null) {
                    //        this.toolbar.findButton(".approve-button").remove();
                    //        this.toolbar.findButton(".reject-button").remove();
                    //    }
                    //} 
                    //this.permissions = new SCMONLINE.Administration.RoleCheckEditor(this.byId('Roles'));
                    //SCMONLINE.Administration.UserRoleService.List({
                    //    UserID: Authorization.userDefinition.UserId
                    //UserID: this.options.byId('Roles')
                    //UserID: this.options.userID
                }
                //, response => {
                //console.log(x.ApprovalDate);
                //        //this.permissions.value = response.Entities.map(x => x.toString());
                //        //console.log(a);
                //    if (x.ApprovalDate) {
                //        this.toolbar.findButton(".approve-button").remove();
                //        this.toolbar.findButton(".reject-button").remove();
                //    }
                ////});
                //}
                );
            };
            F19_CommitteeApprovalDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
            };
            F19_CommitteeApprovalDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                //need this to re-adjust detail grid, otherwise some column wouldn't shown
                this.form.CommitteeMember.slickGrid.resizeCanvas();
            };
            F19_CommitteeApprovalDialog.prototype.reload = function () {
                //console.log("asldnasdpi");
                this.reloadById();
                //this.form.CommitteeMember.refresh();
                //this.form.CommitteeMember.view.refresh();
            };
            F19_CommitteeApprovalDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_CommitteeApprovalDialog);
            return F19_CommitteeApprovalDialog;
        }(_Ext.DialogBase));
        Procurement.F19_CommitteeApprovalDialog = F19_CommitteeApprovalDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeApprovalGrid = /** @class */ (function (_super) {
            __extends(F19_CommitteeApprovalGrid, _super);
            function F19_CommitteeApprovalGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F19_CommitteeApprovalGrid.prototype.getColumnsKey = function () { return 'Procurement.F19_CommitteeApproval'; };
            F19_CommitteeApprovalGrid.prototype.getDialogType = function () { return Procurement.F19_CommitteeApprovalDialog; };
            F19_CommitteeApprovalGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F19_CommitteeApprovalGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F19_CommitteeApprovalGrid.prototype.getService = function () { return Procurement.F19_CommitteeApprovalService.baseUrl; };
            F19_CommitteeApprovalGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F19_CommitteeApprovalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_CommitteeApprovalGrid);
            return F19_CommitteeApprovalGrid;
        }(_Ext.GridBase));
        Procurement.F19_CommitteeApprovalGrid = F19_CommitteeApprovalGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeMemberDialog = /** @class */ (function (_super) {
            __extends(F19_CommitteeMemberDialog, _super);
            function F19_CommitteeMemberDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F19_CommitteeMemberForm(_this.idPrefix);
                return _this;
            }
            F19_CommitteeMemberDialog.prototype.getFormKey = function () { return Procurement.F19_CommitteeMemberForm.formKey; };
            F19_CommitteeMemberDialog.prototype.getIdProperty = function () { return Procurement.CommitteeMemberRow.idProperty; };
            F19_CommitteeMemberDialog.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberRow.localTextPrefix; };
            F19_CommitteeMemberDialog.prototype.getNameProperty = function () { return Procurement.CommitteeMemberRow.nameProperty; };
            F19_CommitteeMemberDialog.prototype.getService = function () { return Procurement.F19_CommitteeMemberService.baseUrl; };
            F19_CommitteeMemberDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                //if (this.parentForm.form.ContractTypeId.value == 1) {
                //}
            };
            F19_CommitteeMemberDialog.prototype.onDialogClose = function () {
                this.parentDialog.reload();
            };
            F19_CommitteeMemberDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                //buttons.push(
                //    {
                //        title: Q.text('Approve'),
                //        cssClass: 'approve-button',
                //        icon: 'fa-check text-green',
                //        onClick: () => {
                //            if (!this.validateForm()) return;
                //            Q.confirm('Are you sure want to approve?', () => {
                //                F19_CommitteeMemberService.Approve({
                //                    EntityId: this.get_entityId(),
                //                    Entity: this.getSaveEntity()
                //                }, response => {
                //                    //F19_CommitteeMemberService.SendMailApprove({ EntityId: this.get_entityId() },
                //                    //    response => {
                //                            Q.notifySuccess("Procuremnt " + this.form.ProcurementId.value + " has been successfully Submitted.");
                //                            this.reloadById();
                //                    //    }
                //                    //);
                //                });
                //            });
                //        }
                //    }
                //);
                //buttons.push(
                //    {
                //        title: Q.text('Reject'),
                //        cssClass: 'reject-button',
                //        icon: 'fa-close text-red',
                //        onClick: () => {
                //            if (!this.validateForm()) return;
                //            Q.confirm('Are you sure want to reject?', () => {
                //                F19_CommitteeMemberService.Reject({
                //                    EntityId: this.get_entityId(),
                //                    Entity: this.getSaveEntity()
                //                }, response => {
                //                    //F19_CommitteeMemberService.SendMailReject({ EntityId: this.get_entityId() },
                //                    //    response => {
                //                            Q.notifySuccess("Procuremnt " + this.form.ProcurementId.value + " has been successfully Submitted.");
                //                            this.reloadById();
                //                        //}
                //                    //);
                //                });
                //            });
                //        }
                //    }
                //);
                return buttons;
            };
            F19_CommitteeMemberDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //remove button after submision completed
                if (this.form.ApprovalDate.value) {
                    this.toolbar.findButton(".approve-button").remove();
                    this.toolbar.findButton(".reject-button").remove();
                }
            };
            F19_CommitteeMemberDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_CommitteeMemberDialog);
            return F19_CommitteeMemberDialog;
        }(_Ext.DialogBase));
        Procurement.F19_CommitteeMemberDialog = F19_CommitteeMemberDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeMemberGrid = /** @class */ (function (_super) {
            __extends(F19_CommitteeMemberGrid, _super);
            function F19_CommitteeMemberGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F19_CommitteeMemberGrid.prototype.getColumnsKey = function () { return 'Procurement.F19_CommitteeMember'; };
            F19_CommitteeMemberGrid.prototype.getDialogType = function () { return Procurement.F19_CommitteeMemberDialog; };
            F19_CommitteeMemberGrid.prototype.getIdProperty = function () { return Procurement.CommitteeMemberRow.idProperty; };
            F19_CommitteeMemberGrid.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberRow.localTextPrefix; };
            F19_CommitteeMemberGrid.prototype.getService = function () { return Procurement.F19_CommitteeMemberService.baseUrl; };
            F19_CommitteeMemberGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_CommitteeMemberGrid);
            return F19_CommitteeMemberGrid;
        }(_Ext.GridBase));
        Procurement.F19_CommitteeMemberGrid = F19_CommitteeMemberGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_CommitteeMembersEditor = /** @class */ (function (_super) {
            __extends(F19_CommitteeMembersEditor, _super);
            function F19_CommitteeMembersEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.toolbar.element.toggle(false);
                return _this;
            }
            F19_CommitteeMembersEditor.prototype.getColumnsKey = function () { return "Procurement.F19_CommitteeMember"; };
            F19_CommitteeMembersEditor.prototype.getDialogType = function () { return Procurement.F19_CommitteeMemberDialog; };
            F19_CommitteeMembersEditor.prototype.getLocalTextPrefix = function () { return Procurement.CommitteeMemberRow.localTextPrefix; };
            F19_CommitteeMembersEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F19_CommitteeMembersEditor.prototype.validateEntity = function (row, id) {
                var sameRole = Q.tryFirst(this.view.getItems(), function (x) { return x.RoleId === row.RoleId; });
                if (sameRole && this.id(sameRole) !== id) {
                    Q.alert('This Role is already in Committee List');
                    return false;
                }
                row.RoleRoleName = SCMONLINE.Administration.RoleRow.getLookup().itemById[row.RoleId].RoleName;
                row.CommitteeRoleName = Procurement.CommitteeRoleRow.getLookup().itemById[row.CommitteeRoleId].Name;
                return true;
            };
            F19_CommitteeMembersEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_CommitteeMembersEditor);
            return F19_CommitteeMembersEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F19_CommitteeMembersEditor = F19_CommitteeMembersEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantDialog, _super);
            function F19_ProcParticipantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F19_ProcParticipantForm(_this.idPrefix);
                return _this;
            }
            F19_ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.F19_ProcParticipantForm.formKey; };
            F19_ProcParticipantDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F19_ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F19_ProcParticipantDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F19_ProcParticipantDialog.prototype.getService = function () { return Procurement.F19_ProcParticipantService.baseUrl; };
            F19_ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_ProcParticipantDialog);
            return F19_ProcParticipantDialog;
        }(_Ext.DialogBase));
        Procurement.F19_ProcParticipantDialog = F19_ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantGrid, _super);
            function F19_ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F19_ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.F19_ProcParticipant'; };
            F19_ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.F19_ProcParticipantDialog; };
            F19_ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F19_ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F19_ProcParticipantGrid.prototype.getService = function () { return Procurement.F19_ProcParticipantService.baseUrl; };
            F19_ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_ProcParticipantGrid);
            return F19_ProcParticipantGrid;
        }(_Ext.GridBase));
        Procurement.F19_ProcParticipantGrid = F19_ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantsEditor = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantsEditor, _super);
            function F19_ProcParticipantsEditor(container) {
                return _super.call(this, container) || this;
                //this.toolbar.element.remove();
            }
            F19_ProcParticipantsEditor.prototype.getColumnsKey = function () { return "Procurement.F19_ProcParticipant"; };
            F19_ProcParticipantsEditor.prototype.getDialogType = function () { return Procurement.F19_ProcParticipantDialog; };
            F19_ProcParticipantsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F19_ProcParticipantsEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F19_ProcParticipantsEditor.prototype.validateEntity = function (row, id) {
                //row.VendorId = Q.toId(row.VendorId);
                var sameVendor = Q.tryFirst(this.view.getItems(), function (x) { return x.VendorId === row.VendorId; });
                if (sameVendor && this.id(sameVendor) !== id) {
                    Q.alert('This Vendor is already in procurement participants');
                    return false;
                }
                //console.log(row);
                //console.log(VendorRow.getLookup().items);
                //console.log(VendorRow.getLookup().itemById[row.VendorId]);
                //console.log(row.VendorId);
                row.VendorName = Procurement.VendorRow.getLookup().itemById[row.VendorId].Name;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            //protected getColumns() {
            //    var c = super.getColumns();
            //    console.log("this.parentDialog");
            //    console.log(this.parentDialog);
            //    //1 (Satu) Tahap - 2 (Dua) Sampul
            //    //if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
            //        c.splice(Q.indexOf(c, x => x.field == ProcParticipantRow.Fields.PriceDocumentFile), 1);
            //    //}
            //    return c;
            //}
            F19_ProcParticipantsEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F19_ProcParticipantsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_ProcParticipantsEditor);
            return F19_ProcParticipantsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F19_ProcParticipantsEditor = F19_ProcParticipantsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantItemDialog, _super);
            function F19_ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F19_ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            F19_ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.F19_ProcParticipantItemForm.formKey; };
            F19_ProcParticipantItemDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F19_ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F19_ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            F19_ProcParticipantItemDialog.prototype.getService = function () { return Procurement.F19_ProcParticipantItemService.baseUrl; };
            F19_ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_ProcParticipantItemDialog);
            return F19_ProcParticipantItemDialog;
        }(_Ext.DialogBase));
        Procurement.F19_ProcParticipantItemDialog = F19_ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantItemGrid, _super);
            function F19_ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F19_ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F19_ProcParticipantItem'; };
            F19_ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.F19_ProcParticipantItemDialog; };
            F19_ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F19_ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F19_ProcParticipantItemGrid.prototype.getService = function () { return Procurement.F19_ProcParticipantItemService.baseUrl; };
            F19_ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_ProcParticipantItemGrid);
            return F19_ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.F19_ProcParticipantItemGrid = F19_ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F19_ProcParticipantItemsEditor = /** @class */ (function (_super) {
            __extends(F19_ProcParticipantItemsEditor, _super);
            function F19_ProcParticipantItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.toolbar.element.toggle(false);
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                //columns = columns.filter(f => f.field != 'BidPrice');
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                //columns = columns.filter(f => f.field != 'Plant');
                //columns = columns.filter(f => f.field != 'StorageLocation');
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            F19_ProcParticipantItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F19_ProcParticipantItem"; };
            F19_ProcParticipantItemsEditor.prototype.getDialogType = function () { return Procurement.F19_ProcParticipantItemDialog; };
            F19_ProcParticipantItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F19_ProcParticipantItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F19_ProcParticipantItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            F19_ProcParticipantItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our export button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.F19_ProcParticipantItemService.baseUrl + "/ListExcelBidPrice", request: gridRows, target: '_blank' });
                    }
                });
                //// add our import button
                //buttons.push({
                //    title: 'Import From Excel',
                //    cssClass: 'export-xlsx-button',
                //    onClick: () => {
                //        // open import dialog, let it handle rest
                //        var dialog = new BidPriceImportDialog();
                //        dialog.procParticipantItemsEditor = this;
                //        dialog.element.on('dialogclose', () => {
                //            this.refresh();
                //            dialog = null;
                //        });
                //        dialog.dialogOpen();
                //    }
                //});
                return buttons;
            };
            F19_ProcParticipantItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F19_ProcParticipantItemsEditor);
            return F19_ProcParticipantItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F19_ProcParticipantItemsEditor = F19_ProcParticipantItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F1_BLSelectionAdjustmentDialog = /** @class */ (function (_super) {
            __extends(F1_BLSelectionAdjustmentDialog, _super);
            function F1_BLSelectionAdjustmentDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.form = new Procurement.F1_BLSelectionAdjustmentForm(_this.idPrefix);
                _this.participantCount = 0;
                $('<a id="CNPullBtn" class="tool-button inplace-button refresh-button load-data-button "><\/a>')
                    .insertAfter(_this.form.CollectiveNumber.element)
                    .click(function () {
                    Procurement.F1_BLSelectionAdjustmentService.GetBidderListHeader({ CollectiveNumber: _this.form.CollectiveNumber.value }, function (response) {
                        _this.form.Title.value = response.Title;
                        _this.form.SapBidderListCreatedDate.value = response.SapBidderListCreatedDate;
                        _this.form.SapBidderListCreatedBy.value = response.SapBidderListCreatedBy;
                        _this.form.ProcurementTypeId.set_value(response.ProcurementTypeId);
                        _this.form.Classification.value = response.Classification;
                        _this.form.Qualification.value = response.Qualification;
                        _this.form.RequestedBy.value = response.RequestedBy;
                        _this.form.RequestorPosition.value = response.RequestorPosition;
                        _this.form.ApprovedBy.value = response.ApprovedBy;
                        _this.form.ApproverPosition.value = response.ApproverPosition;
                        _this.form.ProcParticipant.value = response.ProcParticipant;
                        _this.form.ProcurementMethodId.set_value(response.ProcurementMethodId);
                        Q.notifySuccess("Bidder list " + _this.form.CollectiveNumber.value + " successfully loaded.");
                    }, {
                        onError: function (response) {
                            Q.notifyError(response.Error.Message);
                            //Reset Data
                            _this.form.Title.value = null;
                            _this.form.SapBidderListCreatedDate.value = null;
                            _this.form.SapBidderListCreatedBy.value = null;
                            _this.form.ProcurementTypeId.value = null;
                            _this.form.Classification.value = null;
                            _this.form.Qualification.value = null;
                            _this.form.RequestedBy.value = null;
                            _this.form.RequestorPosition.value = null;
                            _this.form.ApprovedBy.value = null;
                            _this.form.ApproverPosition.value = null;
                            _this.form.ProcParticipant.value = null;
                            _this.form.ProcurementMethodId.value = null;
                        }
                    });
                    //this.form.ProcParticipant.upd
                    _this.updateInterface();
                    //this.form.ProcParticipant.myPassValue 
                });
                _this.form.ProcValueRangeId.changeSelect2(function (e) {
                    switch (_this.form.ProcValueRangeId.value.toString()) {
                        case "1": {
                            //internal
                            _this.form.CommitteeTypeId.value = 2;
                            _this.form.PerformanceGuaranteeRequired.set_value("false");
                            break;
                        }
                        case "2": {
                            //pengadaan
                            _this.form.CommitteeTypeId.value = 1;
                            _this.form.PerformanceGuaranteeRequired.set_value(null);
                            break;
                        }
                        case "3": {
                            //pengadaan
                            _this.form.CommitteeTypeId.value = 1;
                            _this.form.PerformanceGuaranteeRequired.set_value(null);
                            break;
                        }
                        default: {
                            //statements; 
                            break;
                        }
                    }
                    _this.loadDefaultCommitteeRole(_this.form.CommitteeTypeId.value);
                    //this.updateInterface();
                });
                /*
                 * this.form.PerformanceGuaranteeRequired.changeSelect2(e => {
                    if (this.form.PerformanceGuaranteeRequired.get_value() == "true") {
                        this.form.GuaranteePercentage.element.parent().toggle(true);
                    } else {
                        this.form.GuaranteePercentage.element.parent().toggle(false);
                    }
                });
                */
                //re adjust sequence when row count changed
                _this.form.ProcParticipant.view.onDataChanged.subscribe(function (x) {
                    var newParticipantCount = _this.form.ProcParticipant.getItems().length;
                    if (newParticipantCount != _this.participantCount) {
                        _this.participantCount = newParticipantCount;
                        _this.adjustParticipantSequence();
                    }
                });
                _this.form.ProcParticipant.slickGrid.setSortColumn("SequenceNo", true);
                return _this;
            }
            F1_BLSelectionAdjustmentDialog.prototype.getFormKey = function () { return Procurement.F1_BLSelectionAdjustmentForm.formKey; };
            F1_BLSelectionAdjustmentDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F1_BLSelectionAdjustmentDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F1_BLSelectionAdjustmentDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F1_BLSelectionAdjustmentDialog.prototype.getService = function () { return Procurement.F1_BLSelectionAdjustmentService.baseUrl; };
            F1_BLSelectionAdjustmentDialog.prototype.loadDefaultCommitteeRole = function (committeeTypeId) {
                var _this = this;
                var committeeList = this.form.CommitteeMember.getItems();
                var i = 1;
                var request;
                request = {};
                request.Criteria = Serenity.Criteria.and(request.Criteria, [["ProcurementTypeId" /* ProcurementTypeId */], "=", this.form.ProcurementTypeId.value]);
                request.Criteria = Serenity.Criteria.and(request.Criteria, [["ProcValueRangeId" /* ProcValueRangeId */], "=", this.form.ProcValueRangeId.value]);
                Procurement.CommitteeMemberMappingService.List(request, function (response) {
                    committeeList = [];
                    response.Entities.forEach(function (item) {
                        var cm;
                        cm = {};
                        cm.CommitteeRoleId = item.CommitteeRoleId;
                        cm.CommitteeRoleName = item.CommitteeRoleName;
                        cm.RoleId = item.RoleId;
                        cm.RoleRoleName = item.RoleRoleName;
                        //Need temporary id for in-memory grid
                        cm["__id"] = "``" + i;
                        committeeList.push(cm);
                        i++;
                    });
                    _this.form.CommitteeMember.view.setItems(committeeList, true);
                });
                //participantList.forEach(function (value) {
                //    value.SequenceNo = i;
                //    i++;
                //});
            };
            F1_BLSelectionAdjustmentDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                //if (Q.indexOf(buttons, x => x.cssClass == "delete-button") > -1) {
                //    buttons.splice(Q.indexOf(buttons, x => x.cssClass == "delete-button"), 1);
                //}
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                //F1 Not passed yet
                //add submit-button
                //create
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button create-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F1_BLSelectionAdjustmentService.SubmitCreate({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procurement " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.set_entityId(response.EntityId);
                                _this.reloadById();
                            });
                        });
                    }
                });
                //update
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button update-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F1_BLSelectionAdjustmentService.SubmitUpdate({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R1] - Daftar Bidder List",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entity;
                        _this.get_entityId();
                        var a = '../Procurement/Report/ReportR1?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F1_BLSelectionAdjustmentDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                //var rows = this.form.ProcParticipant.getItems();
                //Math.max.apply(Math, rows.map(function (o) { return o.SequenceNo; }))
                //console.log(this.form.ProcParticipant.getItems());
                //this.adjustParticipantSequence();
            };
            F1_BLSelectionAdjustmentDialog.prototype.adjustParticipantSequence = function () {
                var participantList = this.form.ProcParticipant.getItems();
                var i = 1;
                participantList.forEach(function (value) {
                    value.SequenceNo = i;
                    i++;
                });
                this.form.ProcParticipant.setItems(participantList);
                //this.updateInterface();
            };
            F1_BLSelectionAdjustmentDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                this.participantCount = this.form.ProcParticipant.getItems().length;
                //hide next button when flow passed
                if (this.entity.F1SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                    this.toolbar.findButton(".delete-button").remove();
                }
                if (this.form.PerformanceGuaranteeRequired.get_value() == "true") {
                    this.form.GuaranteePercentage.element.parent().toggle(true);
                }
                else {
                    this.form.GuaranteePercentage.element.parent().toggle(false);
                }
                if (this.form.Status.get_value()) { }
                else {
                    this.form.Status.set_value("F1");
                }
                //$('<a id="CNPullBtn" class="inplace-button "><b>Load Bidder List<\/b><\/a>')
                //    .insertAfter(this.form.CollectiveNumber.element)
                //    .click(() =>
                //        ProcurementService.GetBidderListHeader(
                //            { CollectiveNumber: this.form.CollectiveNumber.value }
                //            , response => {
                //                console.log(response);
                //                if (response == null) {
                //                    Q.notifyWarning("Bidder List No:" + this.form.CollectiveNumber + " not found!");
                //                    return;
                //                }
                //                console.log(this.form.CollectiveNumber.value);
                //                //this.form.Title.value = response.Title;
                //                //this.form.SapBidderListCreatedDate.value = response.SapBidderListCreatedDate;
                //                //this.form.SapBidderListCreatedBy.value = response.SapBidderListCreatedBy;
                //                //this.form.ProcurementTypeId.value = response.ProcurementTypeId;
                //                //this.form.Qualification.value = response.Qualification;
                //                //this.form.RequestedBy.value = response.RequestedBy;
                //                //this.form.RequestorPosition.value = response.RequestorPosition;
                //                //this.form.ApprovedBy.value = response.ApprovedBy;
                //                //this.form.ApproverPosition.value = response.ApproverPosition;
                //                //var responseItem = response.DATA[0].WA.split("|");
                //                //this.form.Title.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('PENGADAAN'.trim())];
                //                //this.form.SapBidderListCreatedDate.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('CRDATE'.trim())];
                //                //this.form.SapBidderListCreatedBy.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('CRUSER'.trim())];
                //                //this.form.ProcurementTypeId.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KNDPRO'.trim())];
                //                //this.form.Qualification.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KUALIFIKASI'.trim())];
                //                //this.form.RequestedBy.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('DIUSULKAN'.trim())];
                //                //this.form.RequestorPosition.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('JAB_DIUSULKAN'.trim())];
                //                //this.form.ApprovedBy.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('DISETUJUI'.trim())];
                //                //this.form.ApproverPosition.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('JAB_DISETUJUI'.trim())];
                //            }));
                //);
                //$('<a id="CNPullBtn" class="inplace-button inplace-create"><b><\/b><\/a>')
                //    .insertAfter(this.form.CollectiveNumber.element);
                //let btn = document.getElementById("CNPullBtn");
                //btn.addEventListener("click", (e: Event) => {
                //    ProcurementService.GetBidderListHeader({
                //    }, response => {
                //        //FindIndex(response).;
                //        //FindIndex();
                //        //FindIndex(response.FIELDS)
                //        var KNDPRO = response.DATA[0].WA.split("|")[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KNDPRO')];
                //        console.log(KNDPRO);
                //        this.form.Title.value = KNDPRO;
                //        //response.FIELDS.
                //        //response.FIELDS.indexOf({ FIELDNAME: 'KNDPRO' });
                //        //response.DATA[0].WA.split("|");
                //        ////for (let entry of response.DATA) {
                //        ////    console.log(entry.WA); // 1, "string", false
                //        ////}
                //        //console.log(response.FIELDS.fin)
                //        //this.element.find("input").val(response)
                //    });
                //});
            };
            F1_BLSelectionAdjustmentDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                if (this.isNew()) {
                    this.toolbar.findButton(".update-button").remove();
                }
                else {
                    this.toolbar.findButton(".create-button").remove();
                }
            };
            F1_BLSelectionAdjustmentDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F1_BLSelectionAdjustmentDialog);
            return F1_BLSelectionAdjustmentDialog;
        }(_Ext.DialogBase));
        Procurement.F1_BLSelectionAdjustmentDialog = F1_BLSelectionAdjustmentDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F1_BLSelectionAdjustmentGrid = /** @class */ (function (_super) {
            __extends(F1_BLSelectionAdjustmentGrid, _super);
            function F1_BLSelectionAdjustmentGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F1_BLSelectionAdjustmentGrid.prototype.getColumnsKey = function () { return 'Procurement.F1_BLSelectionAdjustment'; };
            F1_BLSelectionAdjustmentGrid.prototype.getDialogType = function () { return Procurement.F1_BLSelectionAdjustmentDialog; };
            F1_BLSelectionAdjustmentGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F1_BLSelectionAdjustmentGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F1_BLSelectionAdjustmentGrid.prototype.getService = function () { return Procurement.F1_BLSelectionAdjustmentService.baseUrl; };
            F1_BLSelectionAdjustmentGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "add-button"), 1);
                return buttons;
            };
            F1_BLSelectionAdjustmentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F1_BLSelectionAdjustmentGrid);
            return F1_BLSelectionAdjustmentGrid;
        }(_Ext.GridBase));
        Procurement.F1_BLSelectionAdjustmentGrid = F1_BLSelectionAdjustmentGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcPrDialog = /** @class */ (function (_super) {
            __extends(F20_ProcPrDialog, _super);
            function F20_ProcPrDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F20_ProcPrForm(_this.idPrefix);
                return _this;
            }
            F20_ProcPrDialog.prototype.getFormKey = function () { return Procurement.F20_ProcPrForm.formKey; };
            F20_ProcPrDialog.prototype.getIdProperty = function () { return Procurement.ProcPrRow.idProperty; };
            F20_ProcPrDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcPrRow.localTextPrefix; };
            F20_ProcPrDialog.prototype.getNameProperty = function () { return Procurement.ProcPrRow.nameProperty; };
            F20_ProcPrDialog.prototype.getService = function () { return Procurement.F20_ProcPrService.baseUrl; };
            F20_ProcPrDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_ProcPrDialog);
            return F20_ProcPrDialog;
        }(_Ext.DialogBase));
        Procurement.F20_ProcPrDialog = F20_ProcPrDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcPrEditor = /** @class */ (function (_super) {
            __extends(F20_ProcPrEditor, _super);
            function F20_ProcPrEditor(container) {
                return _super.call(this, container) || this;
            }
            F20_ProcPrEditor.prototype.getColumnsKey = function () { return "Procurement.F20_ProcPr"; };
            //protected getDialogType() { return ProcParticipantDialog; }
            //protected getLocalTextPrefix() { return ProcParticipantRow.localTextPrefix; }
            F20_ProcPrEditor.prototype.getDialogType = function () { return Procurement.F20_ProcPrDialog; };
            F20_ProcPrEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcPrRow.localTextPrefix; };
            F20_ProcPrEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F20_ProcPrEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_ProcPrEditor);
            return F20_ProcPrEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F20_ProcPrEditor = F20_ProcPrEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcPrGrid = /** @class */ (function (_super) {
            __extends(F20_ProcPrGrid, _super);
            function F20_ProcPrGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F20_ProcPrGrid.prototype.getColumnsKey = function () { return 'Procurement.F20_ProcPr'; };
            F20_ProcPrGrid.prototype.getDialogType = function () { return Procurement.F20_ProcPrDialog; };
            F20_ProcPrGrid.prototype.getIdProperty = function () { return Procurement.ProcPrRow.idProperty; };
            F20_ProcPrGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcPrRow.localTextPrefix; };
            F20_ProcPrGrid.prototype.getService = function () { return Procurement.F20_ProcPrService.baseUrl; };
            F20_ProcPrGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_ProcPrGrid);
            return F20_ProcPrGrid;
        }(_Ext.GridBase));
        Procurement.F20_ProcPrGrid = F20_ProcPrGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcurementDialog = /** @class */ (function (_super) {
            __extends(F20_ProcurementDialog, _super);
            function F20_ProcurementDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F20_ProcurementForm(_this.idPrefix);
                return _this;
            }
            F20_ProcurementDialog.prototype.getFormKey = function () { return Procurement.F20_ProcurementForm.formKey; };
            F20_ProcurementDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F20_ProcurementDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F20_ProcurementDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F20_ProcurementDialog.prototype.getService = function () { return Procurement.F20_ProcurementService.baseUrl; };
            F20_ProcurementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_ProcurementDialog);
            return F20_ProcurementDialog;
        }(_Ext.DialogBase));
        Procurement.F20_ProcurementDialog = F20_ProcurementDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcurementEditor = /** @class */ (function (_super) {
            __extends(F20_ProcurementEditor, _super);
            function F20_ProcurementEditor(container) {
                return _super.call(this, container) || this;
            }
            F20_ProcurementEditor.prototype.getColumnsKey = function () { return "Procurement.F20_Procurement"; };
            //protected getDialogType() { return ProcParticipantDialog; }
            //protected getLocalTextPrefix() { return ProcParticipantRow.localTextPrefix; }
            F20_ProcurementEditor.prototype.getDialogType = function () { return Procurement.F20_ProcurementDialog; };
            F20_ProcurementEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F20_ProcurementEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F20_ProcurementEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_ProcurementEditor);
            return F20_ProcurementEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F20_ProcurementEditor = F20_ProcurementEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_ProcurementGrid = /** @class */ (function (_super) {
            __extends(F20_ProcurementGrid, _super);
            function F20_ProcurementGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F20_ProcurementGrid.prototype.getColumnsKey = function () { return 'Procurement.F20_Procurement'; };
            F20_ProcurementGrid.prototype.getDialogType = function () { return Procurement.F20_ProcurementDialog; };
            F20_ProcurementGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F20_ProcurementGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F20_ProcurementGrid.prototype.getService = function () { return Procurement.F20_ProcurementService.baseUrl; };
            F20_ProcurementGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F20_ProcurementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_ProcurementGrid);
            return F20_ProcurementGrid;
        }(_Ext.GridBase));
        Procurement.F20_ProcurementGrid = F20_ProcurementGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_PurchaseRequisitionTrackingDialog = /** @class */ (function (_super) {
            __extends(F20_PurchaseRequisitionTrackingDialog, _super);
            function F20_PurchaseRequisitionTrackingDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F20_PurchaseRequisitionTrackingForm(_this.idPrefix);
                return _this;
            }
            F20_PurchaseRequisitionTrackingDialog.prototype.getFormKey = function () { return Procurement.F20_PurchaseRequisitionTrackingForm.formKey; };
            F20_PurchaseRequisitionTrackingDialog.prototype.getIdProperty = function () { return Procurement.PurchaseRequisitionRow.idProperty; };
            F20_PurchaseRequisitionTrackingDialog.prototype.getLocalTextPrefix = function () { return Procurement.PurchaseRequisitionRow.localTextPrefix; };
            F20_PurchaseRequisitionTrackingDialog.prototype.getNameProperty = function () { return Procurement.PurchaseRequisitionRow.nameProperty; };
            F20_PurchaseRequisitionTrackingDialog.prototype.getService = function () { return Procurement.F20_PurchaseRequisitionTrackingService.baseUrl; };
            F20_PurchaseRequisitionTrackingDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_PurchaseRequisitionTrackingDialog);
            return F20_PurchaseRequisitionTrackingDialog;
        }(_Ext.DialogBase));
        Procurement.F20_PurchaseRequisitionTrackingDialog = F20_PurchaseRequisitionTrackingDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F20_PurchaseRequisitionTrackingGrid = /** @class */ (function (_super) {
            __extends(F20_PurchaseRequisitionTrackingGrid, _super);
            function F20_PurchaseRequisitionTrackingGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F20_PurchaseRequisitionTrackingGrid.prototype.getColumnsKey = function () { return 'Procurement.F20_PurchaseRequisitionTracking'; };
            F20_PurchaseRequisitionTrackingGrid.prototype.getDialogType = function () { return Procurement.F20_PurchaseRequisitionTrackingDialog; };
            F20_PurchaseRequisitionTrackingGrid.prototype.getIdProperty = function () { return Procurement.PurchaseRequisitionRow.idProperty; };
            F20_PurchaseRequisitionTrackingGrid.prototype.getLocalTextPrefix = function () { return Procurement.PurchaseRequisitionRow.localTextPrefix; };
            F20_PurchaseRequisitionTrackingGrid.prototype.getService = function () { return Procurement.F20_PurchaseRequisitionTrackingService.baseUrl; };
            F20_PurchaseRequisitionTrackingGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F20_PurchaseRequisitionTrackingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F20_PurchaseRequisitionTrackingGrid);
            return F20_PurchaseRequisitionTrackingGrid;
        }(_Ext.GridBase));
        Procurement.F20_PurchaseRequisitionTrackingGrid = F20_PurchaseRequisitionTrackingGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F2_ProcurementDocCreationDialog = /** @class */ (function (_super) {
            __extends(F2_ProcurementDocCreationDialog, _super);
            function F2_ProcurementDocCreationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F2_ProcurementDocCreationForm(_this.idPrefix);
                return _this;
            }
            F2_ProcurementDocCreationDialog.prototype.getFormKey = function () { return Procurement.F2_ProcurementDocCreationForm.formKey; };
            F2_ProcurementDocCreationDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F2_ProcurementDocCreationDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F2_ProcurementDocCreationDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F2_ProcurementDocCreationDialog.prototype.getService = function () { return Procurement.F2_ProcurementDocCreationService.baseUrl; };
            F2_ProcurementDocCreationDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F2_ProcurementDocCreationService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                return buttons;
            };
            F2_ProcurementDocCreationDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F2SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
                //this.form.RequestTerms.value = Administration.SettingRow.getLookup().itemById["request_description"].Value;
                //this.updateInterface();
            };
            F2_ProcurementDocCreationDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.form.RequestTerms.element.parent().show();
                //this.form.ObjectionDescription.element.parent().show();
                //if (this.form.SubmitObjection.get_value() == "true") {
                //    this.form.ObjectionTerms.element.parent().show();
                //    this.form.ObjectionDescription.element.parent().show();
                //} else {
                //    this.form.ObjectionTerms.element.parent().hide();
                //    this.form.ObjectionDescription.element.parent().hide();
                //}
            };
            F2_ProcurementDocCreationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F2_ProcurementDocCreationDialog);
            return F2_ProcurementDocCreationDialog;
        }(_Ext.DialogBase));
        Procurement.F2_ProcurementDocCreationDialog = F2_ProcurementDocCreationDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F2_ProcurementDocCreationGrid = /** @class */ (function (_super) {
            __extends(F2_ProcurementDocCreationGrid, _super);
            function F2_ProcurementDocCreationGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F2_ProcurementDocCreationGrid.prototype.getColumnsKey = function () { return 'Procurement.F2_ProcurementDocCreation'; };
            F2_ProcurementDocCreationGrid.prototype.getDialogType = function () { return Procurement.F2_ProcurementDocCreationDialog; };
            F2_ProcurementDocCreationGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F2_ProcurementDocCreationGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F2_ProcurementDocCreationGrid.prototype.getService = function () { return Procurement.F2_ProcurementDocCreationService.baseUrl; };
            F2_ProcurementDocCreationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F2_ProcurementDocCreationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F2_ProcurementDocCreationGrid);
            return F2_ProcurementDocCreationGrid;
        }(_Ext.GridBase));
        Procurement.F2_ProcurementDocCreationGrid = F2_ProcurementDocCreationGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_1_InputOwnerEstimateDialog = /** @class */ (function (_super) {
            __extends(F3_1_InputOwnerEstimateDialog, _super);
            function F3_1_InputOwnerEstimateDialog(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Procurement.F3_1_InputOwnerEstimateForm(_this.idPrefix);
                //  this.toolbar.element.remove();
                q.initDetailEditor(_this, _this.form.RfqItems);
                return _this;
            }
            F3_1_InputOwnerEstimateDialog.prototype.getFormKey = function () { return Procurement.F3_1_InputOwnerEstimateForm.formKey; };
            F3_1_InputOwnerEstimateDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F3_1_InputOwnerEstimateDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F3_1_InputOwnerEstimateDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F3_1_InputOwnerEstimateDialog.prototype.getService = function () { return Procurement.F3_1_InputOwnerEstimateService.baseUrl; };
            F3_1_InputOwnerEstimateDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F3_1_InputOwnerEstimateService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                return buttons;
            };
            F3_1_InputOwnerEstimateDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F31SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                }
            };
            F3_1_InputOwnerEstimateDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F3_1_InputOwnerEstimateDialog);
            return F3_1_InputOwnerEstimateDialog;
        }(_Ext.DialogBase));
        Procurement.F3_1_InputOwnerEstimateDialog = F3_1_InputOwnerEstimateDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_1_InputOwnerEstimateGrid = /** @class */ (function (_super) {
            __extends(F3_1_InputOwnerEstimateGrid, _super);
            function F3_1_InputOwnerEstimateGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F3_1_InputOwnerEstimateGrid.prototype.getColumnsKey = function () { return 'Procurement.F3_1_InputOwnerEstimate'; };
            F3_1_InputOwnerEstimateGrid.prototype.getDialogType = function () { return Procurement.F3_1_InputOwnerEstimateDialog; };
            F3_1_InputOwnerEstimateGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F3_1_InputOwnerEstimateGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F3_1_InputOwnerEstimateGrid.prototype.getService = function () { return Procurement.F3_1_InputOwnerEstimateService.baseUrl; };
            F3_1_InputOwnerEstimateGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F3_1_InputOwnerEstimateGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F3_1_InputOwnerEstimateGrid);
            return F3_1_InputOwnerEstimateGrid;
        }(_Ext.GridBase));
        Procurement.F3_1_InputOwnerEstimateGrid = F3_1_InputOwnerEstimateGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OwnerEstimateImportDialog = /** @class */ (function (_super) {
            __extends(OwnerEstimateImportDialog, _super);
            function OwnerEstimateImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.OwnerEstimateImportForm(_this.idPrefix);
                return _this;
            }
            OwnerEstimateImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            OwnerEstimateImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            Procurement.F3_1_InputOwnerEstimateService.ExcelImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                console.log("response");
                                console.log(response);
                                Q.notifyInfo('Updated: ' + (response.Updated || 0));
                                //Q.notifyInfo(
                                //    'Inserted: ' + (response.Inserted || 0) +
                                //    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                var rfqList = _this.rfqItemsEditor.view.getItems();
                                var importedRfqList = response.ImportedData;
                                var i = 1;
                                rfqList.forEach(function (row) {
                                    //sequence match
                                    var matchExcelRow = importedRfqList[importedRfqList.map(function (e) { return e.Item; }).indexOf(row.Item)];
                                    if (matchExcelRow) {
                                        row.OwnerEstimate = matchExcelRow.OwnerEstimate;
                                        row.OrderPriceUnit = matchExcelRow.OrderPriceUnit;
                                        row.OrderQuantity = matchExcelRow.OrderQuantity;
                                    }
                                    row["__id"] = "``" + i;
                                    i++;
                                });
                                _this.rfqItemsEditor.view.setItems(rfqList, false);
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            OwnerEstimateImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OwnerEstimateImportDialog);
            return OwnerEstimateImportDialog;
        }(Serenity.PropertyDialog));
        Procurement.OwnerEstimateImportDialog = OwnerEstimateImportDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_CreateRFQDialog = /** @class */ (function (_super) {
            __extends(F3_CreateRFQDialog, _super);
            function F3_CreateRFQDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.form = new Procurement.F3_CreateRFQForm(_this.idPrefix);
                $('<a id="RFQPullBtn" class="tool-button inplace-button refresh-button load-data-button "><\/a>')
                    .insertAfter(_this.form.PurchDocNum.element)
                    .click(function () {
                    Procurement.F3_CreateRFQService.GetRFQ({ RfqNo: _this.form.PurchDocNum.value }, function (response) {
                        _this.form.OrderTypeId.set_value(response.OrderTypeId);
                        _this.form.RfqDate.value = response.RfqDate;
                        _this.form.QuotationDeadline.value = response.QuotationDeadline;
                        _this.form.PurchGroup.value = response.PurchGroup;
                        _this.form.PrNo.value = response.PrNo;
                        _this.form.AuthPersonName.value = response.AuthPersonName;
                        _this.form.AuthPosition.value = response.AuthPosition;
                        _this.form.DeliveryAddress.value = response.DeliveryAddress;
                        _this.form.ToPTargVal.value = response.ToPTargVal;
                        _this.form.YourReference.value = response.YourReference;
                        _this.form.OurReference.value = response.OurReference;
                        _this.form.SalesPerson.value = response.SalesPerson;
                        _this.form.Telephone.value = response.Telephone;
                        _this.form.ValidityStart.value = response.ValidityStart;
                        _this.form.ValidityEnd.value = response.ValidityEnd;
                        _this.form.ItemInterval.value = response.ItemInterval;
                        _this.form.SubItemInterval.value = response.SubItemInterval;
                        _this.form.Warranty.value = response.Warranty;
                        _this.form.Language.value = response.Language;
                        _this.form.RfqTexts.value = response.RfqTexts;
                        _this.form.RfqItems.value = response.RfqItems;
                        _this.form.ProcPurchaseRequests.value = response.ProcPurchaseRequests;
                        Q.notifySuccess("RFQ " + _this.form.PurchDocNum.value + " successfully loaded.");
                    }, {
                        onError: function (response) {
                            Q.notifyError(response.Error.Message);
                            //Reset Data
                            _this.form.OrderTypeId.value = null;
                            _this.form.RfqDate.value = null;
                            _this.form.QuotationDeadline.value = null;
                            _this.form.PurchGroup.value = null;
                            _this.form.PrNo.value = null;
                            _this.form.AuthPersonName.value = null;
                            _this.form.AuthPosition.value = null;
                            _this.form.DeliveryAddress.value = null;
                            _this.form.ToPTargVal.value = null;
                            _this.form.YourReference.value = null;
                            _this.form.OurReference.value = null;
                            _this.form.SalesPerson.value = null;
                            _this.form.Telephone.value = null;
                            _this.form.ValidityStart.value = null;
                            _this.form.ValidityEnd.value = null;
                            _this.form.ItemInterval.value = null;
                            _this.form.SubItemInterval.value = null;
                            _this.form.Warranty.value = null;
                            _this.form.Language.value = null;
                            _this.form.RfqTexts.value = null;
                            _this.form.RfqItems.value = null;
                            _this.form.ProcPurchaseRequests.value = null;
                        }
                    });
                });
                return _this;
            }
            F3_CreateRFQDialog.prototype.getFormKey = function () { return Procurement.F3_CreateRFQForm.formKey; };
            F3_CreateRFQDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F3_CreateRFQDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F3_CreateRFQDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F3_CreateRFQDialog.prototype.getService = function () { return Procurement.F3_CreateRFQService.baseUrl; };
            F3_CreateRFQDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F3_CreateRFQService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F3_CreateRFQService.SendMail({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procurement " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                }),
                                    Procurement.F3_CreateRFQService.SendMailVendor({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                        Q.notifySuccess("Procurement " + _this.form.Title.value + " has been successfully Submitted.");
                                        _this.reloadById();
                                    });
                            });
                        });
                    }
                });
                return buttons;
            };
            F3_CreateRFQDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F3SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F3_CreateRFQDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F3_CreateRFQDialog);
            return F3_CreateRFQDialog;
        }(_Ext.DialogBase));
        Procurement.F3_CreateRFQDialog = F3_CreateRFQDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F3_CreateRFQGrid = /** @class */ (function (_super) {
            __extends(F3_CreateRFQGrid, _super);
            function F3_CreateRFQGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F3_CreateRFQGrid.prototype.getColumnsKey = function () { return 'Procurement.F3_CreateRFQ'; };
            F3_CreateRFQGrid.prototype.getDialogType = function () { return Procurement.F3_CreateRFQDialog; };
            F3_CreateRFQGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F3_CreateRFQGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F3_CreateRFQGrid.prototype.getService = function () { return Procurement.F3_CreateRFQService.baseUrl; };
            F3_CreateRFQGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F3_CreateRFQGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F3_CreateRFQGrid);
            return F3_CreateRFQGrid;
        }(_Ext.GridBase));
        Procurement.F3_CreateRFQGrid = F3_CreateRFQGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F4_AanwijzingDialog = /** @class */ (function (_super) {
            __extends(F4_AanwijzingDialog, _super);
            function F4_AanwijzingDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F4_AanwijzingForm(_this.idPrefix);
                return _this;
            }
            F4_AanwijzingDialog.prototype.getFormKey = function () { return Procurement.F4_AanwijzingForm.formKey; };
            F4_AanwijzingDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F4_AanwijzingDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F4_AanwijzingDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F4_AanwijzingDialog.prototype.getService = function () { return Procurement.F4_AanwijzingService.baseUrl; };
            F4_AanwijzingDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F4_AanwijzingService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R3] - Berita Acara Penjelasan Pekerjaan",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entityId();
                        var a = '../Procurement/Report/ReportR3?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F4_AanwijzingDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F4SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F4_AanwijzingDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F4_AanwijzingDialog);
            return F4_AanwijzingDialog;
        }(_Ext.DialogBase));
        Procurement.F4_AanwijzingDialog = F4_AanwijzingDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F4_AanwijzingGrid = /** @class */ (function (_super) {
            __extends(F4_AanwijzingGrid, _super);
            function F4_AanwijzingGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F4_AanwijzingGrid.prototype.getColumnsKey = function () { return 'Procurement.F4_Aanwijzing'; };
            F4_AanwijzingGrid.prototype.getDialogType = function () { return Procurement.F4_AanwijzingDialog; };
            F4_AanwijzingGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F4_AanwijzingGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F4_AanwijzingGrid.prototype.getService = function () { return Procurement.F4_AanwijzingService.baseUrl; };
            F4_AanwijzingGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F4_AanwijzingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F4_AanwijzingGrid);
            return F4_AanwijzingGrid;
        }(_Ext.GridBase));
        Procurement.F4_AanwijzingGrid = F4_AanwijzingGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(F5_ProcParticipantItemDialog, _super);
            function F5_ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                //protected getService() { return F5_ProcParticipantItemService.baseUrl; }
                _this.form = new Procurement.F5_ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            F5_ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.F5_ProcParticipantItemForm.formKey; };
            //protected getIdProperty() { return ProcParticipantItemRow.idProperty; }
            F5_ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F5_ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            F5_ProcParticipantItemDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //this.form.Rank
            };
            F5_ProcParticipantItemDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                //if (this.parentForm.form.ContractTypeId.value == 1) {
                //}
            };
            F5_ProcParticipantItemDialog.prototype.onDialogClose = function () {
                //this.parentDialog.adjustItemGrid(this.form.ProcParticipantVendorId.value, this.form.EvaluationConclusionItemId.value);
            };
            F5_ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class F5_ProcParticipantItemDialog extends _Ext.DialogBase<ProcParticipantItemRow, any> {
            ], F5_ProcParticipantItemDialog);
            return F5_ProcParticipantItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.F5_ProcParticipantItemDialog = F5_ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(F5_ProcParticipantItemGrid, _super);
            function F5_ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F5_ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F5_ProcParticipantItem'; };
            F5_ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.F5_ProcParticipantItemDialog; };
            F5_ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F5_ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F5_ProcParticipantItemGrid.prototype.getService = function () { return Procurement.F5_ProcParticipantItemService.baseUrl; };
            F5_ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F5_ProcParticipantItemGrid);
            return F5_ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.F5_ProcParticipantItemGrid = F5_ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_ProcParticipantItemsEditor = /** @class */ (function (_super) {
            __extends(F5_ProcParticipantItemsEditor, _super);
            function F5_ProcParticipantItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                //  this.toolbar.element.remove();
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                //columns = columns.filter(f => f.field != 'BidPrice');
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                //columns = columns.filter(f => f.field != 'Plant');
                //columns = columns.filter(f => f.field != 'StorageLocation');
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            F5_ProcParticipantItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F5_ProcParticipantItem"; };
            F5_ProcParticipantItemsEditor.prototype.getDialogType = function () { return Procurement.F5_ProcParticipantItemDialog; };
            F5_ProcParticipantItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F5_ProcParticipantItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F5_ProcParticipantItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            F5_ProcParticipantItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our export button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.F5_ProcParticipantItemService.baseUrl + "/ListExcelBidPrice", request: gridRows, target: '_blank' });
                    }
                });
                // add our import button
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new Procurement.BidPriceImportDialog();
                        dialog.procParticipantItemsEditor = _this;
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            F5_ProcParticipantItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F5_ProcParticipantItemsEditor);
            return F5_ProcParticipantItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F5_ProcParticipantItemsEditor = F5_ProcParticipantItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BidPriceImportDialog = /** @class */ (function (_super) {
            __extends(BidPriceImportDialog, _super);
            function BidPriceImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.BidPriceImportForm(_this.idPrefix);
                return _this;
            }
            BidPriceImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            BidPriceImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            Procurement.F5_SubmitTenderDocumentService.BidPriceImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                console.log("response");
                                console.log(response);
                                Q.notifyInfo('Updated: ' + (response.Updated || 0));
                                //Q.notifyInfo(
                                //    'Inserted: ' + (response.Inserted || 0) +
                                //    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                var procParticipantItemList = _this.procParticipantItemsEditor.view.getItems();
                                var importedProcParticipantItemList = response.ImportedData;
                                console.log(importedProcParticipantItemList);
                                var i = 1;
                                procParticipantItemList.forEach(function (row) {
                                    //sequence match
                                    var matchExcelRow = importedProcParticipantItemList[importedProcParticipantItemList.map(function (e) { return e.ItemSequence; }).indexOf(row.ItemSequence)];
                                    if (matchExcelRow) {
                                        row.BidPrice = matchExcelRow.BidPrice;
                                    }
                                    row["__id"] = "``" + i;
                                    i++;
                                });
                                _this.procParticipantItemsEditor.view.setItems(procParticipantItemList, false);
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            BidPriceImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], BidPriceImportDialog);
            return BidPriceImportDialog;
        }(Serenity.PropertyDialog));
        Procurement.BidPriceImportDialog = BidPriceImportDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_SubmitTenderDocumentDialog = /** @class */ (function (_super) {
            __extends(F5_SubmitTenderDocumentDialog, _super);
            function F5_SubmitTenderDocumentDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F5_SubmitTenderDocumentForm(_this.idPrefix);
                var tncButton = _this.element.find("#tnc-button");
                return _this;
            }
            F5_SubmitTenderDocumentDialog.prototype.getFormKey = function () { return Procurement.F5_SubmitTenderDocumentForm.formKey; };
            F5_SubmitTenderDocumentDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F5_SubmitTenderDocumentDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F5_SubmitTenderDocumentDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F5_SubmitTenderDocumentDialog.prototype.getService = function () { return Procurement.F5_SubmitTenderDocumentService.baseUrl; };
            F5_SubmitTenderDocumentDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        var dialog = new Procurement.F5_TnCDialog();
                        dialog.parentDialog = _this;
                        dialog.procParticipantEntity = _this.entity;
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            F5_SubmitTenderDocumentDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F5ParticipantSubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F5_SubmitTenderDocumentDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                this.form.ProcParticipantItems.slickGrid.resizeCanvas();
            };
            F5_SubmitTenderDocumentDialog.prototype.reloadDialog = function () { this.reloadById(); };
            F5_SubmitTenderDocumentDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F5_SubmitTenderDocumentDialog);
            return F5_SubmitTenderDocumentDialog;
        }(_Ext.DialogBase));
        Procurement.F5_SubmitTenderDocumentDialog = F5_SubmitTenderDocumentDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F5_SubmitTenderDocumentGrid = /** @class */ (function (_super) {
            __extends(F5_SubmitTenderDocumentGrid, _super);
            function F5_SubmitTenderDocumentGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F5_SubmitTenderDocumentGrid.prototype.getColumnsKey = function () { return 'Procurement.F5_SubmitTenderDocument'; };
            F5_SubmitTenderDocumentGrid.prototype.getDialogType = function () { return Procurement.F5_SubmitTenderDocumentDialog; };
            F5_SubmitTenderDocumentGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F5_SubmitTenderDocumentGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F5_SubmitTenderDocumentGrid.prototype.getService = function () { return Procurement.F5_SubmitTenderDocumentService.baseUrl; };
            F5_SubmitTenderDocumentGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F5_SubmitTenderDocumentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F5_SubmitTenderDocumentGrid);
            return F5_SubmitTenderDocumentGrid;
        }(_Ext.GridBase));
        Procurement.F5_SubmitTenderDocumentGrid = F5_SubmitTenderDocumentGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        //var F5_TnCMessageTemplate = require('F5_TnCMessageTemplate.html').default;
        var F5_TnCDialog = /** @class */ (function (_super) {
            __extends(F5_TnCDialog, _super);
            function F5_TnCDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F5_TnCForm(_this.idPrefix);
                usingJsRender();
                _this.element.find("#tnc-button").click(function () {
                    var isTncChecked = _this.element.find("#tnc-checkbox").prop("checked");
                    if (!isTncChecked)
                        return;
                    Procurement.F5_SubmitTenderDocumentService.Submit({
                        EntityId: _this.procParticipantEntity.ProcParticipantId,
                        Entity: _this.procParticipantEntity
                    }, function (response) {
                        Q.notifySuccess("Procurement document has been successfully Submitted.");
                        _this.parentDialog.reloadDialog();
                        _this.dialogClose();
                    });
                });
                return _this;
            }
            F5_TnCDialog.prototype.getDialogTitle = function () {
                return "Terms & Conditions";
            };
            /**
             * Here we override loadInitialEntity method to set value for "DisplayFieldValue" field.
             * If this was an EntityDialog, your field value would be originating from server side entity.
             */
            //protected loadInitialEntity() {
            //    this.propertyGrid.load({
            //        TnCDescription: 'This content comes from <b>the value</b> of <em>DisplayFieldValue</em> field.'
            //    });
            //}
            //protected getDialogButtons(): Serenity.DialogButton[] {
            //    return [
            //        {
            //            text: 'Submit',
            //            click: () => {
            //                //if (!this.validateBeforeSave())
            //                //    return;
            //                //if (this.form.FileName.value == null ||
            //                //    Q.isEmptyOrNull(this.form.FileName.value.Filename)) {
            //                //    Q.notifyError("Please select a file!");
            //                //    return;
            //                //}
            //                //F3_1_InputOwnerEstimateService.ExcelImport({
            //                //    FileName: this.form.FileName.value.Filename
            //                //}, response => {
            //                //    console.log("response");
            //                //    console.log(response);
            //                //    Q.notifyInfo('Updated: ' + (response.Updated || 0));
            //                //    //Q.notifyInfo(
            //                //    //    'Inserted: ' + (response.Inserted || 0) +
            //                //    //    ', Updated: ' + (response.Updated || 0));
            //                //    if (response.ErrorList != null && response.ErrorList.length > 0) {
            //                //        Q.notifyError(response.ErrorList.join(',\r\n '));
            //                //    }
            //                //    let rfqList = this.rfqItemsEditor.view.getItems();
            //                //    var importedRfqList = response.ImportedData;
            //                //    rfqList.forEach(row => {
            //                //        //sequence match
            //                //        var matchExcelRow = importedRfqList[importedRfqList.map(function (e) { return e.Item; }).indexOf(row.Item)];
            //                //        if (matchExcelRow) {
            //                //            row.OwnerEstimate = matchExcelRow.OwnerEstimate;
            //                //        }
            //                //    });
            //                //    this.rfqItemsEditor.view.setItems(rfqList, false);
            //                //    this.dialogClose();
            //                //});
            //            },
            //        },
            //        {
            //            text: 'Cancel',
            //            click: () => this.dialogClose()
            //        }
            //    ];
            //}
            F5_TnCDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                var tncDescription = this.element.find("#tnc-description");
                tncDescription.html(Q.jsRender(tncDescription.html(), this.procParticipantEntity));
                //this.element.html(
                //    Q.jsRender(this.element.html(), this.procParticipantEntity)
                //);
                //strange behaviour jquery ui. content always to top on initial load.
                //add this to manually scroll to top
                this.element.parent().parent().find('.s-Procurement-F5_TnCDialog .ui-widget-content').scrollTop(0);
            };
            F5_TnCDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.maximizable(),
                Serenity.Decorators.resizable(),
                Serenity.Decorators.filterable(),
                Serenity.Decorators.responsive()
                //export class F5_TnCDialog extends Serenity.PropertyDialog<any, any> {
            ], F5_TnCDialog);
            return F5_TnCDialog;
        }(Serenity.TemplatedDialog));
        Procurement.F5_TnCDialog = F5_TnCDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
///// <reference path="../../_Ext/Bases/DialogBase.ts" />
///// <reference path="../../_Ext/Bases/GridBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_OpenTenderDocumentDialog = /** @class */ (function (_super) {
            __extends(F6_OpenTenderDocumentDialog, _super);
            function F6_OpenTenderDocumentDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F6_OpenTenderDocumentForm(_this.idPrefix);
                //Change when click dropdowntext evaluation conclution
                _this.form.ProcRejectTender.changeSelect2(function (e) { return _this.updateInterface(); });
                return _this;
            }
            F6_OpenTenderDocumentDialog.prototype.getFormKey = function () { return Procurement.F6_OpenTenderDocumentForm.formKey; };
            F6_OpenTenderDocumentDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F6_OpenTenderDocumentDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F6_OpenTenderDocumentDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F6_OpenTenderDocumentDialog.prototype.getService = function () { return Procurement.F6_OpenTenderDocumentService.baseUrl; };
            F6_OpenTenderDocumentDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F6_OpenTenderDocumentService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                _this.reloadById();
                            });
                        });
                    }
                });
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "reject-button"; }) + 1, 0, {
                    title: Q.text('Reject'),
                    cssClass: 'reject',
                    icon: 'fa-times-circle text-red',
                    onClick: function () {
                        Q.confirm('Are you sure want to Reject?', function () {
                            Procurement.F6_OpenTenderDocumentService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F6_OpenTenderDocumentService.SendMailReject({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Rejected.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R4] - Berita Acara Pembukaan Dokumen Penawaran Sampul I (Administrasi dan Teknis)",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entityId();
                        var a = '../Procurement/Report/ReportR4?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F6_OpenTenderDocumentDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                this.form.ProcParticipant.parentDialog = this;
                var columns = this.form.ProcParticipant.slickGrid.getColumns();
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.get_entity().DocSubmitMethodId == 2) {
                    columns = columns.filter(function (f) { return f.field != "PriceDocumentName" /* PriceDocumentName */; });
                    columns = columns.filter(function (f) { return f.field != "PriceDocumentFile" /* PriceDocumentFile */; });
                }
                this.form.ProcParticipant.slickGrid.setColumns(columns);
                this.form.ProcParticipant.slickGrid.resizeCanvas();
                //if (!this.form.F31SubmitDate.value) {
                //    Q.alert("Owner Estimate pengadaan ini belum diisi. <a href='/" + F3_1_InputOwnerEstimateService.baseUrl + "#edit/" + this.get_entityId() + "' target='_blank'>Isi Owner Estimate</a>", { htmlEncode: false });
                //    this.dialogClose();
                //}
            };
            F6_OpenTenderDocumentDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                console.log("Apapun itu" + this.form.ProcRejectTender.get_value());
                //if (this.form.EvaluationConclusionId.get_value() == "No Quote") {
                if (this.form.ProcRejectTender.get_value() != 1) {
                    this.form.ProcRejectTenderDesc.getGridField().toggle(true);
                    this.toolbar.findButton(".reject").show();
                    this.toolbar.findButton(".submit-button").hide();
                    //this.onDialogOpen();
                }
                else {
                    //this.form.RfqItems.element.parent().parent().toggle(false);
                    this.form.ProcRejectTenderDesc.getGridField().toggle(false);
                    this.toolbar.findButton(".reject").hide();
                    this.toolbar.findButton(".submit-button").show();
                    //this.onDialogOpen();
                }
            };
            F6_OpenTenderDocumentDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                this.toolbar.findButton(".reject").hide();
                this.toolbar.findButton(".submit-button").show();
                this.form.ProcRejectTenderDesc.getGridField().toggle(false);
                //hide next button when flow passed
                if (this.entity.F6SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F6_OpenTenderDocumentDialog.prototype.getEntity = function () {
                return this.get_entity();
            };
            F6_OpenTenderDocumentDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_OpenTenderDocumentDialog);
            return F6_OpenTenderDocumentDialog;
        }(_Ext.DialogBase));
        Procurement.F6_OpenTenderDocumentDialog = F6_OpenTenderDocumentDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_OpenTenderDocumentGrid = /** @class */ (function (_super) {
            __extends(F6_OpenTenderDocumentGrid, _super);
            function F6_OpenTenderDocumentGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F6_OpenTenderDocumentGrid.prototype.getColumnsKey = function () { return 'Procurement.F6_OpenTenderDocument'; };
            F6_OpenTenderDocumentGrid.prototype.getDialogType = function () { return Procurement.F6_OpenTenderDocumentDialog; };
            F6_OpenTenderDocumentGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F6_OpenTenderDocumentGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F6_OpenTenderDocumentGrid.prototype.getService = function () { return Procurement.F6_OpenTenderDocumentService.baseUrl; };
            F6_OpenTenderDocumentGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F6_OpenTenderDocumentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_OpenTenderDocumentGrid);
            return F6_OpenTenderDocumentGrid;
        }(_Ext.GridBase));
        Procurement.F6_OpenTenderDocumentGrid = F6_OpenTenderDocumentGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantDialog, _super);
            function F6_ProcParticipantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F6_ProcParticipantForm(_this.idPrefix);
                return _this;
            }
            F6_ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.F6_ProcParticipantForm.formKey; };
            F6_ProcParticipantDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F6_ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F6_ProcParticipantDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F6_ProcParticipantDialog.prototype.getService = function () { return Procurement.F6_ProcParticipantService.baseUrl; };
            //protected getToolbarButtons(): Serenity.ToolButton[] {
            //    return [];
            //}
            F6_ProcParticipantDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
                    this.form.PriceDocumentFile.getGridField().toggle(false);
                    this.form.PriceDocumentFile.element.find(".file-item").remove();
                }
            };
            F6_ProcParticipantDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                var columns = this.form.ProcParticipantItems.slickGrid.getColumns();
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
                    columns = columns.filter(function (f) { return f.field != "BidPrice" /* BidPrice */; });
                }
                this.form.ProcParticipantItems.slickGrid.setColumns(columns);
                this.form.ProcParticipantItems.slickGrid.resizeCanvas();
            };
            F6_ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_ProcParticipantDialog);
            return F6_ProcParticipantDialog;
        }(_Ext.DialogBase));
        Procurement.F6_ProcParticipantDialog = F6_ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantGrid, _super);
            function F6_ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F6_ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.F6_ProcParticipant'; };
            F6_ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.F6_ProcParticipantDialog; };
            F6_ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F6_ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F6_ProcParticipantGrid.prototype.getService = function () { return Procurement.F6_ProcParticipantService.baseUrl; };
            F6_ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_ProcParticipantGrid);
            return F6_ProcParticipantGrid;
        }(_Ext.GridBase));
        Procurement.F6_ProcParticipantGrid = F6_ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantsEditor = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantsEditor, _super);
            function F6_ProcParticipantsEditor(container) {
                return _super.call(this, container) || this;
            }
            F6_ProcParticipantsEditor.prototype.getColumnsKey = function () { return "Procurement.F6_ProcParticipant"; };
            F6_ProcParticipantsEditor.prototype.getDialogType = function () { return Procurement.F6_ProcParticipantDialog; };
            F6_ProcParticipantsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F6_ProcParticipantsEditor.prototype.createToolbar = function () {
                return [];
            };
            F6_ProcParticipantsEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F6_ProcParticipantsEditor.prototype.validateEntity = function (row, id) {
                //row.VendorId = Q.toId(row.VendorId);
                var sameVendor = Q.tryFirst(this.view.getItems(), function (x) { return x.VendorId === row.VendorId; });
                if (sameVendor && this.id(sameVendor) !== id) {
                    Q.alert('This Vendor is already in procurement participants');
                    return false;
                }
                //console.log(row);
                //console.log(VendorRow.getLookup().items);
                //console.log(VendorRow.getLookup().itemById[row.VendorId]);
                //console.log(row.VendorId);
                row.VendorName = Procurement.VendorRow.getLookup().itemById[row.VendorId].Name;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F6_ProcParticipantsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_ProcParticipantsEditor);
            return F6_ProcParticipantsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F6_ProcParticipantsEditor = F6_ProcParticipantsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantItemDialog, _super);
            function F6_ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                //protected getService() { return F6_ProcParticipantItemService.baseUrl; }
                _this.form = new Procurement.F6_ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            F6_ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.F6_ProcParticipantItemForm.formKey; };
            //protected getIdProperty() { return ProcParticipantItemRow.idProperty; }
            F6_ProcParticipantItemDialog.prototype.getIdProperty = function () { return "__id"; };
            F6_ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F6_ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            F6_ProcParticipantItemDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                console.log("this.entity");
                console.log(this.entity);
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.entity.ProcurementDocSubmitMethodId == 2) {
                    this.entity.BidPrice = null;
                    this.form.BidPrice.value = null;
                    this.form.BidPrice.getGridField().toggle(false);
                }
            };
            F6_ProcParticipantItemDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                //if (this.parentForm.form.ContractTypeId.value == 1) {
                //}
            };
            F6_ProcParticipantItemDialog.prototype.onDialogClose = function () {
                //this.parentDialog.adjustItemGrid(this.form.ProcParticipantVendorId.value, this.form.EvaluationConclusionItemId.value);
            };
            F6_ProcParticipantItemDialog.prototype.getToolbarButtons = function () {
                return [];
            };
            F6_ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class F6_ProcParticipantItemDialog extends _Ext.DialogBase<ProcParticipantItemRow, any> {
            ], F6_ProcParticipantItemDialog);
            return F6_ProcParticipantItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.F6_ProcParticipantItemDialog = F6_ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantItemGrid, _super);
            function F6_ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F6_ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F6_ProcParticipantItem'; };
            F6_ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.F6_ProcParticipantItemDialog; };
            F6_ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F6_ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F6_ProcParticipantItemGrid.prototype.getService = function () { return Procurement.F6_ProcParticipantItemService.baseUrl; };
            F6_ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_ProcParticipantItemGrid);
            return F6_ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.F6_ProcParticipantItemGrid = F6_ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F6_ProcParticipantItemsEditor = /** @class */ (function (_super) {
            __extends(F6_ProcParticipantItemsEditor, _super);
            function F6_ProcParticipantItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.toolbar.element.toggle(false);
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                //columns = columns.filter(f => f.field != 'BidPrice');
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                columns = columns.filter(function (f) { return f.field != 'Plant'; });
                columns = columns.filter(function (f) { return f.field != 'StorageLocation'; });
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            F6_ProcParticipantItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F6_ProcParticipantItem"; };
            F6_ProcParticipantItemsEditor.prototype.getDialogType = function () { return Procurement.F6_ProcParticipantItemDialog; };
            F6_ProcParticipantItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F6_ProcParticipantItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F6_ProcParticipantItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            F6_ProcParticipantItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our export button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.F6_ProcParticipantItemService.baseUrl + "/ListExcelBidPrice", request: gridRows, target: '_blank' });
                    }
                });
                //// add our import button
                //buttons.push({
                //    title: 'Import From Excel',
                //    cssClass: 'export-xlsx-button',
                //    onClick: () => {
                //        // open import dialog, let it handle rest
                //        var dialog = new BidPriceImportDialog();
                //        dialog.procParticipantItemsEditor = this;
                //        dialog.element.on('dialogclose', () => {
                //            this.refresh();
                //            dialog = null;
                //        });
                //        dialog.dialogOpen();
                //    }
                //});
                return buttons;
            };
            F6_ProcParticipantItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F6_ProcParticipantItemsEditor);
            return F6_ProcParticipantItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F6_ProcParticipantItemsEditor = F6_ProcParticipantItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantDialog, _super);
            function F7_ProcParticipantDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.F7_ProcParticipantForm(_this.idPrefix);
                //Change when click dropdowntext evaluation conclution
                _this.form.EvaluationConclusionId.changeSelect2(function (e) { return _this.updateInterface(); });
                return _this;
            }
            F7_ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.F7_ProcParticipantForm.formKey; };
            F7_ProcParticipantDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F7_ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F7_ProcParticipantDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F7_ProcParticipantDialog.prototype.getService = function () { return Procurement.F7_ProcParticipantService.baseUrl; };
            //protected getToolbarButtons(): Serenity.ToolButton[] {
            //    return [];
            //}
            F7_ProcParticipantDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
                    this.form.PriceDocumentFile.getGridField().toggle(false);
                    this.form.PriceDocumentFile.element.find(".file-item").remove();
                    //this.form.PriceDocumentFile.element.remove();
                    //this.form.PriceDocumentFile.element.parent().toggle(false);
                }
            };
            F7_ProcParticipantDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                console.log("Apapun itu" + this.form.EvaluationConclusionId.get_value());
                //if (this.form.EvaluationConclusionId.get_value() == "No Quote") {
                if (this.form.EvaluationConclusionId.get_value() != 1) {
                    this.form.QuoteDesc.getGridField().toggle(false);
                    this.onDialogOpen();
                }
                else {
                    //this.form.RfqItems.element.parent().parent().toggle(false);
                    this.form.QuoteDesc.getGridField().toggle(true);
                    this.onDialogOpen();
                }
            };
            F7_ProcParticipantDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                //need this to re-adjust detail grid, otherwise some column wouldn't shown
                //this.form.ProcParticipantItems.slickGrid.resizeCanvas();
                //this.form.QuoteDesc.getGridField().show(true);
            };
            F7_ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_ProcParticipantDialog);
            return F7_ProcParticipantDialog;
        }(_Ext.DialogBase));
        Procurement.F7_ProcParticipantDialog = F7_ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantGrid, _super);
            function F7_ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F7_ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.F7_ProcParticipant'; };
            F7_ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.F7_ProcParticipantDialog; };
            F7_ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F7_ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F7_ProcParticipantGrid.prototype.getService = function () { return Procurement.F7_ProcParticipantService.baseUrl; };
            F7_ProcParticipantGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F7_ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_ProcParticipantGrid);
            return F7_ProcParticipantGrid;
        }(_Ext.GridBase));
        Procurement.F7_ProcParticipantGrid = F7_ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantsEditor = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantsEditor, _super);
            function F7_ProcParticipantsEditor(container) {
                return _super.call(this, container) || this;
                //this.toolbar.element.remove();
            }
            F7_ProcParticipantsEditor.prototype.getColumnsKey = function () { return "Procurement.F7_ProcParticipant"; };
            F7_ProcParticipantsEditor.prototype.getDialogType = function () { return Procurement.F7_ProcParticipantDialog; };
            F7_ProcParticipantsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F7_ProcParticipantsEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F7_ProcParticipantsEditor.prototype.validateEntity = function (row, id) {
                //row.VendorId = Q.toId(row.VendorId);
                var sameVendor = Q.tryFirst(this.view.getItems(), function (x) { return x.VendorId === row.VendorId; });
                if (sameVendor && this.id(sameVendor) !== id) {
                    Q.alert('This Vendor is already in procurement participants');
                    return false;
                }
                //console.log(row);
                //console.log(VendorRow.getLookup().items);
                //console.log(VendorRow.getLookup().itemById[row.VendorId]);
                //console.log(row.VendorId);
                row.VendorName = Procurement.VendorRow.getLookup().itemById[row.VendorId].Name;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            //protected getColumns() {
            //    var c = super.getColumns();
            //    console.log("this.parentDialog");
            //    console.log(this.parentDialog);
            //    //1 (Satu) Tahap - 2 (Dua) Sampul
            //    //if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
            //        c.splice(Q.indexOf(c, x => x.field == ProcParticipantRow.Fields.PriceDocumentFile), 1);
            //    //}
            //    return c;
            //}
            F7_ProcParticipantsEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F7_ProcParticipantsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_ProcParticipantsEditor);
            return F7_ProcParticipantsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F7_ProcParticipantsEditor = F7_ProcParticipantsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantItemDialog, _super);
            function F7_ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                //protected getService() { return F7_ProcParticipantItemService.baseUrl; }
                _this.form = new Procurement.F7_ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            F7_ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.F7_ProcParticipantItemForm.formKey; };
            //protected getIdProperty() { return ProcParticipantItemRow.idProperty; }
            F7_ProcParticipantItemDialog.prototype.getIdProperty = function () { return "__id"; };
            F7_ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F7_ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            F7_ProcParticipantItemDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                console.log("this.entity");
                console.log(this.entity);
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.entity.ProcurementDocSubmitMethodId == 2) {
                    this.entity.BidPrice = null;
                    this.form.BidPrice.value = null;
                    this.form.BidPrice.getGridField().toggle(false);
                }
            };
            F7_ProcParticipantItemDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                //if (this.parentForm.form.ContractTypeId.value == 1) {
                //}
            };
            F7_ProcParticipantItemDialog.prototype.onDialogClose = function () {
                //this.parentDialog.adjustItemGrid(this.form.ProcParticipantVendorId.value, this.form.EvaluationConclusionItemId.value);
            };
            F7_ProcParticipantItemDialog.prototype.getToolbarButtons = function () {
                return [];
            };
            F7_ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class F7_ProcParticipantItemDialog extends _Ext.DialogBase<ProcParticipantItemRow, any> {
            ], F7_ProcParticipantItemDialog);
            return F7_ProcParticipantItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.F7_ProcParticipantItemDialog = F7_ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantItemGrid, _super);
            function F7_ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F7_ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F7_ProcParticipantItem'; };
            F7_ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.F7_ProcParticipantItemDialog; };
            F7_ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F7_ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F7_ProcParticipantItemGrid.prototype.getService = function () { return Procurement.F7_ProcParticipantItemService.baseUrl; };
            F7_ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_ProcParticipantItemGrid);
            return F7_ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.F7_ProcParticipantItemGrid = F7_ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_ProcParticipantItemsEditor = /** @class */ (function (_super) {
            __extends(F7_ProcParticipantItemsEditor, _super);
            function F7_ProcParticipantItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.toolbar.element.toggle(false);
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                //columns = columns.filter(f => f.field != 'BidPrice');
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                //columns = columns.filter(f => f.field != 'Plant');
                //columns = columns.filter(f => f.field != 'StorageLocation');
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            F7_ProcParticipantItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F7_ProcParticipantItem"; };
            F7_ProcParticipantItemsEditor.prototype.getDialogType = function () { return Procurement.F7_ProcParticipantItemDialog; };
            F7_ProcParticipantItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F7_ProcParticipantItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            F7_ProcParticipantItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            F7_ProcParticipantItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our export button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.F7_ProcParticipantItemService.baseUrl + "/ListExcelBidPrice", request: gridRows, target: '_blank' });
                    }
                });
                //// add our import button
                //buttons.push({
                //    title: 'Import From Excel',
                //    cssClass: 'export-xlsx-button',
                //    onClick: () => {
                //        // open import dialog, let it handle rest
                //        var dialog = new BidPriceImportDialog();
                //        dialog.procParticipantItemsEditor = this;
                //        dialog.element.on('dialogclose', () => {
                //            this.refresh();
                //            dialog = null;
                //        });
                //        dialog.dialogOpen();
                //    }
                //});
                return buttons;
            };
            F7_ProcParticipantItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_ProcParticipantItemsEditor);
            return F7_ProcParticipantItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F7_ProcParticipantItemsEditor = F7_ProcParticipantItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
///// <reference path="../../_Ext/Bases/DialogBase.ts" />
///// <reference path="../../_Ext/Bases/GridBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_TenderEvaluationDialog = /** @class */ (function (_super) {
            __extends(F7_TenderEvaluationDialog, _super);
            function F7_TenderEvaluationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F7_TenderEvaluationForm(_this.idPrefix);
                return _this;
            }
            F7_TenderEvaluationDialog.prototype.getFormKey = function () { return Procurement.F7_TenderEvaluationForm.formKey; };
            F7_TenderEvaluationDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F7_TenderEvaluationDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F7_TenderEvaluationDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F7_TenderEvaluationDialog.prototype.getService = function () { return Procurement.F7_TenderEvaluationService.baseUrl; };
            F7_TenderEvaluationDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F7_TenderEvaluationService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F7_TenderEvaluationService.SendMail({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                                Procurement.F7_TenderEvaluationService.SendCommitteeNotification({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report [R4] - Berita Acara Pembukaan Dokumen Penawaran Sampul I (Administrasi dan Teknis)",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        _this.get_entityId();
                        var a = '../Procurement/Report/ReportR4?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F7_TenderEvaluationDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                this.form.ProcParticipant.parentDialog = this;
                var columns = this.form.ProcParticipant.slickGrid.getColumns();
                //1 (Satu) Tahap - 2 (Dua) Sampul
                if (this.get_entity().DocSubmitMethodId == 2) {
                    //columns = columns.filter(f => f.field != ProcParticipantRow.Fields.PriceDocumentName);
                    columns = columns.filter(function (f) { return f.field != "PriceDocumentFile" /* PriceDocumentFile */; });
                }
                console.log("this.entity.DocSubmitMethodId");
                console.log(this.entity.DocSubmitMethodId);
                this.form.ProcParticipant.slickGrid.setColumns(columns);
                this.form.ProcParticipant.slickGrid.resizeCanvas();
                //if (!this.form.F31SubmitDate.value) {
                //    Q.alert("Owner Estimate pengadaan ini belum diisi. <a href='/" + F3_1_InputOwnerEstimateService.baseUrl + "#edit/" + this.get_entityId() + "' target='_blank'>Isi Owner Estimate</a>", { htmlEncode: false });
                //    this.dialogClose();
                //}
            };
            F7_TenderEvaluationDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F7SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F7_TenderEvaluationDialog.prototype.getEntity = function () {
                return this.get_entity();
            };
            F7_TenderEvaluationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_TenderEvaluationDialog);
            return F7_TenderEvaluationDialog;
        }(_Ext.DialogBase));
        Procurement.F7_TenderEvaluationDialog = F7_TenderEvaluationDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F7_TenderEvaluationGrid = /** @class */ (function (_super) {
            __extends(F7_TenderEvaluationGrid, _super);
            function F7_TenderEvaluationGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F7_TenderEvaluationGrid.prototype.getColumnsKey = function () { return 'Procurement.F7_TenderEvaluation'; };
            F7_TenderEvaluationGrid.prototype.getDialogType = function () { return Procurement.F7_TenderEvaluationDialog; };
            F7_TenderEvaluationGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F7_TenderEvaluationGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F7_TenderEvaluationGrid.prototype.getService = function () { return Procurement.F7_TenderEvaluationService.baseUrl; };
            F7_TenderEvaluationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F7_TenderEvaluationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F7_TenderEvaluationGrid);
            return F7_TenderEvaluationGrid;
        }(_Ext.GridBase));
        Procurement.F7_TenderEvaluationGrid = F7_TenderEvaluationGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(F8_ProcParticipantDialog, _super);
            function F8_ProcParticipantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F8_ProcParticipantForm(_this.idPrefix);
                return _this;
            }
            F8_ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.F8_ProcParticipantForm.formKey; };
            F8_ProcParticipantDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F8_ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F8_ProcParticipantDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantRow.nameProperty; };
            F8_ProcParticipantDialog.prototype.getService = function () { return Procurement.F8_ProcParticipantService.baseUrl; };
            //protected getToolbarButtons(): Serenity.ToolButton[] {
            //    return [];
            //}
            F8_ProcParticipantDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //console.log("this.parentDialog.getEntity()");
                //console.log(this.parentDialog.getEntity());
                ////1 (Satu) Tahap - 2 (Dua) Sampul
                //if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
                //    this.form.PriceDocumentFile.getGridField().toggle(false);
                //    this.form.PriceDocumentFile.element.find(".file-item").remove();
                //    //this.form.PriceDocumentFile.element.remove();
                //    //this.form.PriceDocumentFile.element.parent().toggle(false);
                //}
            };
            F8_ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F8_ProcParticipantDialog);
            return F8_ProcParticipantDialog;
        }(_Ext.DialogBase));
        Procurement.F8_ProcParticipantDialog = F8_ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(F8_ProcParticipantGrid, _super);
            function F8_ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F8_ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.F8_ProcParticipant'; };
            F8_ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.F8_ProcParticipantDialog; };
            F8_ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            F8_ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F8_ProcParticipantGrid.prototype.getService = function () { return Procurement.F8_ProcParticipantService.baseUrl; };
            F8_ProcParticipantGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F8_ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F8_ProcParticipantGrid);
            return F8_ProcParticipantGrid;
        }(_Ext.GridBase));
        Procurement.F8_ProcParticipantGrid = F8_ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_ProcParticipantsEditor = /** @class */ (function (_super) {
            __extends(F8_ProcParticipantsEditor, _super);
            function F8_ProcParticipantsEditor(container) {
                return _super.call(this, container) || this;
                //this.toolbar.element.remove();
            }
            F8_ProcParticipantsEditor.prototype.getColumnsKey = function () { return "Procurement.F8_ProcParticipant"; };
            F8_ProcParticipantsEditor.prototype.getDialogType = function () { return Procurement.F8_ProcParticipantDialog; };
            F8_ProcParticipantsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            F8_ProcParticipantsEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F8_ProcParticipantsEditor.prototype.validateEntity = function (row, id) {
                //row.VendorId = Q.toId(row.VendorId);
                var sameVendor = Q.tryFirst(this.view.getItems(), function (x) { return x.VendorId === row.VendorId; });
                if (sameVendor && this.id(sameVendor) !== id) {
                    Q.alert('This Vendor is already in procurement participants');
                    return false;
                }
                //console.log(row);
                //console.log(VendorRow.getLookup().items);
                //console.log(VendorRow.getLookup().itemById[row.VendorId]);
                //console.log(row.VendorId);
                row.VendorName = Procurement.VendorRow.getLookup().itemById[row.VendorId].Name;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            //protected getColumns() {
            //    var c = super.getColumns();
            //    console.log("this.parentDialog");
            //    console.log(this.parentDialog);
            //    //1 (Satu) Tahap - 2 (Dua) Sampul
            //    //if (this.parentDialog.getEntity().DocSubmitMethodId == 2) {
            //        c.splice(Q.indexOf(c, x => x.field == ProcParticipantRow.Fields.PriceDocumentFile), 1);
            //    //}
            //    return c;
            //}
            F8_ProcParticipantsEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F8_ProcParticipantsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F8_ProcParticipantsEditor);
            return F8_ProcParticipantsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F8_ProcParticipantsEditor = F8_ProcParticipantsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_TechnicalClarificationDialog = /** @class */ (function (_super) {
            __extends(F8_TechnicalClarificationDialog, _super);
            function F8_TechnicalClarificationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.F8_TechnicalClarificationForm(_this.idPrefix);
                return _this;
            }
            F8_TechnicalClarificationDialog.prototype.getFormKey = function () { return Procurement.F8_TechnicalClarificationForm.formKey; };
            F8_TechnicalClarificationDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F8_TechnicalClarificationDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F8_TechnicalClarificationDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F8_TechnicalClarificationDialog.prototype.getService = function () { return Procurement.F8_TechnicalClarificationService.baseUrl; };
            F8_TechnicalClarificationDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Submit'),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F8_TechnicalClarificationService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F8_TechnicalClarificationService.SendMail({ EntityId: _this.get_entityId() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                return buttons;
            };
            F8_TechnicalClarificationDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                //hide next button when flow passed
                if (this.entity.F8SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F8_TechnicalClarificationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], F8_TechnicalClarificationDialog);
            return F8_TechnicalClarificationDialog;
        }(_Ext.DialogBase));
        Procurement.F8_TechnicalClarificationDialog = F8_TechnicalClarificationDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F8_TechnicalClarificationGrid = /** @class */ (function (_super) {
            __extends(F8_TechnicalClarificationGrid, _super);
            function F8_TechnicalClarificationGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F8_TechnicalClarificationGrid.prototype.getColumnsKey = function () { return 'Procurement.F8_TechnicalClarification'; };
            F8_TechnicalClarificationGrid.prototype.getDialogType = function () { return Procurement.F8_TechnicalClarificationDialog; };
            F8_TechnicalClarificationGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F8_TechnicalClarificationGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F8_TechnicalClarificationGrid.prototype.getService = function () { return Procurement.F8_TechnicalClarificationService.baseUrl; };
            F8_TechnicalClarificationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F8_TechnicalClarificationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F8_TechnicalClarificationGrid);
            return F8_TechnicalClarificationGrid;
        }(_Ext.GridBase));
        Procurement.F8_TechnicalClarificationGrid = F8_TechnicalClarificationGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_PriceEvaluationDialog = /** @class */ (function (_super) {
            __extends(F9_PriceEvaluationDialog, _super);
            function F9_PriceEvaluationDialog(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Procurement.F9_PriceEvaluationForm(_this.idPrefix);
                _this.form.ProcParticipantItems.parentDialog = _this;
                return _this;
            }
            F9_PriceEvaluationDialog.prototype.getFormKey = function () { return Procurement.F9_PriceEvaluationForm.formKey; };
            F9_PriceEvaluationDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F9_PriceEvaluationDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F9_PriceEvaluationDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            F9_PriceEvaluationDialog.prototype.getService = function () { return Procurement.F9_PriceEvaluationService.baseUrl; };
            F9_PriceEvaluationDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }) > -1) {
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                }
                if (Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }) > -1) {
                    //it's used for pendingChangesConfirmation, we can't just remove the button
                    var saveCloseIndex = Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
                    buttons[saveCloseIndex].cssClass = buttons[saveCloseIndex].cssClass + " hide";
                }
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }) + 1, 0, {
                    title: Q.text('Notifikasi Harga Penawaran '),
                    cssClass: 'submit-button',
                    icon: 'fa-play text-green',
                    onClick: function () {
                        Q.confirm('Are you sure want to submit?', function () {
                            Procurement.F9_PriceEvaluationService.Submit({
                                EntityId: _this.get_entityId(),
                                Entity: _this.getSaveEntity()
                            }, function (response) {
                                Procurement.F9_PriceEvaluationService.SendMail({ EntityId: _this.get_entityId(), Entity: _this.getSaveEntity() }, function (response) {
                                    Q.notifySuccess("Procuremnt " + _this.form.Title.value + " has been successfully Submitted.");
                                    _this.reloadById();
                                });
                            });
                        });
                    }
                });
                buttons.push({
                    title: "Report Evaluasi Harga Penawaran",
                    cssClass: "'dd-note-button",
                    icon: "fa-print",
                    separator: true,
                    onClick: function () {
                        //this.get_entity
                        _this.get_entityId();
                        var a = '../Procurement/Report/EVALUASI_HARGA?';
                        //window.open(a, '_blank');
                        window.open(a + 'ProcurementId=' + _this.get_entityId(), '_blank');
                        //window.location.href = a + this.get_entityId(), '_blank';
                    }
                });
                return buttons;
            };
            F9_PriceEvaluationDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
            };
            F9_PriceEvaluationDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                //need this to re-adjust detail grid, otherwise some column wouldn't shown
                this.form.ProcParticipantItems.slickGrid.resizeCanvas();
            };
            F9_PriceEvaluationDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                this.adjustItemGrid();
                //hide next button when flow passed
                if (this.entity.F9SubmitDate) {
                    this.toolbar.findButton(".submit-button").remove();
                    this.toolbar.findButton(".apply-changes-button").remove();
                }
            };
            F9_PriceEvaluationDialog.prototype.adjustItemGrid = function (changedVendorId, evaluationConclusionItemId) {
                var _this = this;
                var data = this.form.ProcParticipantItems.view.getItems();
                function uniqueBy(arr, prop) {
                    return arr.reduce(function (a, d) {
                        if (!a.includes(d[prop])) {
                            a.push(d[prop]);
                        }
                        return a;
                    }, []);
                }
                //rank item
                var items = uniqueBy(data, "ItemSequence");
                var resultArr = [];
                items.forEach(function (item) {
                    var filteredArr = data.filter(function (o) { return o.ItemSequence == item; });
                    //filteredArr.sort((a, b) => (a.BidPrice > b.BidPrice) ? 1 : ((b.BidPrice > a.BidPrice) ? -1 : 0))
                    filteredArr.sort(function (a, b) {
                        return (a.BidPrice > b.BidPrice) ? 1 : ((b.BidPrice > a.BidPrice) ? -1 :
                            //if same price, sort by document submit date
                            (a.F5ParticipantSubmitDate > b.F5ParticipantSubmitDate) ? 1 : ((b.F5ParticipantSubmitDate > a.F5ParticipantSubmitDate) ? -1 : 0));
                    });
                    console.log(filteredArr.length);
                    for (var i = 0; i < filteredArr.length; i++) {
                        filteredArr[i].Rank = i + 1;
                        //contract type lumpsum
                        if (_this.form.ContractTypeId.value == 1
                            && typeof evaluationConclusionItemId !== "undefined") {
                            //assign all item conclusion as winner based vendor
                            console.log("Apapunitubla");
                            console.log(evaluationConclusionItemId);
                            console.log(changedVendorId);
                            if (changedVendorId == filteredArr[i].VendorId
                                && evaluationConclusionItemId != 1 //winner
                            ) {
                                console.log(changedVendorId);
                                console.log(evaluationConclusionItemId);
                                console.log(filteredArr[i]);
                                filteredArr[i].EvaluationConclusionItemId = evaluationConclusionItemId;
                                filteredArr[i].EvaluationConclusionItemName = Procurement.EvaluationConclusionItemRow.getLookup().itemById[evaluationConclusionItemId].Name;
                            }
                            else {
                                filteredArr[i].EvaluationConclusionItemId = null;
                                filteredArr[i].EvaluationConclusionItemName = null;
                            }
                        }
                    }
                    resultArr = resultArr.concat(filteredArr);
                });
                this.form.ProcParticipantItems.view.setItems(data, true);
            };
            F9_PriceEvaluationDialog.prototype.compare = function (a, b) {
                if (a.ItemSequence < b.ItemSequence)
                    return -1;
                if (a.ItemSequence > b.ItemSequence)
                    return 1;
                return 0;
            };
            F9_PriceEvaluationDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class F9_PriceEvaluationDialog extends _Ext.DialogBase<ProcurementRow, any> {
            ], F9_PriceEvaluationDialog);
            return F9_PriceEvaluationDialog;
        }(_Ext.DialogBase));
        Procurement.F9_PriceEvaluationDialog = F9_PriceEvaluationDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_PriceEvaluationGrid = /** @class */ (function (_super) {
            __extends(F9_PriceEvaluationGrid, _super);
            function F9_PriceEvaluationGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F9_PriceEvaluationGrid.prototype.getColumnsKey = function () { return 'Procurement.F9_PriceEvaluation'; };
            F9_PriceEvaluationGrid.prototype.getDialogType = function () { return Procurement.F9_PriceEvaluationDialog; };
            F9_PriceEvaluationGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            F9_PriceEvaluationGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            F9_PriceEvaluationGrid.prototype.getService = function () { return Procurement.F9_PriceEvaluationService.baseUrl; };
            F9_PriceEvaluationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            F9_PriceEvaluationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F9_PriceEvaluationGrid);
            return F9_PriceEvaluationGrid;
        }(_Ext.GridBase));
        Procurement.F9_PriceEvaluationGrid = F9_PriceEvaluationGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(F9_ProcParticipantItemDialog, _super);
            function F9_ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                //protected getService() { return F9_ProcParticipantItemService.baseUrl; }
                _this.form = new Procurement.F9_ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            //view: any;
            F9_ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.F9_ProcParticipantItemForm.formKey; };
            //protected getIdProperty() { return ProcParticipantItemRow.idProperty; }
            F9_ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F9_ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            //protected enableFiltering() {
            //    return true;
            //}
            //protected onViewSubmit() {
            //    this.view.beginUpdate();
            //    let filter = function filter(item, args) {
            //        var linha = (item as ProcParticipantItemRow);
            //        // filter logic
            //        //Sample filter (if the Value for column "CduCodigo" equals 3)
            //        if (item["BidPrice"] == "0")
            //            return true;
            //        console.log("Berhasil ga bro???");
            //        return false;
            //    }
            //    this.view.setFilter(filter);
            //    this.view.endUpdate();
            //    return true;
            //}
            F9_ProcParticipantItemDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                //if (this.parentForm.form.ContractTypeId.value == 1) {
                //}
            };
            F9_ProcParticipantItemDialog.prototype.onDialogClose = function () {
                this.parentDialog.adjustItemGrid(this.form.ProcParticipantVendorId.value, this.form.EvaluationConclusionItemId.value);
            };
            F9_ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //tambah ini
                //@Serenity.Decorators.filterable()
                //export class F9_ProcParticipantItemDialog extends _Ext.DialogBase<ProcParticipantItemRow, any> {
            ], F9_ProcParticipantItemDialog);
            return F9_ProcParticipantItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.F9_ProcParticipantItemDialog = F9_ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(F9_ProcParticipantItemGrid, _super);
            function F9_ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            F9_ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.F9_ProcParticipantItem'; };
            F9_ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.F9_ProcParticipantItemDialog; };
            F9_ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            F9_ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F9_ProcParticipantItemGrid.prototype.getService = function () { return Procurement.F9_ProcParticipantItemService.baseUrl; };
            F9_ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], F9_ProcParticipantItemGrid);
            return F9_ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.F9_ProcParticipantItemGrid = F9_ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var F9_ProcParticipantItemsEditor = /** @class */ (function (_super) {
            __extends(F9_ProcParticipantItemsEditor, _super);
            function F9_ProcParticipantItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.toolbar.element.toggle(false);
                return _this;
                //let columns = this.slickGrid.getColumns();
                //console.log(columns);
                ////columns = columns.filter(f => f.field != 'RfqItemId');
                //columns = columns.filter(f => f.field != 'ProcurementStatus');
            }
            F9_ProcParticipantItemsEditor.prototype.getColumnsKey = function () { return "Procurement.F9_ProcParticipantItem"; };
            F9_ProcParticipantItemsEditor.prototype.getDialogType = function () { return Procurement.F9_ProcParticipantItemDialog; };
            F9_ProcParticipantItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            F9_ProcParticipantItemsEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                dialog.parentDialog = this.parentDialog;
            };
            F9_ProcParticipantItemsEditor.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                // need to register this plugin for grouping or you'll have errors
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setGrouping([
                    {
                        formatter: function (x) { return x.rows[0]["VendorName" /* VendorName */] + ' (' + x.value + '), Doc Submit Date: ' + Q.formatDate(x.rows[0]["F5ParticipantSubmitDate" /* F5ParticipantSubmitDate */], 'dd/MM/yyyy HH:mm:ss'); },
                        getter: "ProcParticipantVendorId" /* ProcParticipantVendorId */
                    },
                ]);
                ////ProcParticipantVendorId
                //this.view.setSummaryOptions({
                //    aggregators: [
                //        //new Slick.Aggregators.Avg(fld.UnitPrice),
                //        new Slick.Aggregators.Sum(fld.BidPrice),
                //        //new Slick.Aggregators.Max(fld.UnitsOnOrder),
                //        //new Slick.Aggregators.Avg(fld.ReorderLevel)
                //    ]
                //});
                return grid;
            };
            //protected getColumns() {
            //    var columns = super.getColumns();
            //    console.log(columns);
            //    Q.first(columns, x => x.field === fld.BidPrice)
            //        .groupTotalsFormatter = (totals, col) =>
            //            (totals.sum ? ('sum: ' + Q.coalesce(totals.sum[col.field], '')) : '');
            //    //Q.first(columns, x => x.field === fld.ReorderLevel)
            //    //    .groupTotalsFormatter = (totals, col) =>
            //    //        (totals.avg ? ('avg: ' + Q.coalesce(Q.formatNumber(totals.avg[col.field], '0.'), '')) : '');
            //    return columns;
            //}
            //protected getSlickOptions() {
            //    var opt = super.getSlickOptions();
            //    opt.showFooterRow = true;
            //    return opt;
            //}
            F9_ProcParticipantItemsEditor.prototype.usePager = function () {
                return false;
            };
            F9_ProcParticipantItemsEditor.prototype.validateEntity = function (row, id) {
                var itemRow = row;
                //row
                //row.ProcParticipantItemId = Q.toId(row.ProcParticipantItemId);
                //var sameProcParticipantItem = Q.tryFirst(this.view.getItems(), x => x.ProcParticipantItemId === row.ProcParticipantItemId);
                //if (sameProcParticipantItem && this.id(sameProcParticipantItem) !== id) {
                //    Q.alert('This ProcParticipantItem is already in list');
                //    return false;
                //}
                //console.log(row);
                //console.log(ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId]);
                //row.TextLine = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].TextLine;
                //row.TextMeaning = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].TextMeaning;
                //row.TextId = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].TextId;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                //row.ProcParticipantVendorId = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].ProcParticipantVendorId;
                //row.VendorName = ProcParticipantItemRow.getLookup().itemById[row.ProcParticipantItemId].VendorName;
                //var newRow = ProcParticipantItemRow.getLookup().items.filter(function (item) {
                //    //for (var key in filter) {
                //    //console.log("row.Item");
                //    //console.log(row.Item);
                //    //console.log("item[\"Item\"]");
                //    //console.log(item["Item"]);
                //    //console.log("item[\"Item\"] == row.Item")
                //    //console.log(item["Item"] == row.Item);
                //    console.log("item");
                //    console.log(item);
                //    console.log("item[ProcParticipantId]");
                //    console.log(item["ProcParticipantId"]);
                //    console.log("row.ProcParticipantId");
                //    console.log(row.ProcParticipantId);
                //    if (item["ProcParticipantId"] == row.ProcParticipantId
                //        && item["Item"] == row.Item) {
                //        console.log("true")
                //        return true;
                //    } else {
                //        console.log("false")
                //        return false;
                //    }
                //    //}
                //});
                //console.log("newRow");
                //console.log(newRow);
                //row.EvaluationConclusionItemName = newRow[0].EvaluationConclusionItemName;
                itemRow.EvaluationConclusionItemName = Procurement.EvaluationConclusionItemRow.getLookup().itemById[itemRow.EvaluationConclusionItemId].Name;
                return true;
            };
            F9_ProcParticipantItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], F9_ProcParticipantItemsEditor);
            return F9_ProcParticipantItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.F9_ProcParticipantItemsEditor = F9_ProcParticipantItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OrderTypeDialog = /** @class */ (function (_super) {
            __extends(OrderTypeDialog, _super);
            function OrderTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.OrderTypeForm(_this.idPrefix);
                return _this;
            }
            OrderTypeDialog.prototype.getFormKey = function () { return Procurement.OrderTypeForm.formKey; };
            OrderTypeDialog.prototype.getIdProperty = function () { return Procurement.OrderTypeRow.idProperty; };
            OrderTypeDialog.prototype.getLocalTextPrefix = function () { return Procurement.OrderTypeRow.localTextPrefix; };
            OrderTypeDialog.prototype.getNameProperty = function () { return Procurement.OrderTypeRow.nameProperty; };
            OrderTypeDialog.prototype.getService = function () { return Procurement.OrderTypeService.baseUrl; };
            OrderTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OrderTypeDialog);
            return OrderTypeDialog;
        }(_Ext.DialogBase));
        Procurement.OrderTypeDialog = OrderTypeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var OrderTypeGrid = /** @class */ (function (_super) {
            __extends(OrderTypeGrid, _super);
            function OrderTypeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            OrderTypeGrid.prototype.getColumnsKey = function () { return 'Procurement.OrderType'; };
            OrderTypeGrid.prototype.getDialogType = function () { return Procurement.OrderTypeDialog; };
            OrderTypeGrid.prototype.getIdProperty = function () { return Procurement.OrderTypeRow.idProperty; };
            OrderTypeGrid.prototype.getLocalTextPrefix = function () { return Procurement.OrderTypeRow.localTextPrefix; };
            OrderTypeGrid.prototype.getService = function () { return Procurement.OrderTypeService.baseUrl; };
            OrderTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OrderTypeGrid);
            return OrderTypeGrid;
        }(_Ext.GridBase));
        Procurement.OrderTypeGrid = OrderTypeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantDialog = /** @class */ (function (_super) {
            __extends(ProcParticipantDialog, _super);
            function ProcParticipantDialog() {
                var _this = _super.call(this) || this;
                //protected getNameProperty() { return ProcParticipantRow.nameProperty; }
                //protected getService() { return ProcParticipantService.baseUrl; }
                _this.form = new Procurement.ProcParticipantForm(_this.idPrefix);
                _this.form = new Procurement.ProcParticipantForm(_this.idPrefix);
                _this.form.VendorId.changeSelect2(function (e) {
                    //var vendorID = Q.toId(this.form.VendorID.value);
                    var vendorId = _this.form.VendorId.get_value();
                    if (vendorId) {
                        _this.form.VendorName.value = Procurement.VendorRow.getLookup().itemById[vendorId].Name;
                        _this.form.VendorPenaltyCode.value = Procurement.VendorRow.getLookup().itemById[vendorId].PenaltyCode;
                        _this.form.Qualification.value = Procurement.VendorRow.getLookup().itemById[vendorId].Qualification;
                    }
                });
                return _this;
                //this.form.Discount.addValidationRule(this.uniqueName, e => {
                //    var price = this.form.UnitPrice.value;
                //    var quantity = this.form.Quantity.value;
                //    var discount = this.form.Discount.value;
                //    if (price != null && quantity != null && discount != null &&
                //        discount > 0 && discount >= price * quantity) {
                //        return "Discount can't be higher than total price!";
                //    }
                //});
            }
            ProcParticipantDialog.prototype.getFormKey = function () { return Procurement.ProcParticipantForm.formKey; };
            //protected getIdProperty() { return ProcParticipantRow.idProperty; }
            ProcParticipantDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            ProcParticipantDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class ProcParticipantDialog extends _Ext.DialogBase<ProcParticipantRow, any> {
            ], ProcParticipantDialog);
            return ProcParticipantDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.ProcParticipantDialog = ProcParticipantDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantGrid = /** @class */ (function (_super) {
            __extends(ProcParticipantGrid, _super);
            function ProcParticipantGrid(container, options) {
                return _super.call(this, container, options) || this;
                //    this.isHighestVersionFilter = {
                //    type: Serenity.SelectEditor,
                //    title: "Is Highest Version",
                //    options: {
                //        items: ["yes", "no"]
                //    },
                //    handler: h => {
                //        var request = (h.request as CustomGridListRequest);
                //        var value = (h.widget as Serenity.SelectEditor).value;
                //        if (Q.trimToNull(value) !== null) {
                //            request.IsHighestVersion = value == "yes" ? true : false;
                //            h.active = true;
                //        }
                //        else {
                //            h.active = false;
                //        }
                //        h.handled = true;
                //    }
                //};
                //this.addQuickFilter(this.isHighestVersionFilter);
            }
            ProcParticipantGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcParticipant'; };
            ProcParticipantGrid.prototype.getDialogType = function () { return Procurement.ProcParticipantDialog; };
            ProcParticipantGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantRow.idProperty; };
            ProcParticipantGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            ProcParticipantGrid.prototype.getService = function () { return Procurement.ProcParticipantService.baseUrl; };
            ProcParticipantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantGrid);
            return ProcParticipantGrid;
        }(_Ext.GridBase));
        Procurement.ProcParticipantGrid = ProcParticipantGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantLookupEditor = /** @class */ (function (_super) {
            __extends(ProcParticipantLookupEditor, _super);
            function ProcParticipantLookupEditor(container, opt) {
                var _this = _super.call(this, container, opt) || this;
                container.data("VendorId", opt.vendorId);
                container.data("Name", opt.name);
                container.data("PenaltyCode", opt.penaltyCode);
                return _this;
            }
            ProcParticipantLookupEditor.prototype.getSelect2Options = function () {
                var selec2Options = _super.prototype.getSelect2Options.call(this);
                selec2Options.formatResult = this.myFormatResult;
                selec2Options.formatSelection = this.myFormatSelection;
                return selec2Options;
            };
            ProcParticipantLookupEditor.prototype.myFormatSelection = function (item) {
                if (item === undefined)
                    return null;
                var vendorId = item.source[this.element.data("VendorId")];
                var name = item.source[this.element.data("Name")];
                var penaltyCode = item.source[this.element.data("PenltyCode")];
                var title = "Code: " + vendorId;
                title += " - " + name;
                return "<div title='" + title + "'><b>" + vendorId + "</b>&nbsp;-&nbsp;" + name + "</div>";
            };
            ProcParticipantLookupEditor.prototype.myFormatResult = function (item) {
                var vendorId = item.source[this.element.data("VendorId")];
                var name = item.source[this.element.data("Name")];
                var penaltyCode = item.source[this.element.data("PenaltyCode")];
                var title = "VendorId: " + vendorId;
                title += " - " + name;
                title += " - " + penaltyCode;
                var markup = '<div class="row">' +
                    '<div class="col-xs-2" style="white-space: nowrap"><b>' + vendorId + "</b>" + "</div>" +
                    '<div class="col-xs-10"><small>' + name + '</small></div>' +
                    '<div class="col-xs-10"><small>' + penaltyCode + '</small></div>' +
                    '</div>';
                // This for search on code and description
                item.text = vendorId + " " + name + " " + penaltyCode;
                return markup;
            };
            ProcParticipantLookupEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], ProcParticipantLookupEditor);
            return ProcParticipantLookupEditor;
        }(Serenity.LookupEditorBase));
        Procurement.ProcParticipantLookupEditor = ProcParticipantLookupEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantsEditor = /** @class */ (function (_super) {
            __extends(ProcParticipantsEditor, _super);
            function ProcParticipantsEditor(container) {
                return _super.call(this, container) || this;
            }
            ProcParticipantsEditor.prototype.getColumnsKey = function () { return "Procurement.ProcParticipant"; };
            ProcParticipantsEditor.prototype.getDialogType = function () { return Procurement.ProcParticipantDialog; };
            ProcParticipantsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantRow.localTextPrefix; };
            ProcParticipantsEditor.prototype.validateEntity = function (row, id) {
                //row.VendorId = Q.toId(row.VendorId);
                var sameVendor = Q.tryFirst(this.view.getItems(), function (x) { return x.VendorId === row.VendorId; });
                if (sameVendor && this.id(sameVendor) !== id) {
                    Q.alert('This Vendor is already in Bidder List');
                    return false;
                }
                row.VendorId = Procurement.VendorRow.getLookup().itemById[row.VendorId].VendorId;
                row.VendorName = Procurement.VendorRow.getLookup().itemById[row.VendorId].Name;
                row.VendorPenaltyCode = Procurement.VendorRow.getLookup().itemById[row.VendorId].PenaltyCode;
                row.Qualification = Procurement.VendorRow.getLookup().itemById[row.VendorId].Qualification;
                //row.Invitation = ProcParticipantRow.getLookup().itemById[row.VendorId].Invitation;
                return true;
            };
            ProcParticipantsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantsEditor);
            return ProcParticipantsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.ProcParticipantsEditor = ProcParticipantsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantItemDialog = /** @class */ (function (_super) {
            __extends(ProcParticipantItemDialog, _super);
            function ProcParticipantItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ProcParticipantItemForm(_this.idPrefix);
                return _this;
            }
            //export class ProcParticipantItemDialog extends Serenity.EntityDialog<ProcParticipantItemRow, any> {
            ProcParticipantItemDialog.prototype.getFormKey = function () { return Procurement.ProcParticipantItemForm.formKey; };
            ProcParticipantItemDialog.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            ProcParticipantItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            ProcParticipantItemDialog.prototype.getNameProperty = function () { return Procurement.ProcParticipantItemRow.nameProperty; };
            ProcParticipantItemDialog.prototype.getService = function () { return Procurement.ProcParticipantItemService.baseUrl; };
            ProcParticipantItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class ProcParticipantItemDialog extends _Ext.DialogBase<ProcParticipantItemRow, any> {
            ], ProcParticipantItemDialog);
            return ProcParticipantItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.ProcParticipantItemDialog = ProcParticipantItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcParticipantItemGrid = /** @class */ (function (_super) {
            __extends(ProcParticipantItemGrid, _super);
            function ProcParticipantItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcParticipantItemGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcParticipantItem'; };
            ProcParticipantItemGrid.prototype.getDialogType = function () { return Procurement.ProcParticipantItemDialog; };
            ProcParticipantItemGrid.prototype.getIdProperty = function () { return Procurement.ProcParticipantItemRow.idProperty; };
            ProcParticipantItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcParticipantItemRow.localTextPrefix; };
            ProcParticipantItemGrid.prototype.getService = function () { return Procurement.ProcParticipantItemService.baseUrl; };
            ProcParticipantItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcParticipantItemGrid);
            return ProcParticipantItemGrid;
        }(_Ext.GridBase));
        Procurement.ProcParticipantItemGrid = ProcParticipantItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcPrDialog = /** @class */ (function (_super) {
            __extends(ProcPrDialog, _super);
            function ProcPrDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ProcPrForm(_this.idPrefix);
                return _this;
            }
            ProcPrDialog.prototype.getFormKey = function () { return Procurement.ProcPrForm.formKey; };
            ProcPrDialog.prototype.getIdProperty = function () { return Procurement.ProcPrRow.idProperty; };
            ProcPrDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcPrRow.localTextPrefix; };
            ProcPrDialog.prototype.getNameProperty = function () { return Procurement.ProcPrRow.nameProperty; };
            ProcPrDialog.prototype.getService = function () { return Procurement.ProcPrService.baseUrl; };
            ProcPrDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class ProcPrDialog extends _Ext.DialogBase<ProcPrRow, any> {
            ], ProcPrDialog);
            return ProcPrDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.ProcPrDialog = ProcPrDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcPrGrid = /** @class */ (function (_super) {
            __extends(ProcPrGrid, _super);
            function ProcPrGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcPrGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcPr'; };
            ProcPrGrid.prototype.getDialogType = function () { return Procurement.ProcPrDialog; };
            ProcPrGrid.prototype.getIdProperty = function () { return Procurement.ProcPrRow.idProperty; };
            ProcPrGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcPrRow.localTextPrefix; };
            ProcPrGrid.prototype.getService = function () { return Procurement.ProcPrService.baseUrl; };
            ProcPrGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcPrGrid);
            return ProcPrGrid;
        }(_Ext.GridBase));
        Procurement.ProcPrGrid = ProcPrGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcStatusDialog = /** @class */ (function (_super) {
            __extends(ProcStatusDialog, _super);
            function ProcStatusDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ProcStatusForm(_this.idPrefix);
                return _this;
            }
            ProcStatusDialog.prototype.getFormKey = function () { return Procurement.ProcStatusForm.formKey; };
            ProcStatusDialog.prototype.getIdProperty = function () { return Procurement.ProcStatusRow.idProperty; };
            ProcStatusDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcStatusRow.localTextPrefix; };
            ProcStatusDialog.prototype.getNameProperty = function () { return Procurement.ProcStatusRow.nameProperty; };
            ProcStatusDialog.prototype.getService = function () { return Procurement.ProcStatusService.baseUrl; };
            ProcStatusDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcStatusDialog);
            return ProcStatusDialog;
        }(_Ext.DialogBase));
        Procurement.ProcStatusDialog = ProcStatusDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcStatusGrid = /** @class */ (function (_super) {
            __extends(ProcStatusGrid, _super);
            function ProcStatusGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcStatusGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcStatus'; };
            ProcStatusGrid.prototype.getDialogType = function () { return Procurement.ProcStatusDialog; };
            ProcStatusGrid.prototype.getIdProperty = function () { return Procurement.ProcStatusRow.idProperty; };
            ProcStatusGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcStatusRow.localTextPrefix; };
            ProcStatusGrid.prototype.getService = function () { return Procurement.ProcStatusService.baseUrl; };
            ProcStatusGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcStatusGrid);
            return ProcStatusGrid;
        }(_Ext.GridBase));
        Procurement.ProcStatusGrid = ProcStatusGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
///// <reference path="./../../../node_modules/jspolyfill-array.prototype.findIndex/findIndex.js"/>
///// <reference path="./../../../node_modules/array.prototype.findindex/index.js"/>
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BidderListEditor = /** @class */ (function (_super) {
            __extends(BidderListEditor, _super);
            function BidderListEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.updateElementContent();
                return _this;
            }
            BidderListEditor.prototype.updateElementContent = function () {
                //var divID = this.element.attr('id');
                //var inputID = 'clpkr' + this.uniqueName;
                //this.element.append('<input type="text" class="editor flexify" id="' + inputID + '" /><span id="CNPullBtn" class="inplace-button input-group-addon" style="padding-top: 5px; padding-left: 3px; border-radius: 4px"><i></i></span>');
                //var findIndex = require('array.prototype.findindex');
                //findIndex.shim();
                //this.element.append(
                //    "<script>" +
                //    "$('#" + divID + "').colorpicker({" +
                //    "autoInputFallback: false" +
                //    "});" +
                //    "</script>"
                //);
                //this.element.append(
                //    "<script>" +
                //    "$('#CNPullBtn').click(function(){" +
                //    "alert('Holla!');" +
                //    "$('#" + inputID + "').val('hola');"+
                //    "});" +
                //    "</script>"
                //);
                //let btn = document.getElementById("CNPullBtn");
                //let arr = ['a', 'b'];
                ////let x = arr.findIndex('a');
                ////console.log(x);
                //btn.addEventListener("click", (e: Event) => {
                //    //alert('Holla!');
                //    //this.element.val("as");
                //    ProcurementService.GetBidderListHeader({
                //    }, response => {
                //        //FindIndex(response).;
                //        //FindIndex();
                //        //FindIndex(response.FIELDS)
                //        var KNDPRO = response.DATA[0].WA.split("|")[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KNDPRO')];                    
                //        console.log(KNDPRO);
                //        this.element.parent().find(fld.Title).find("input").val(KNDPRO);
                //        var x = this.element.parent().find(fld.Title);
                //        var y = this.element.parent().parent();
                //        var z = this.element.parent().parent().parent();
                //        //this.for
                //        //console.log(fld);
                //        console.log(x);
                //        console.log(y);
                //        console.log(z);
                //        //response.FIELDS.
                //        //response.FIELDS.indexOf({ FIELDNAME: 'KNDPRO' });
                //        //response.DATA[0].WA.split("|");
                //        ////for (let entry of response.DATA) {
                //        ////    console.log(entry.WA); // 1, "string", false
                //        ////}
                //        //console.log(response.FIELDS.fin)
                //        //this.element.find("input").val(response)
                //    });
                //});
                //var request = this.getSaveEntity();
                //Q.serviceCall({
                //    url: Q.resolveUrl('~/Account/ChangePassword'),
                //    request: request,
                //    onSuccess: response => {
                //        Q.information(Q.text('Forms.Membership.ChangePassword.Success'), () => {
                //            window.location.href = Q.resolveUrl('~/');
                //        });
                //    }
                //});
            };
            Object.defineProperty(BidderListEditor.prototype, "value", {
                //public get value(): string {
                //    //return $('#clpkr' + this.uniqueName).val();
                //    alert("asdad323423");
                //}
                set: function (value) {
                    //if (value != undefined) {
                    //    var pick = this.element.data('colorpicker');
                    //    pick.color.setColor(value);
                    //    $('#clpkr' + this.uniqueName).val(pick.update());
                    //}
                    alert("jrio");
                },
                enumerable: true,
                configurable: true
            });
            BidderListEditor.prototype.getEditValue = function (property, target) {
                //target[property.name] = this.value;
                //alert("feger");
            };
            BidderListEditor.prototype.setEditValue = function (source, property) {
                //alert("asdad");
                //this.value = source[property.name];
            };
            BidderListEditor = __decorate([
                Serenity.Decorators.element("<div style='display: flex' />"),
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue])
            ], BidderListEditor);
            return BidderListEditor;
        }(Serenity.Widget));
        Procurement.BidderListEditor = BidderListEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementDialog = /** @class */ (function (_super) {
            __extends(ProcurementDialog, _super);
            function ProcurementDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.form = new Procurement.ProcurementForm(_this.idPrefix);
                _this.participantCount = 0;
                console.log(window.location);
                //this.form.Title.element.parent().remove();
                $('<a id="CNPullBtn" class="inplace-button load-data-button"><\/a>')
                    .insertAfter(_this.form.CollectiveNumber.element)
                    .click(function () {
                    Procurement.ProcurementService.GetBidderListHeader({ CollectiveNumber: _this.form.CollectiveNumber.value }, function (response) {
                        _this.form.Title.value = response.Title;
                        _this.form.SapBidderListCreatedDate.value = response.SapBidderListCreatedDate;
                        _this.form.SapBidderListCreatedBy.value = response.SapBidderListCreatedBy;
                        _this.form.ProcurementTypeId.set_value(response.ProcurementTypeId);
                        _this.form.Classification.value = response.Classification;
                        _this.form.Qualification.value = response.Qualification;
                        _this.form.RequestedBy.value = response.RequestedBy;
                        _this.form.RequestorPosition.value = response.RequestorPosition;
                        _this.form.ApprovedBy.value = response.ApprovedBy;
                        _this.form.ApproverPosition.value = response.ApproverPosition;
                        _this.form.ProcParticipant.value = response.ProcParticipant;
                        Q.notifySuccess("Bidder list " + _this.form.CollectiveNumber.value + " successfully loaded.");
                    }, {
                        onError: function (response) {
                            Q.notifyError(response.Error.Message);
                            //Reset Data
                            _this.form.Title.value = null;
                            _this.form.SapBidderListCreatedDate.value = null;
                            _this.form.SapBidderListCreatedBy.value = null;
                            _this.form.ProcurementTypeId.value = null;
                            _this.form.Classification.value = null;
                            _this.form.Qualification.value = null;
                            _this.form.RequestedBy.value = null;
                            _this.form.RequestorPosition.value = null;
                            _this.form.ApprovedBy.value = null;
                            _this.form.ApproverPosition.value = null;
                            _this.form.ProcParticipant.value = null;
                        }
                    });
                    //this.form.ProcParticipant.upd
                    _this.updateInterface();
                    //this.form.ProcParticipant.myPassValue 
                });
                //this.form.ProcParticipant.change(x => {
                //    this.adjustParticipantSequence();
                //    console.log('changecc');
                //});
                //re adjust sequence when row count changed
                _this.form.ProcParticipant.view.onDataChanged.subscribe(function (x) {
                    var newParticipantCount = _this.form.ProcParticipant.getItems().length;
                    //console.log("before");
                    //console.log("newParticipantCount: " + newParticipantCount);
                    //console.log("this.participantCount: " + this.participantCount);
                    //console.log(newParticipantCount != this.participantCount);
                    if (newParticipantCount != _this.participantCount) {
                        _this.participantCount = newParticipantCount;
                        _this.adjustParticipantSequence();
                    }
                    //console.log("after");
                    //console.log("newParticipantCount: " + newParticipantCount);
                    //console.log("this.participantCount: " + this.participantCount);
                    //console.log(newParticipantCount != this.participantCount);
                    //var participantList = this.form.ProcParticipant.getItems();
                    //if (participantList.filter(x => typeof x.SequenceNo != 'undefined')[0]) { }
                    //else {
                    //    this.adjustParticipantSequence();
                    //}
                });
                _this.form.ProcParticipant.slickGrid.setSortColumn("SequenceNo", true);
                return _this;
            }
            ProcurementDialog.prototype.getFormKey = function () { return Procurement.ProcurementForm.formKey; };
            ProcurementDialog.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            ProcurementDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            ProcurementDialog.prototype.getNameProperty = function () { return Procurement.ProcurementRow.nameProperty; };
            ProcurementDialog.prototype.getService = function () { return Procurement.ProcurementService.baseUrl; };
            ProcurementDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                //var rows = this.form.ProcParticipant.getItems();
                //Math.max.apply(Math, rows.map(function (o) { return o.SequenceNo; }))
                //console.log(this.form.ProcParticipant.getItems());
                //this.adjustParticipantSequence();
            };
            ProcurementDialog.prototype.adjustParticipantSequence = function () {
                var participantList = this.form.ProcParticipant.getItems();
                var i = 1;
                participantList.forEach(function (value) {
                    value.SequenceNo = i;
                    i++;
                });
                this.form.ProcParticipant.setItems(participantList);
                //this.updateInterface();
            };
            ProcurementDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                this.participantCount = this.form.ProcParticipant.getItems().length;
                //$('<a id="CNPullBtn" class="inplace-button "><b>Load Bidder List<\/b><\/a>')
                //    .insertAfter(this.form.CollectiveNumber.element)
                //    .click(() =>
                //        ProcurementService.GetBidderListHeader(
                //            { CollectiveNumber: this.form.CollectiveNumber.value }
                //            , response => {
                //                console.log(response);
                //                if (response == null) {
                //                    Q.notifyWarning("Bidder List No:" + this.form.CollectiveNumber + " not found!");
                //                    return;
                //                }
                //                console.log(this.form.CollectiveNumber.value);
                //                //this.form.Title.value = response.Title;
                //                //this.form.SapBidderListCreatedDate.value = response.SapBidderListCreatedDate;
                //                //this.form.SapBidderListCreatedBy.value = response.SapBidderListCreatedBy;
                //                //this.form.ProcurementTypeId.value = response.ProcurementTypeId;
                //                //this.form.Qualification.value = response.Qualification;
                //                //this.form.RequestedBy.value = response.RequestedBy;
                //                //this.form.RequestorPosition.value = response.RequestorPosition;
                //                //this.form.ApprovedBy.value = response.ApprovedBy;
                //                //this.form.ApproverPosition.value = response.ApproverPosition;
                //                //var responseItem = response.DATA[0].WA.split("|");
                //                //this.form.Title.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('PENGADAAN'.trim())];
                //                //this.form.SapBidderListCreatedDate.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('CRDATE'.trim())];
                //                //this.form.SapBidderListCreatedBy.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('CRUSER'.trim())];
                //                //this.form.ProcurementTypeId.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KNDPRO'.trim())];
                //                //this.form.Qualification.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KUALIFIKASI'.trim())];
                //                //this.form.RequestedBy.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('DIUSULKAN'.trim())];
                //                //this.form.RequestorPosition.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('JAB_DIUSULKAN'.trim())];
                //                //this.form.ApprovedBy.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('DISETUJUI'.trim())];
                //                //this.form.ApproverPosition.value = responseItem[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('JAB_DISETUJUI'.trim())];
                //            }));
                //);
                //$('<a id="CNPullBtn" class="inplace-button inplace-create"><b><\/b><\/a>')
                //    .insertAfter(this.form.CollectiveNumber.element);
                //let btn = document.getElementById("CNPullBtn");
                //btn.addEventListener("click", (e: Event) => {
                //    ProcurementService.GetBidderListHeader({
                //    }, response => {
                //        //FindIndex(response).;
                //        //FindIndex();
                //        //FindIndex(response.FIELDS)
                //        var KNDPRO = response.DATA[0].WA.split("|")[response.FIELDS.map(function (e) { return e.FIELDNAME; }).indexOf('KNDPRO')];
                //        console.log(KNDPRO);
                //        this.form.Title.value = KNDPRO;
                //        //response.FIELDS.
                //        //response.FIELDS.indexOf({ FIELDNAME: 'KNDPRO' });
                //        //response.DATA[0].WA.split("|");
                //        ////for (let entry of response.DATA) {
                //        ////    console.log(entry.WA); // 1, "string", false
                //        ////}
                //        //console.log(response.FIELDS.fin)
                //        //this.element.find("input").val(response)
                //    });
                //});
            };
            ProcurementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementDialog);
            return ProcurementDialog;
        }(_Ext.DialogBase));
        Procurement.ProcurementDialog = ProcurementDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementGrid = /** @class */ (function (_super) {
            __extends(ProcurementGrid, _super);
            function ProcurementGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcurementGrid.prototype.getColumnsKey = function () { return 'Procurement.Procurement'; };
            ProcurementGrid.prototype.getDialogType = function () { return Procurement.ProcurementDialog; };
            ProcurementGrid.prototype.getIdProperty = function () { return Procurement.ProcurementRow.idProperty; };
            ProcurementGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementRow.localTextPrefix; };
            ProcurementGrid.prototype.getService = function () { return Procurement.ProcurementService.baseUrl; };
            ProcurementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementGrid);
            return ProcurementGrid;
        }(_Ext.GridBase));
        Procurement.ProcurementGrid = ProcurementGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchaseRequestsEditor = /** @class */ (function (_super) {
            __extends(PurchaseRequestsEditor, _super);
            function PurchaseRequestsEditor(container) {
                return _super.call(this, container) || this;
                //this.toolbar.element.remove();
            }
            PurchaseRequestsEditor.prototype.getColumnsKey = function () { return "Procurement.ProcPr"; };
            PurchaseRequestsEditor.prototype.getDialogType = function () { return Procurement.ProcPrDialog; };
            PurchaseRequestsEditor.prototype.getLocalTextPrefix = function () { return Procurement.ProcPrRow.localTextPrefix; };
            PurchaseRequestsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequestsEditor);
            return PurchaseRequestsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.PurchaseRequestsEditor = PurchaseRequestsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemsEditor = /** @class */ (function (_super) {
            __extends(RfqItemsEditor, _super);
            function RfqItemsEditor(container) {
                var _this = _super.call(this, container) || this;
                //  this.toolbar.element.remove();
                //q.initDetailEditor(this, this.form.someDetailField)
                var columns = _this.slickGrid.getColumns();
                console.log(columns);
                //columns = columns.filter(f => f.field != 'RfqItemId');
                columns = columns.filter(function (f) { return f.field != 'ProcurementStatus'; });
                columns = columns.filter(function (f) { return f.field != 'OwnerEstimateReview'; });
                //columns = columns.filter(f => f.field != 'OwnerEstimate');
                columns = columns.filter(function (f) { return f.field != 'PurchasingDocument'; });
                //columns = columns.filter(f => f.field != 'Item');
                columns = columns.filter(function (f) { return f.field != 'DeletionIndicator'; });
                columns = columns.filter(function (f) { return f.field != 'RfqStatus'; });
                columns = columns.filter(function (f) { return f.field != 'LastChangedOn'; });
                //columns = columns.filter(f => f.field != 'ShortText');
                //columns = columns.filter(f => f.field != 'Material');
                columns = columns.filter(function (f) { return f.field != 'Plant'; });
                columns = columns.filter(function (f) { return f.field != 'StorageLocation'; });
                columns = columns.filter(function (f) { return f.field != 'ReqTrackingNumber'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialGroup'; });
                columns = columns.filter(function (f) { return f.field != 'PurchasingInfoRec'; });
                columns = columns.filter(function (f) { return f.field != 'VendorMaterialNo'; });
                columns = columns.filter(function (f) { return f.field != 'TargetQuantity'; });
                //columns = columns.filter(f => f.field != 'OrderQuantity');
                //columns = columns.filter(f => f.field != 'OrderUnit');
                //columns = columns.filter(f => f.field != 'OrderPriceUnit');
                columns = columns.filter(function (f) { return f.field != 'QuantityConversion'; });
                columns = columns.filter(function (f) { return f.field != 'EqualTo'; });
                columns = columns.filter(function (f) { return f.field != 'Denominator'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderPrice'; });
                columns = columns.filter(function (f) { return f.field != 'PriceUnit'; });
                columns = columns.filter(function (f) { return f.field != 'NetOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'GrossOrderValue'; });
                columns = columns.filter(function (f) { return f.field != 'QuotationDeadline'; });
                columns = columns.filter(function (f) { return f.field != 'GrProcessingTime'; });
                columns = columns.filter(function (f) { return f.field != 'TaxCode'; });
                columns = columns.filter(function (f) { return f.field != 'BaseUnitOfMeasure'; });
                columns = columns.filter(function (f) { return f.field != 'ShippingInstr'; });
                columns = columns.filter(function (f) { return f.field != 'OaTargetValue'; });
                columns = columns.filter(function (f) { return f.field != 'PriceDate'; });
                columns = columns.filter(function (f) { return f.field != 'PurchDocCategory'; });
                columns = columns.filter(function (f) { return f.field != 'EffectiveValue'; });
                columns = columns.filter(function (f) { return f.field != 'AffectsCommitments'; });
                columns = columns.filter(function (f) { return f.field != 'MaterialType'; });
                columns = columns.filter(function (f) { return f.field != 'SubitemCategory'; });
                columns = columns.filter(function (f) { return f.field != 'SubItems'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal1'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal2'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal3'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal4'; });
                columns = columns.filter(function (f) { return f.field != 'Subtotal5'; });
                //var columns: Slick.Column[];
                //columns = [
                //    { name: "__id", field: "__id", width: 150, sortable: true, visible:false },
                //    { name: "ID", field: "RfqItemId", width: 150, sortable: true },
                //    { name: "Item", field: "Item" },
                //    { name: "Material", field: "Material" },
                //    { name: "ShortText", field: "ShortText" },
                //    { name: "OrderQuantity", field: "OrderQuantity" },
                //    { name: "OrderUnit", field: "OrderUnit" },
                //    { name: "OrderPriceUnit", field: "OrderPriceUnit" },
                //    { name: "OwnerEstimate", field: "OwnerEstimate" },
                //];
                _this.slickGrid.setColumns(columns);
                return _this;
            }
            RfqItemsEditor.prototype.getColumnsKey = function () { return "Procurement.RfqItem"; };
            RfqItemsEditor.prototype.getDialogType = function () { return Procurement.RfqItemDialog; };
            RfqItemsEditor.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            RfqItemsEditor.prototype.validateEntity = function (row, id) {
                console.log(row);
                row.RfqItemId = Q.toId(row.RfqItemId);
                var sameRfqItem = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqItemId === row.RfqItemId; });
                if (sameRfqItem && this.id(sameRfqItem) !== id) {
                    Q.alert('This Item is already in list');
                    return false;
                }
                console.log(row);
                row.ShortText = Procurement.RfqItemRow.getLookup().itemById[row.RfqItemId].ShortText;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            RfqItemsEditor.prototype.AdjustRows = function (gridRows) {
                //console.log(gridRows);
                gridRows.forEach(function (part, index) {
                    //console.log(gridRows[index]);
                    //this[index]['RfqItemId'] = this[index]['__id'];
                    delete gridRows[index]['__id'];
                });
                return gridRows;
            };
            RfqItemsEditor.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                //var buttons = super.getButtons();
                var buttons = new Array();
                // add our import button
                buttons.push({
                    title: 'Export to Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        console.log(_this.options);
                        //if (!this.options.onViewSubmit()) {
                        //    return;
                        //}
                        //let grid = this.options.grid;
                        //let grid = this.slickGrid;
                        //var request: Serenity.ListRequest;
                        //request = {};
                        //request.Take = 0;
                        //request.Skip = 0;
                        //request.Criteria = Serenity.Criteria.and("RfqItemId":"");
                        ////var sortBy = grid.getSortColumns();
                        ////if (sortBy) {
                        //    //request.Sort = sortBy;
                        //    //request.Sort = ["Item"];
                        ////}
                        //request.IncludeColumns = [];
                        ////let columns = grid.getGrid().getColumns();
                        //let columns = grid.getColumns();
                        //for (let column of columns) {
                        //    request.IncludeColumns.push(column.id || column.field);
                        //}
                        //Q.postToService({ service: this.options.service, request: request, target: '_blank' });
                        var gridRows = _this.AdjustRows(_this.slickGrid.getData().getRows());
                        Q.postToService({ service: Procurement.RfqItemService.baseUrl + "/ListExcelOwnerEstimate", request: gridRows, target: '_blank' });
                        //var gridRows = (this.slickGrid.getData() as any).getRows();
                        ////console.log(gridRows);
                        //var modifiedGridRows = this.AdjustRows(gridRows);
                        //console.log(modifiedGridRows);
                        //RfqItemService.List({});
                        //SCMONLINE.Common.ReportHelper.execute({
                        //    download: true,
                        //    reportKey: "Procurement.RfqItem",
                        //    extension: "xlsx",
                        //    target: "_blank",
                        //    //params: opt
                        //});
                        //ProcurementService.ExportRfqItem(
                        //    //{ RfqItemList: (this.slickGrid.getData() as any).getRows() }
                        //    { RfqItemList: modifiedGridRows }
                        //    , response => {
                        //        //this.form.Title.value = response.Title;
                        //        //this.form.SapBidderListCreatedDate.value = response.SapBidderListCreatedDate;
                        //        //this.form.SapBidderListCreatedBy.value = response.SapBidderListCreatedBy;
                        //        //this.form.ProcurementTypeId.value = response.ProcurementTypeId;
                        //        //this.form.Classification.value = response.Classification;
                        //        //this.form.Qualification.value = response.Qualification;
                        //        //this.form.RequestedBy.value = response.RequestedBy;
                        //        //this.form.RequestorPosition.value = response.RequestorPosition;
                        //        //this.form.ApprovedBy.value = response.ApprovedBy;
                        //        //this.form.ApproverPosition.value = response.ApproverPosition;
                        //        //this.form.ProcParticipant.value = response.ProcParticipant;
                        //        //Q.notifySuccess("Bidder list " + this.form.CollectiveNumber.value + " successfully loaded.")
                        //    }
                        //    , {
                        //        onError: response => {
                        //            Q.notifyError(response.Error.Message);
                        //            //Reset Data
                        //            //this.form.Title.value = null;
                        //            //this.form.SapBidderListCreatedDate.value = null;
                        //            //this.form.SapBidderListCreatedBy.value = null;
                        //            //this.form.ProcurementTypeId.value = null;
                        //            //this.form.Classification.value = null;
                        //            //this.form.Qualification.value = null;
                        //            //this.form.RequestedBy.value = null;
                        //            //this.form.RequestorPosition.value = null;
                        //            //this.form.ApprovedBy.value = null;
                        //            //this.form.ApproverPosition.value = null;
                        //            //this.form.ProcParticipant.value = null;
                        //        }
                        //    }
                        //);
                        // open export dialog, let it handle rest
                        //var data = this.slickGrid.getData();
                        //console.log(data);
                        //console.log(this.getGrid().getDataItem(0));
                        //console.log(this.getGrid().getDataItem(1));
                        //console.log(this.getGrid().getDataItem(3));
                        //var dialog = new OwnerEstimateImportDialog();
                        //dialog.element.on('dialogclose', () => {
                        //    this.refresh();
                        //    dialog = null;
                        //});
                        //dialog.dialogOpen();
                    }
                });
                // add our import button
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new Procurement.OwnerEstimateImportDialog();
                        dialog.rfqItemsEditor = _this;
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            RfqItemsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], RfqItemsEditor);
            return RfqItemsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.RfqItemsEditor = RfqItemsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqTextsEditor = /** @class */ (function (_super) {
            __extends(RfqTextsEditor, _super);
            function RfqTextsEditor(container) {
                return _super.call(this, container) || this;
                //this.toolbar.element.remove();
            }
            RfqTextsEditor.prototype.getColumnsKey = function () { return "Procurement.RfqText"; };
            RfqTextsEditor.prototype.getDialogType = function () { return Procurement.RfqTextDialog; };
            RfqTextsEditor.prototype.getLocalTextPrefix = function () { return Procurement.RfqTextRow.localTextPrefix; };
            RfqTextsEditor.prototype.validateEntity = function (row, id) {
                row.RfqTextId = Q.toId(row.RfqTextId);
                console.log(row.RfqTextId);
                var sameRfqText = Q.tryFirst(this.view.getItems(), function (x) { return x.RfqTextId === row.RfqTextId; });
                if (sameRfqText && this.id(sameRfqText) !== id) {
                    Q.alert('This RfqText is already in list');
                    return false;
                }
                console.log(row);
                console.log(Procurement.RfqTextRow.getLookup().itemById[row.RfqTextId]);
                //Not Clear when get data from sap? turn on when function not working
                //    row.TextLine = RfqTextRow.getLookup().itemById[row.RfqTextId].TextLine;
                //    row.TextMeaning = RfqTextRow.getLookup().itemById[row.RfqTextId].TextMeaning;
                //    row.TextId = RfqTextRow.getLookup().itemById[row.RfqTextId].TextId;
                //    //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            RfqTextsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], RfqTextsEditor);
            return RfqTextsEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.RfqTextsEditor = RfqTextsEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementMethodDialog = /** @class */ (function (_super) {
            __extends(ProcurementMethodDialog, _super);
            function ProcurementMethodDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ProcurementMethodForm(_this.idPrefix);
                return _this;
            }
            ProcurementMethodDialog.prototype.getFormKey = function () { return Procurement.ProcurementMethodForm.formKey; };
            ProcurementMethodDialog.prototype.getIdProperty = function () { return Procurement.ProcurementMethodRow.idProperty; };
            ProcurementMethodDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementMethodRow.localTextPrefix; };
            ProcurementMethodDialog.prototype.getNameProperty = function () { return Procurement.ProcurementMethodRow.nameProperty; };
            ProcurementMethodDialog.prototype.getService = function () { return Procurement.ProcurementMethodService.baseUrl; };
            ProcurementMethodDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementMethodDialog);
            return ProcurementMethodDialog;
        }(_Ext.DialogBase));
        Procurement.ProcurementMethodDialog = ProcurementMethodDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementMethodGrid = /** @class */ (function (_super) {
            __extends(ProcurementMethodGrid, _super);
            function ProcurementMethodGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcurementMethodGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcurementMethod'; };
            ProcurementMethodGrid.prototype.getDialogType = function () { return Procurement.ProcurementMethodDialog; };
            ProcurementMethodGrid.prototype.getIdProperty = function () { return Procurement.ProcurementMethodRow.idProperty; };
            ProcurementMethodGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementMethodRow.localTextPrefix; };
            ProcurementMethodGrid.prototype.getService = function () { return Procurement.ProcurementMethodService.baseUrl; };
            ProcurementMethodGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementMethodGrid);
            return ProcurementMethodGrid;
        }(_Ext.GridBase));
        Procurement.ProcurementMethodGrid = ProcurementMethodGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementTypeDialog = /** @class */ (function (_super) {
            __extends(ProcurementTypeDialog, _super);
            function ProcurementTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ProcurementTypeForm(_this.idPrefix);
                return _this;
            }
            ProcurementTypeDialog.prototype.getFormKey = function () { return Procurement.ProcurementTypeForm.formKey; };
            ProcurementTypeDialog.prototype.getIdProperty = function () { return Procurement.ProcurementTypeRow.idProperty; };
            ProcurementTypeDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementTypeRow.localTextPrefix; };
            ProcurementTypeDialog.prototype.getNameProperty = function () { return Procurement.ProcurementTypeRow.nameProperty; };
            ProcurementTypeDialog.prototype.getService = function () { return Procurement.ProcurementTypeService.baseUrl; };
            ProcurementTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementTypeDialog);
            return ProcurementTypeDialog;
        }(_Ext.DialogBase));
        Procurement.ProcurementTypeDialog = ProcurementTypeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcurementTypeGrid = /** @class */ (function (_super) {
            __extends(ProcurementTypeGrid, _super);
            function ProcurementTypeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcurementTypeGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcurementType'; };
            ProcurementTypeGrid.prototype.getDialogType = function () { return Procurement.ProcurementTypeDialog; };
            ProcurementTypeGrid.prototype.getIdProperty = function () { return Procurement.ProcurementTypeRow.idProperty; };
            ProcurementTypeGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcurementTypeRow.localTextPrefix; };
            ProcurementTypeGrid.prototype.getService = function () { return Procurement.ProcurementTypeService.baseUrl; };
            ProcurementTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcurementTypeGrid);
            return ProcurementTypeGrid;
        }(_Ext.GridBase));
        Procurement.ProcurementTypeGrid = ProcurementTypeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcValueRangeDialog = /** @class */ (function (_super) {
            __extends(ProcValueRangeDialog, _super);
            function ProcValueRangeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.ProcValueRangeForm(_this.idPrefix);
                return _this;
            }
            ProcValueRangeDialog.prototype.getFormKey = function () { return Procurement.ProcValueRangeForm.formKey; };
            ProcValueRangeDialog.prototype.getIdProperty = function () { return Procurement.ProcValueRangeRow.idProperty; };
            ProcValueRangeDialog.prototype.getLocalTextPrefix = function () { return Procurement.ProcValueRangeRow.localTextPrefix; };
            ProcValueRangeDialog.prototype.getNameProperty = function () { return Procurement.ProcValueRangeRow.nameProperty; };
            ProcValueRangeDialog.prototype.getService = function () { return Procurement.ProcValueRangeService.baseUrl; };
            ProcValueRangeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcValueRangeDialog);
            return ProcValueRangeDialog;
        }(_Ext.DialogBase));
        Procurement.ProcValueRangeDialog = ProcValueRangeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var ProcValueRangeGrid = /** @class */ (function (_super) {
            __extends(ProcValueRangeGrid, _super);
            function ProcValueRangeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            ProcValueRangeGrid.prototype.getColumnsKey = function () { return 'Procurement.ProcValueRange'; };
            ProcValueRangeGrid.prototype.getDialogType = function () { return Procurement.ProcValueRangeDialog; };
            ProcValueRangeGrid.prototype.getIdProperty = function () { return Procurement.ProcValueRangeRow.idProperty; };
            ProcValueRangeGrid.prototype.getLocalTextPrefix = function () { return Procurement.ProcValueRangeRow.localTextPrefix; };
            ProcValueRangeGrid.prototype.getService = function () { return Procurement.ProcValueRangeService.baseUrl; };
            ProcValueRangeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProcValueRangeGrid);
            return ProcValueRangeGrid;
        }(_Ext.GridBase));
        Procurement.ProcValueRangeGrid = ProcValueRangeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/BulkServiceAction.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var AssignBuyerBulkAction = /** @class */ (function (_super) {
            __extends(AssignBuyerBulkAction, _super);
            function AssignBuyerBulkAction(buyerId) {
                var _this = _super.call(this) || this;
                _this.buyerId = buyerId;
                return _this;
            }
            /**
             * This controls how many service requests will be used in parallel.
             * Determine this number based on how many requests your server
             * might be able to handle, and amount of wait on external resources.
             */
            AssignBuyerBulkAction.prototype.getParallelRequests = function () {
                return 10;
            };
            /**
             * These number of records IDs will be sent to your service in one
             * service call. If your service is designed to handle one record only,
             * set it to 1. But note that, if you have 5000 records, this will
             * result in 5000 service calls / requests.
             */
            AssignBuyerBulkAction.prototype.getBatchSize = function () {
                return 5;
            };
            /**
             * This is where you should call your service.
             * Batch parameter contains the selected AssignBuyer IDs
             * that should be processed in this service call.
             */
            AssignBuyerBulkAction.prototype.executeForBatch = function (batch) {
                var _this = this;
                Procurement.PurchaseRequisitionService.AssignBuyerBulkAction({
                    //PrNo: batch.map(x => Q.parseInteger(x)),
                    PrNo: batch.map(function (x) { return x; }),
                    BuyerId: this.buyerId
                }, function (response) { return _this.set_successCount(_this.get_successCount() + batch.length); }, {
                    blockUI: false,
                    onError: function (response) { return _this.set_errorCount(_this.get_errorCount() + batch.length); },
                    onCleanup: function () { return _this.serviceCallCleanup(); }
                });
            };
            return AssignBuyerBulkAction;
        }(SCMONLINE.Common.BulkServiceAction));
        Procurement.AssignBuyerBulkAction = AssignBuyerBulkAction;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var BuyerAssignmentDialog = /** @class */ (function (_super) {
            __extends(BuyerAssignmentDialog, _super);
            function BuyerAssignmentDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.BuyerAssignmentForm(_this.idPrefix);
                return _this;
            }
            BuyerAssignmentDialog.prototype.getDialogTitle = function () {
                return "Buyer Assignment";
            };
            BuyerAssignmentDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Assign',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.BuyerId.value == null
                            //||Q.isEmptyOrNull(this.form.BuyerId.value)
                            ) {
                                Q.notifyError("Please select a buyer!");
                                return;
                            }
                            var action = new Procurement.AssignBuyerBulkAction(_this.form.BuyerId.value);
                            action.done = function () {
                                _this.rowSelection.resetCheckedAndRefresh();
                                Q.reloadLookup('Procurement.BuyerLookup');
                                _this.dialogClose();
                            };
                            action.execute(_this.rowSelection.getSelectedKeys());
                            //BuyerAssignmentService.ExcelImport({
                            //    FileName: this.form.FileName.value.Filename
                            //}, response => {
                            //    Q.notifyInfo(
                            //        'Inserted: ' + (response.Inserted || 0) +
                            //        ', Updated: ' + (response.Updated || 0));
                            //    if (response.ErrorList != null && response.ErrorList.length > 0) {
                            //        Q.notifyError(response.ErrorList.join(',\r\n '));
                            //    }
                            //    this.dialogClose();
                            //});
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            BuyerAssignmentDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], BuyerAssignmentDialog);
            return BuyerAssignmentDialog;
        }(Serenity.PropertyDialog));
        Procurement.BuyerAssignmentDialog = BuyerAssignmentDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchaseRequisitionDialog = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionDialog, _super);
            function PurchaseRequisitionDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Procurement.PurchaseRequisitionForm(_this.idPrefix);
                return _this;
            }
            PurchaseRequisitionDialog.prototype.getFormKey = function () { return Procurement.PurchaseRequisitionForm.formKey; };
            PurchaseRequisitionDialog.prototype.getIdProperty = function () { return Procurement.PurchaseRequisitionRow.idProperty; };
            PurchaseRequisitionDialog.prototype.getLocalTextPrefix = function () { return Procurement.PurchaseRequisitionRow.localTextPrefix; };
            PurchaseRequisitionDialog.prototype.getNameProperty = function () { return Procurement.PurchaseRequisitionRow.nameProperty; };
            PurchaseRequisitionDialog.prototype.getService = function () { return Procurement.PurchaseRequisitionService.baseUrl; };
            PurchaseRequisitionDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
            };
            PurchaseRequisitionDialog.prototype.onSaveSuccess = function (response) {
                _super.prototype.onSaveSuccess.call(this, response);
                console.log('super.onSaveSuccess(response);');
                Q.reloadLookup('Procurement.BuyerLookup');
                //Q.reloadLookup(BuyerLookupViewRow.lookupKey);
                //this.reloadById();
            };
            PurchaseRequisitionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequisitionDialog);
            return PurchaseRequisitionDialog;
        }(_Ext.DialogBase));
        Procurement.PurchaseRequisitionDialog = PurchaseRequisitionDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchaseRequisitionGrid = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionGrid, _super);
            //private rowSelection: Serenity.GridRowSelectionMixin;
            function PurchaseRequisitionGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            PurchaseRequisitionGrid.prototype.getColumnsKey = function () { return 'Procurement.PurchaseRequisition'; };
            PurchaseRequisitionGrid.prototype.getDialogType = function () { return Procurement.PurchaseRequisitionDialog; };
            PurchaseRequisitionGrid.prototype.getIdProperty = function () { return Procurement.PurchaseRequisitionRow.idProperty; };
            PurchaseRequisitionGrid.prototype.getLocalTextPrefix = function () { return Procurement.PurchaseRequisitionRow.localTextPrefix; };
            PurchaseRequisitionGrid.prototype.getService = function () { return Procurement.PurchaseRequisitionService.baseUrl; };
            //protected createToolbarExtensions() {
            //    super.createToolbarExtensions();
            //    this.rowSelection = new Serenity.GridRowSelectionMixin(this);
            //}
            PurchaseRequisitionGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                //Remove a Button
                //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "add-button"), 1);
                buttons.push({
                    title: 'Assign Buyer',
                    cssClass: 'send-button',
                    onClick: function () {
                        if (!_this.onViewSubmit()) {
                            return;
                        }
                        var dialog = new Procurement.BuyerAssignmentDialog();
                        dialog.rowSelection = _this.rowSelection;
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            //protected getButtons(): Serenity.ToolButton[] {
            //    // call base method to get list of buttons
            //    var buttons = super.getButtons();
            //    // add our import button
            //    buttons.push({
            //        title: 'Import From Excel',
            //        cssClass: 'export-xlsx-button',
            //        onClick: () => {
            //            // open import dialog, let it handle rest
            //            var dialog = new ProductExcelImportDialog();
            //            dialog.element.on('dialogclose', () => {
            //                this.refresh();
            //                dialog = null;
            //            });
            //            dialog.dialogOpen();
            //        }
            //    });
            PurchaseRequisitionGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(0, 0, Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; }));
                return columns;
            };
            PurchaseRequisitionGrid.prototype.getViewOptions = function () {
                var opt = _super.prototype.getViewOptions.call(this);
                opt.rowsPerPage = 2500;
                return opt;
            };
            PurchaseRequisitionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequisitionGrid);
            return PurchaseRequisitionGrid;
        }(_Ext.GridBase));
        Procurement.PurchaseRequisitionGrid = PurchaseRequisitionGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchDocTextRefDialog = /** @class */ (function (_super) {
            __extends(PurchDocTextRefDialog, _super);
            function PurchDocTextRefDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.PurchDocTextRefForm(_this.idPrefix);
                return _this;
            }
            PurchDocTextRefDialog.prototype.getFormKey = function () { return Procurement.PurchDocTextRefForm.formKey; };
            PurchDocTextRefDialog.prototype.getIdProperty = function () { return Procurement.PurchDocTextRefRow.idProperty; };
            PurchDocTextRefDialog.prototype.getLocalTextPrefix = function () { return Procurement.PurchDocTextRefRow.localTextPrefix; };
            PurchDocTextRefDialog.prototype.getNameProperty = function () { return Procurement.PurchDocTextRefRow.nameProperty; };
            PurchDocTextRefDialog.prototype.getService = function () { return Procurement.PurchDocTextRefService.baseUrl; };
            PurchDocTextRefDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchDocTextRefDialog);
            return PurchDocTextRefDialog;
        }(_Ext.DialogBase));
        Procurement.PurchDocTextRefDialog = PurchDocTextRefDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var PurchDocTextRefGrid = /** @class */ (function (_super) {
            __extends(PurchDocTextRefGrid, _super);
            function PurchDocTextRefGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            PurchDocTextRefGrid.prototype.getColumnsKey = function () { return 'Procurement.PurchDocTextRef'; };
            PurchDocTextRefGrid.prototype.getDialogType = function () { return Procurement.PurchDocTextRefDialog; };
            PurchDocTextRefGrid.prototype.getIdProperty = function () { return Procurement.PurchDocTextRefRow.idProperty; };
            PurchDocTextRefGrid.prototype.getLocalTextPrefix = function () { return Procurement.PurchDocTextRefRow.localTextPrefix; };
            PurchDocTextRefGrid.prototype.getService = function () { return Procurement.PurchDocTextRefService.baseUrl; };
            PurchDocTextRefGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchDocTextRefGrid);
            return PurchDocTextRefGrid;
        }(_Ext.GridBase));
        Procurement.PurchDocTextRefGrid = PurchDocTextRefGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemDialog = /** @class */ (function (_super) {
            __extends(RfqItemDialog, _super);
            function RfqItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.RfqItemForm(_this.idPrefix);
                return _this;
            }
            RfqItemDialog.prototype.getFormKey = function () { return Procurement.RfqItemForm.formKey; };
            RfqItemDialog.prototype.getIdProperty = function () { return Procurement.RfqItemRow.idProperty; };
            RfqItemDialog.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            RfqItemDialog.prototype.getNameProperty = function () { return Procurement.RfqItemRow.nameProperty; };
            RfqItemDialog.prototype.getService = function () { return Procurement.RfqItemService.baseUrl; };
            RfqItemDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "delete-button"), 1);
                //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "save-and-close-button"), 1);
                return buttons;
            };
            RfqItemDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class RfqItemDialog extends _Ext.DialogBase<RfqItemRow, any> {
            ], RfqItemDialog);
            return RfqItemDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.RfqItemDialog = RfqItemDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemGrid = /** @class */ (function (_super) {
            __extends(RfqItemGrid, _super);
            function RfqItemGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            RfqItemGrid.prototype.getColumnsKey = function () { return 'Procurement.RfqItem'; };
            RfqItemGrid.prototype.getDialogType = function () { return Procurement.RfqItemDialog; };
            RfqItemGrid.prototype.getIdProperty = function () { return Procurement.RfqItemRow.idProperty; };
            RfqItemGrid.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemRow.localTextPrefix; };
            RfqItemGrid.prototype.getService = function () { return Procurement.RfqItemService.baseUrl; };
            RfqItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RfqItemGrid);
            return RfqItemGrid;
        }(_Ext.GridBase));
        Procurement.RfqItemGrid = RfqItemGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemTextDialog = /** @class */ (function (_super) {
            __extends(RfqItemTextDialog, _super);
            function RfqItemTextDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.RfqItemTextForm(_this.idPrefix);
                return _this;
            }
            RfqItemTextDialog.prototype.getFormKey = function () { return Procurement.RfqItemTextForm.formKey; };
            RfqItemTextDialog.prototype.getIdProperty = function () { return Procurement.RfqItemTextRow.idProperty; };
            RfqItemTextDialog.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemTextRow.localTextPrefix; };
            RfqItemTextDialog.prototype.getNameProperty = function () { return Procurement.RfqItemTextRow.nameProperty; };
            RfqItemTextDialog.prototype.getService = function () { return Procurement.RfqItemTextService.baseUrl; };
            RfqItemTextDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RfqItemTextDialog);
            return RfqItemTextDialog;
        }(_Ext.DialogBase));
        Procurement.RfqItemTextDialog = RfqItemTextDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqItemTextGrid = /** @class */ (function (_super) {
            __extends(RfqItemTextGrid, _super);
            function RfqItemTextGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            RfqItemTextGrid.prototype.getColumnsKey = function () { return 'Procurement.RfqItemText'; };
            RfqItemTextGrid.prototype.getDialogType = function () { return Procurement.RfqItemTextDialog; };
            RfqItemTextGrid.prototype.getIdProperty = function () { return Procurement.RfqItemTextRow.idProperty; };
            RfqItemTextGrid.prototype.getLocalTextPrefix = function () { return Procurement.RfqItemTextRow.localTextPrefix; };
            RfqItemTextGrid.prototype.getService = function () { return Procurement.RfqItemTextService.baseUrl; };
            RfqItemTextGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RfqItemTextGrid);
            return RfqItemTextGrid;
        }(_Ext.GridBase));
        Procurement.RfqItemTextGrid = RfqItemTextGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqTextDialog = /** @class */ (function (_super) {
            __extends(RfqTextDialog, _super);
            function RfqTextDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.RfqTextForm(_this.idPrefix);
                return _this;
            }
            RfqTextDialog.prototype.getFormKey = function () { return Procurement.RfqTextForm.formKey; };
            RfqTextDialog.prototype.getIdProperty = function () { return Procurement.RfqTextRow.idProperty; };
            RfqTextDialog.prototype.getLocalTextPrefix = function () { return Procurement.RfqTextRow.localTextPrefix; };
            RfqTextDialog.prototype.getNameProperty = function () { return Procurement.RfqTextRow.nameProperty; };
            RfqTextDialog.prototype.getService = function () { return Procurement.RfqTextService.baseUrl; };
            RfqTextDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class RfqTextDialog extends _Ext.DialogBase<RfqTextRow, any> {
            ], RfqTextDialog);
            return RfqTextDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.RfqTextDialog = RfqTextDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var RfqTextGrid = /** @class */ (function (_super) {
            __extends(RfqTextGrid, _super);
            function RfqTextGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            RfqTextGrid.prototype.getColumnsKey = function () { return 'Procurement.RfqText'; };
            RfqTextGrid.prototype.getDialogType = function () { return Procurement.RfqTextDialog; };
            RfqTextGrid.prototype.getIdProperty = function () { return Procurement.RfqTextRow.idProperty; };
            RfqTextGrid.prototype.getLocalTextPrefix = function () { return Procurement.RfqTextRow.localTextPrefix; };
            RfqTextGrid.prototype.getService = function () { return Procurement.RfqTextService.baseUrl; };
            RfqTextGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RfqTextGrid);
            return RfqTextGrid;
        }(_Ext.GridBase));
        Procurement.RfqTextGrid = RfqTextGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorDialog = /** @class */ (function (_super) {
            __extends(VendorDialog, _super);
            function VendorDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.VendorForm(_this.idPrefix);
                return _this;
            }
            VendorDialog.prototype.getFormKey = function () { return Procurement.VendorForm.formKey; };
            VendorDialog.prototype.getIdProperty = function () { return Procurement.VendorRow.idProperty; };
            VendorDialog.prototype.getLocalTextPrefix = function () { return Procurement.VendorRow.localTextPrefix; };
            VendorDialog.prototype.getNameProperty = function () { return Procurement.VendorRow.nameProperty; };
            VendorDialog.prototype.getService = function () { return Procurement.VendorService.baseUrl; };
            VendorDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorDialog);
            return VendorDialog;
        }(_Ext.DialogBase));
        Procurement.VendorDialog = VendorDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorGrid = /** @class */ (function (_super) {
            __extends(VendorGrid, _super);
            function VendorGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            VendorGrid.prototype.getColumnsKey = function () { return 'Procurement.Vendor'; };
            VendorGrid.prototype.getDialogType = function () { return Procurement.VendorDialog; };
            VendorGrid.prototype.getIdProperty = function () { return Procurement.VendorRow.idProperty; };
            VendorGrid.prototype.getLocalTextPrefix = function () { return Procurement.VendorRow.localTextPrefix; };
            VendorGrid.prototype.getService = function () { return Procurement.VendorService.baseUrl; };
            VendorGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorGrid);
            return VendorGrid;
        }(_Ext.GridBase));
        Procurement.VendorGrid = VendorGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRepresentativeEditor = /** @class */ (function (_super) {
            __extends(VendorRepresentativeEditor, _super);
            function VendorRepresentativeEditor(container) {
                return _super.call(this, container) || this;
            }
            VendorRepresentativeEditor.prototype.getColumnsKey = function () { return "Procurement.VendorRepresentative"; };
            VendorRepresentativeEditor.prototype.getDialogType = function () { return Procurement.VendorRepresentativeDialog; };
            VendorRepresentativeEditor.prototype.getLocalTextPrefix = function () { return Procurement.VendorRepresentativeRow.localTextPrefix; };
            VendorRepresentativeEditor.prototype.validateEntity = function (row, id) {
                row.UserId = Q.toId(row.UserId);
                var sameUser = Q.tryFirst(this.view.getItems(), function (x) { return x.UserId === row.UserId; });
                if (sameUser && this.id(sameUser) !== id) {
                    Q.alert('This User is already in list');
                    return false;
                }
                console.log(row);
                row.UserName = SCMONLINE.Administration.UserRow.getLookup().itemById[row.UserId].Username;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            VendorRepresentativeEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorRepresentativeEditor);
            return VendorRepresentativeEditor;
        }(SCMONLINE.Common.GridEditorBase));
        Procurement.VendorRepresentativeEditor = VendorRepresentativeEditor;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorAddressDialog = /** @class */ (function (_super) {
            __extends(VendorAddressDialog, _super);
            function VendorAddressDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.VendorAddressForm(_this.idPrefix);
                return _this;
            }
            VendorAddressDialog.prototype.getFormKey = function () { return Procurement.VendorAddressForm.formKey; };
            VendorAddressDialog.prototype.getIdProperty = function () { return Procurement.VendorAddressRow.idProperty; };
            VendorAddressDialog.prototype.getLocalTextPrefix = function () { return Procurement.VendorAddressRow.localTextPrefix; };
            VendorAddressDialog.prototype.getNameProperty = function () { return Procurement.VendorAddressRow.nameProperty; };
            VendorAddressDialog.prototype.getService = function () { return Procurement.VendorAddressService.baseUrl; };
            VendorAddressDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorAddressDialog);
            return VendorAddressDialog;
        }(_Ext.DialogBase));
        Procurement.VendorAddressDialog = VendorAddressDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorAddressGrid = /** @class */ (function (_super) {
            __extends(VendorAddressGrid, _super);
            function VendorAddressGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            VendorAddressGrid.prototype.getColumnsKey = function () { return 'Procurement.VendorAddress'; };
            VendorAddressGrid.prototype.getDialogType = function () { return Procurement.VendorAddressDialog; };
            VendorAddressGrid.prototype.getIdProperty = function () { return Procurement.VendorAddressRow.idProperty; };
            VendorAddressGrid.prototype.getLocalTextPrefix = function () { return Procurement.VendorAddressRow.localTextPrefix; };
            VendorAddressGrid.prototype.getService = function () { return Procurement.VendorAddressService.baseUrl; };
            VendorAddressGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorAddressGrid);
            return VendorAddressGrid;
        }(_Ext.GridBase));
        Procurement.VendorAddressGrid = VendorAddressGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorLookupViewDialog = /** @class */ (function (_super) {
            __extends(VendorLookupViewDialog, _super);
            function VendorLookupViewDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.VendorLookupViewForm(_this.idPrefix);
                return _this;
            }
            VendorLookupViewDialog.prototype.getFormKey = function () { return Procurement.VendorLookupViewForm.formKey; };
            VendorLookupViewDialog.prototype.getIdProperty = function () { return Procurement.VendorLookupViewRow.idProperty; };
            VendorLookupViewDialog.prototype.getLocalTextPrefix = function () { return Procurement.VendorLookupViewRow.localTextPrefix; };
            VendorLookupViewDialog.prototype.getNameProperty = function () { return Procurement.VendorLookupViewRow.nameProperty; };
            VendorLookupViewDialog.prototype.getService = function () { return Procurement.VendorLookupViewService.baseUrl; };
            VendorLookupViewDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorLookupViewDialog);
            return VendorLookupViewDialog;
        }(_Ext.DialogBase));
        Procurement.VendorLookupViewDialog = VendorLookupViewDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorLookupViewGrid = /** @class */ (function (_super) {
            __extends(VendorLookupViewGrid, _super);
            function VendorLookupViewGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            VendorLookupViewGrid.prototype.getColumnsKey = function () { return 'Procurement.VendorLookupView'; };
            VendorLookupViewGrid.prototype.getDialogType = function () { return Procurement.VendorLookupViewDialog; };
            VendorLookupViewGrid.prototype.getIdProperty = function () { return Procurement.VendorLookupViewRow.idProperty; };
            VendorLookupViewGrid.prototype.getLocalTextPrefix = function () { return Procurement.VendorLookupViewRow.localTextPrefix; };
            VendorLookupViewGrid.prototype.getService = function () { return Procurement.VendorLookupViewService.baseUrl; };
            VendorLookupViewGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorLookupViewGrid);
            return VendorLookupViewGrid;
        }(_Ext.GridBase));
        Procurement.VendorLookupViewGrid = VendorLookupViewGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRepresentativeDialog = /** @class */ (function (_super) {
            __extends(VendorRepresentativeDialog, _super);
            function VendorRepresentativeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Procurement.VendorRepresentativeForm(_this.idPrefix);
                return _this;
            }
            VendorRepresentativeDialog.prototype.getFormKey = function () { return Procurement.VendorRepresentativeForm.formKey; };
            VendorRepresentativeDialog.prototype.getIdProperty = function () { return Procurement.VendorRepresentativeRow.idProperty; };
            VendorRepresentativeDialog.prototype.getLocalTextPrefix = function () { return Procurement.VendorRepresentativeRow.localTextPrefix; };
            VendorRepresentativeDialog.prototype.getNameProperty = function () { return Procurement.VendorRepresentativeRow.nameProperty; };
            VendorRepresentativeDialog.prototype.getService = function () { return Procurement.VendorRepresentativeService.baseUrl; };
            VendorRepresentativeDialog = __decorate([
                Serenity.Decorators.registerClass()
                //export class VendorRepresentativeDialog extends _Ext.DialogBase<VendorRepresentativeRow, any> {
            ], VendorRepresentativeDialog);
            return VendorRepresentativeDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        Procurement.VendorRepresentativeDialog = VendorRepresentativeDialog;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Procurement;
    (function (Procurement) {
        var VendorRepresentativeGrid = /** @class */ (function (_super) {
            __extends(VendorRepresentativeGrid, _super);
            function VendorRepresentativeGrid(container, options) {
                return _super.call(this, container, options) || this;
            }
            VendorRepresentativeGrid.prototype.getColumnsKey = function () { return 'Procurement.VendorRepresentative'; };
            VendorRepresentativeGrid.prototype.getDialogType = function () { return Procurement.VendorRepresentativeDialog; };
            VendorRepresentativeGrid.prototype.getIdProperty = function () { return Procurement.VendorRepresentativeRow.idProperty; };
            VendorRepresentativeGrid.prototype.getLocalTextPrefix = function () { return Procurement.VendorRepresentativeRow.localTextPrefix; };
            VendorRepresentativeGrid.prototype.getService = function () { return Procurement.VendorRepresentativeService.baseUrl; };
            VendorRepresentativeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorRepresentativeGrid);
            return VendorRepresentativeGrid;
        }(_Ext.GridBase));
        Procurement.VendorRepresentativeGrid = VendorRepresentativeGrid;
    })(Procurement = SCMONLINE.Procurement || (SCMONLINE.Procurement = {}));
})(SCMONLINE || (SCMONLINE = {}));
var _Ext;
(function (_Ext) {
    var AuditLogActionTypeFormatter = /** @class */ (function () {
        function AuditLogActionTypeFormatter() {
        }
        AuditLogActionTypeFormatter_1 = AuditLogActionTypeFormatter;
        AuditLogActionTypeFormatter.format = function (ctx) {
            var item = ctx.item;
            var klass = '';
            if (item.ActionType == _Ext.AuditActionType.Update) {
                klass = 'warning';
            }
            else if (item.ActionType == _Ext.AuditActionType.Delete) {
                klass = 'danger';
            }
            else {
                klass = 'default';
            }
            return "<span class=\"label label-" + klass + "\">" + _Ext.AuditActionType[item.ActionType] + "</span>";
        };
        AuditLogActionTypeFormatter.prototype.format = function (ctx) {
            return AuditLogActionTypeFormatter_1.format(ctx);
        };
        var AuditLogActionTypeFormatter_1;
        AuditLogActionTypeFormatter = AuditLogActionTypeFormatter_1 = __decorate([
            Serenity.Decorators.registerFormatter([Serenity.ISlickFormatter])
        ], AuditLogActionTypeFormatter);
        return AuditLogActionTypeFormatter;
    }());
    _Ext.AuditLogActionTypeFormatter = AuditLogActionTypeFormatter;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var DialogBase = /** @class */ (function (_super) {
        __extends(DialogBase, _super);
        function DialogBase(opt) {
            var _this = _super.call(this, opt) || this;
            _this.isReadOnly = false;
            usingJqueryUITimepickerAddon();
            _this.element.fadeTo(0, 0);
            if (_this.get_ExtDialogOptions().PendingChangesConfirmation == true) {
                _Ext.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
            }
            return _this;
        }
        DialogBase.prototype.get_ExtDialogOptions = function () { return q.DefaultEntityDialogOptions; };
        DialogBase.prototype.updateInterface = function () {
            _super.prototype.updateInterface.call(this);
            this.setReadOnly(this.isReadOnly);
            if (this.get_ExtDialogOptions().HideCategoyLinksBar == true) {
                this.element.find('.category-links').hide();
            }
        };
        DialogBase.prototype.onDialogOpen = function () {
            var _this = this;
            _super.prototype.onDialogOpen.call(this);
            if (this.get_ExtDialogOptions().AutoFitContentArea == true) {
                this.fullContentArea();
            }
            //temporary fix for set grid editor height
            setTimeout(function () { _this.onAfterSetDialogSize(); }, 200);
            this.element.fadeTo(100, 1);
        };
        DialogBase.prototype.onDialogClose = function () {
            _super.prototype.onDialogClose.call(this);
            this.onAfterDialogClose(this.entity);
        };
        DialogBase.prototype.setReadOnly = function (value) {
            this.isReadOnly = value;
            if (this.isReadOnly == true) {
                this.saveAndCloseButton.toggleClass('disabled', this.isReadOnly);
                this.applyChangesButton.toggleClass('disabled', this.isReadOnly);
                this.deleteButton.toggleClass('disabled', this.isReadOnly);
                this.cloneButton.toggleClass('disabled', this.isReadOnly);
                this.undeleteButton.toggleClass('disabled', this.isReadOnly);
                this.toolbar.findButton('btn-save-and-close').addClass('disabled');
                this.toolbar.findButton('btn-replace-row').addClass('disabled');
                // remove required asterisk (*)
                this.element.find('sup').toggle(this.isReadOnly);
                for (var editor in this.form) {
                    if (this.form[editor].widgetName) {
                        Serenity.EditorUtils.setReadOnly(this.form[editor], this.isReadOnly);
                    }
                }
            }
        };
        DialogBase.prototype.getToolbarButtons = function () {
            var _this = this;
            var buttons = _super.prototype.getToolbarButtons.call(this);
            var extOptions = this.get_ExtDialogOptions();
            if (extOptions.ShowSaveAndNewButtonInToolbar == true)
                buttons.push({
                    title: 'Save & New',
                    icon: 'fa fa-save',
                    cssClass: 'btn-save-and-close',
                    onClick: function () {
                        _this.save(function (response) {
                            _this.loadEntity({});
                        });
                    }
                });
            if (extOptions.ShowCloseButtonInToolbar == true)
                buttons.push({
                    title: 'Close',
                    icon: 'fa fa-close',
                    cssClass: 'btn-close',
                    onClick: function () {
                        _this.dialogClose();
                    }
                });
            if (extOptions.ShowRefreshButtonInToolbar == true)
                buttons.push({
                    title: 'Refresh',
                    icon: 'fa fa-refresh',
                    onClick: function () {
                        _this.onRefreshClick();
                    }
                });
            try {
                if (extOptions.ShowReplaceRowButtonInToolbar == true && Q.Authorization.hasPermission('Administration:ReplaceRow')) {
                    if (Q.isEmptyOrNull(this.getService()) == false) {
                        buttons.push({
                            title: 'Replace',
                            icon: 'fa fa-trash-o',
                            cssClass: 'btn-replace-row',
                            onClick: function () {
                                var idProperty = _this.getIdProperty();
                                var nameProperty = _this.getNameProperty();
                                var entityId = _this.entity[idProperty];
                                var entityName = _this.entity[nameProperty];
                                if (entityId) {
                                    Q.serviceRequest(_this.getService() + '/List', {}, function (response) {
                                        var entityList = response.Entities;
                                        var dlg = new _Ext.ReplaceRowDialog({
                                            FormKey: _this.getFormKey(),
                                            IdProperty: idProperty,
                                            NameProperty: nameProperty,
                                            EntityTypeTitle: _this.getEntitySingular(),
                                            DeletedEntityName: entityName,
                                            DeletedEntityId: entityId,
                                        }, entityList);
                                        dlg.dialogOpen();
                                        _this.dialogClose();
                                    });
                                }
                            }
                        });
                    }
                }
                if (extOptions.ShowChangeLogButtonInToolbar == true && Q.Authorization.hasPermission('Administration:AuditLog')) {
                    //Q.Authorization.userDefinition.
                    buttons.push({
                        title: 'Change Log',
                        icon: 'fa fa-history',
                        onClick: function () {
                            var entityId = _this.entity[_this.getIdProperty()];
                            if (entityId) {
                                var dlg = new _Ext.AuditLogViewerDialog({ FormKey: _this.getFormKey(), EntityId: entityId });
                                dlg.dialogOpen();
                            }
                            else {
                                Q.alert('No change log found for this entity.');
                            }
                        }
                    });
                }
                //clone button click event customization
                var cloneButton = Q.tryFirst(buttons, function (x) { return x.cssClass == 'clone-button'; });
                cloneButton.onClick = function () {
                    if (!_this.isEditMode()) {
                        return;
                    }
                    var cloneEntity = _this.getCloningEntity();
                    Serenity.Widget.create({
                        type: ss.getInstanceType(_this),
                        init: function (dlg) {
                            _this.parentGrid.initDialog(dlg);
                            dlg.loadEntityAndOpenDialog(cloneEntity, null);
                        }
                    });
                    _this.dialogClose();
                };
            }
            catch (e) { }
            var btn = Q.first(buttons, function (x) { return x.cssClass == "apply-changes-button"; });
            btn.title = "Save";
            var btn = Q.first(buttons, function (x) { return x.cssClass == "save-and-close-button"; });
            //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "save-and-close-button"), 1);
            return buttons;
        };
        DialogBase.prototype.onRefreshClick = function () {
            this.reloadById();
        };
        DialogBase.prototype.getSaveState = function () {
            try {
                return $.toJSON(this.getSaveEntity());
            }
            catch (e) {
                return null;
            }
        };
        DialogBase.prototype.onSaveSuccess = function (response) {
            _super.prototype.onSaveSuccess.call(this, response);
            isPageRefreshRequired = true;
            //Q.reloadLookup(this.getLookupKey());
        };
        DialogBase.prototype.loadResponse = function (data) {
            _super.prototype.loadResponse.call(this, data);
            if (this.get_ExtDialogOptions().PendingChangesConfirmation == true) {
                this.loadedState = this.getSaveState();
            }
        };
        DialogBase.prototype.maximize = function () {
            var _this = this;
            this.element.closest(".ui-dialog").find(".ui-dialog-titlebar-maximize").click();
            setTimeout(function () {
                var dialogElement = _this.element ? _this.element.closest(".ui-dialog") : $(".ui-dialog");
                var dialogHeight = dialogElement.height();
                var titleBarHeight = dialogElement.find('.ui-dialog-title').height() || 20;
                var toolBarHeight = dialogElement.find('.s-DialogToolbar.s-Toolbar').height() || 0;
                var tabBarHeight = dialogElement.find('.nav.nav-tabs.property-tabs').height() || 0;
                var categoryLinkHeight = dialogElement.find('.category-links').height() || 0;
                _this.element.find('.categories').height(dialogHeight - titleBarHeight - toolBarHeight - tabBarHeight - categoryLinkHeight - 40);
            }, 100);
        };
        DialogBase.prototype.fullContentArea = function () {
            this.setDialogSize();
        };
        // set the dialog size relative to content area (to shrink use negative value)
        DialogBase.prototype.setDialogSize = function (width, height, top, left, $content) {
            var _this = this;
            if (!$content) {
                $content = $('section.content');
            }
            if ($content.length == 0) {
                $content = $('.content-wrapper');
            }
            var dialogElement = this.element ? this.element.closest(".ui-dialog") : $(".ui-dialog");
            if ($content.length > 0 && dialogElement.length > 0) {
                var dialogWidth = $content.width() + 30 + (width || 0);
                var dialogHeight = $content.height() + (height || 30);
                this.element.dialog("option", "width", dialogWidth);
                this.element.dialog("option", "height", dialogHeight);
                var titleBarHeight = dialogElement.find('.ui-dialog-title').height() || 20;
                var toolBarHeight = dialogElement.find('.s-DialogToolbar.s-Toolbar').height() || 0;
                var tabBarHeight = dialogElement.find('.nav.nav-tabs.property-tabs').height() || 0;
                var categoryLinkHeight = dialogElement.find('.category-links').height() || 0;
                this.element.find('.categories').height(dialogHeight - titleBarHeight - toolBarHeight - tabBarHeight - categoryLinkHeight - 40);
                dialogElement.css({
                    left: $content.position().left + (left || 0),
                    top: (top || 50),
                });
            }
            setTimeout(function () {
                _this.onAfterSetDialogSize();
            }, 200);
        };
        DialogBase.prototype.onAfterSetDialogSize = function () {
            console.log(this.form);
            //this.slickGrid.invalidateAllRows();
            //this.slickGrid.invalidate();
            //this.slickGrid.render();
            //this.slickGrid.resizeCanvas();
        };
        DialogBase.prototype.onAfterDialogClose = function (entity) { };
        DialogBase = __decorate([
            Serenity.Decorators.responsive(),
            Serenity.Decorators.maximizable()
        ], DialogBase);
        return DialogBase;
    }(Serenity.EntityDialog));
    _Ext.DialogBase = DialogBase;
})(_Ext || (_Ext = {}));
/// <reference path="../Bases/DialogBase.ts" />
var _Ext;
(function (_Ext) {
    var AuditLogDialog = /** @class */ (function (_super) {
        __extends(AuditLogDialog, _super);
        function AuditLogDialog() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.form = new _Ext.AuditLogForm(_this.idPrefix);
            return _this;
        }
        AuditLogDialog.prototype.getFormKey = function () { return _Ext.AuditLogForm.formKey; };
        AuditLogDialog.prototype.getIdProperty = function () { return _Ext.AuditLogRow.idProperty; };
        AuditLogDialog.prototype.getLocalTextPrefix = function () { return _Ext.AuditLogRow.localTextPrefix; };
        AuditLogDialog.prototype.getNameProperty = function () { return _Ext.AuditLogRow.nameProperty; };
        AuditLogDialog.prototype.getService = function () { return _Ext.AuditLogService.baseUrl; };
        AuditLogDialog.prototype.getToolbarButtons = function () {
            var buttons = _super.prototype.getToolbarButtons.call(this);
            buttons.splice(0, 5);
            //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "save-and-close-button"), 1);
            return buttons;
        };
        AuditLogDialog.prototype.afterLoadEntity = function () {
            _super.prototype.afterLoadEntity.call(this);
            usingJsonDiffPatch();
            //console.log(this.entity);
            //showing diff visually
            var left = JSON.parse(this.entity.OldEntity ? this.entity.OldEntity : null);
            if (left) {
                if (left.PlantJson) {
                    left.PlantInfo = JSON.parse(left.PlantJson);
                    delete (left.PlantJson);
                }
                delete (left.Id);
                delete (left.IDate);
                delete (left.IUser);
                delete (left.EDate);
                delete (left.EUser);
            }
            var right = JSON.parse(this.entity.NewEntity ? this.entity.NewEntity : null);
            if (right) {
                if (right.PlantJson) {
                    right.PlantInfo = JSON.parse(right.PlantJson);
                    delete (right.PlantJson);
                }
            }
            //only show content of json property
            for (var key in left) {
                if (!right.hasOwnProperty(key)) {
                    delete left[key];
                }
            }
            var delta = jsondiffpatch.diff(left, right);
            // beautiful html diff
            this.form.Differences.value = jsondiffpatch.formatters.html.format(delta);
        };
        AuditLogDialog = __decorate([
            Serenity.Decorators.registerClass(),
            Serenity.Decorators.responsive()
        ], AuditLogDialog);
        return AuditLogDialog;
    }(_Ext.DialogBase));
    _Ext.AuditLogDialog = AuditLogDialog;
})(_Ext || (_Ext = {}));
/// <reference path="../_q/_q.d.ts" />
var _Ext;
(function (_Ext) {
    var GridBase = /** @class */ (function (_super) {
        __extends(GridBase, _super);
        function GridBase(container, options) {
            var _this = _super.call(this, container, options) || this;
            _this.isAutosized = false;
            _this.isChildGrid = false;
            _this.nextRowNumber = 1;
            _this.rowSelection = new Serenity.GridRowSelectionMixin(_this);
            _this.slickContainer.fadeTo(0, 0);
            return _this;
        }
        GridBase.prototype.get_ExtGridOptions = function () { return q.DefaultMainGridOptions; };
        GridBase.prototype.markupReady = function () {
            var _this = this;
            _super.prototype.markupReady.call(this);
            setTimeout(function () {
                if (_this.isAutosized == false) {
                    if (_this.get_ExtGridOptions().AutoColumnSize == true) {
                        _this.resizeAllCulumn();
                    }
                    _this.slickContainer.fadeTo(100, 1);
                }
            }, 100);
        };
        GridBase.prototype.getButtons = function () {
            var _this = this;
            var buttons = _super.prototype.getButtons.call(this);
            var reportRequest = this.getReportRequest();
            if (reportRequest.ListExcelServiceMethodName) {
                buttons.push(_Ext.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: this.getService() + '/' + reportRequest.ListExcelServiceMethodName,
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
            }
            if (reportRequest.ReportKey) {
                //buttons.push({
                //    title: 'Export to PDF',
                //    icon: 'fa fa-file-pdf-o',
                //    onClick: () => {
                //        ReportHelper.execute({ reportKey: reportRequest.ReportKey, params: { request: this.getReportRequest() } });
                //    }
                //});
                buttons.push({
                    title: 'View as Report',
                    icon: 'fa fa-html5',
                    onClick: function () {
                        _Ext.ReportHelper.execute({ reportKey: reportRequest.ReportKey, params: { request: _this.getReportRequest() }, extension: 'html' });
                    }
                });
            }
            else if (reportRequest.ReportServiceMethodName) {
                buttons.push({
                    title: 'View as Report',
                    icon: 'fa fa-eye',
                    onClick: function () {
                        Q.postToService({ service: Q.resolveUrl(_this.getService() + '/' + reportRequest.ReportServiceMethodName), request: _this.getReportRequest(), target: '_blank' });
                    }
                });
            }
            else {
                //buttons.push(PdfExportHelper.createToolButton({
                //    grid: this,
                //    tableOptions: { theme: 'grid' },
                //    onViewSubmit: () => this.onViewSubmit()
                //}));
                //ini koding untuk menambahkan export excel button disemua grid
                buttons.push(_Ext.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: this.getService() + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
            }
            return buttons;
        };
        GridBase.prototype.getReportRequest = function () {
            var view = this.getView();
            var request = Q.deepClone(view ? view.params : {}); //as _Ext.ReportRequest;
            request.ReportServiceMethodName = null; // if some value found in this property then "view as report" button will appear
            request.ReportKey = null; // if some value found in this property then "export to pdf" button will appear
            request.ListExcelServiceMethodName = null; // if some value found in this property then "export to xls" button will appear
            request.EqualityFilterWithTextValue = {};
            if (view) {
                var quickFilters = this.getQuickFilters();
                for (var _i = 0, quickFilters_1 = quickFilters; _i < quickFilters_1.length; _i++) {
                    var quickFilter = quickFilters_1[_i];
                    var filterValue = request.EqualityFilter[quickFilter.field];
                    if (filterValue && filterValue.length > 0) {
                        if (quickFilter.options.lookupKey) {
                            var lookup = Q.getLookup(quickFilter.options.lookupKey);
                            request.EqualityFilterWithTextValue[quickFilter.title] = lookup.itemById[filterValue][lookup.textField];
                        }
                        else if (quickFilter.options.enumKey) {
                            var enumKey = quickFilter.options.enumKey;
                            var enumValue = Q.toId(filterValue);
                            request.EqualityFilterWithTextValue[quickFilter.title] = Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), enumValue);
                        }
                        else {
                            request.EqualityFilterWithTextValue[quickFilter.title] = filterValue;
                        }
                    }
                    else if (quickFilter.type == Serenity.DateEditor) {
                        var qf = this.findQuickFilter(Serenity.DateEditor, quickFilter.field);
                        var dateFrom = qf.element.val();
                        var dateTo = qf.element.siblings('input').val();
                        var filterText = '';
                        if (!Q.isEmptyOrNull(dateFrom))
                            filterText = 'From ' + dateFrom;
                        if (!Q.isEmptyOrNull(dateTo))
                            filterText = filterText + ' To ' + dateTo;
                        if (!Q.isEmptyOrNull(filterText)) {
                            request.EqualityFilterWithTextValue[quickFilter.title] = filterText;
                        }
                        else if (this.get_ExtGridOptions().ShowAnyInEqualityFilterWithTextValue == true) {
                            request.EqualityFilterWithTextValue[quickFilter.title] = 'all';
                        }
                    }
                    else if (this.get_ExtGridOptions().ShowAnyInEqualityFilterWithTextValue == true) {
                        request.EqualityFilterWithTextValue[quickFilter.title] = 'all';
                    }
                }
            }
            return request;
        };
        GridBase.prototype.getColumns = function () {
            var _this = this;
            var columns = _super.prototype.getColumns.call(this);
            var isEditable = this.getSlickOptions().editable;
            var extOptions = this.get_ExtGridOptions();
            columns.forEach(function (c) {
                if (extOptions.AutoColumnSize == true) {
                    c.width = c.minWidth || c.width || 50;
                    c.cssClass = c.cssClass || '';
                    if (c.sourceItem) {
                        if (c.sourceItem.filteringType == "Lookup") {
                            c.cssClass += ' align-left';
                            if (c.sourceItem.editorType == "Lookup" && !c.sourceItem.editorParams.autoComplete) {
                                c.lookup = Q.getLookup(c.sourceItem.editorParams.lookupKey);
                                c.formatter = function (row, cell, value, columnDef, dataContext) {
                                    var item = columnDef.lookup.itemById[value];
                                    if (item)
                                        return item[columnDef.lookup.textField];
                                    else
                                        return '-';
                                };
                            }
                            c.width = c.minWidth > 100 ? c.minWidth : 100;
                        }
                        else if (c.sourceItem.formatterType == "Enum") {
                            //c.cssClass += ' align-center';
                            c.formatter = function (row, cell, value, columnDef, dataContext) {
                                var enumKey = columnDef.sourceItem.editorParams.enumKey;
                                var text = Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), Q.toId(value));
                                if (text)
                                    return text;
                                else
                                    return '-';
                            };
                        }
                        else if (c.sourceItem.formatterType == "Date") {
                            c.cssClass += ' align-center';
                            c.width = c.minWidth > 99 ? c.minWidth : 99;
                        }
                        else if (c.sourceItem.formatterType == "DateTime") {
                            c.cssClass += ' align-center';
                            c.width = c.minWidth > 140 ? c.minWidth : 140;
                        }
                        else if (c.sourceItem.formatterType == "Number") {
                            c.cssClass += ' align-right';
                            if (c.sourceItem.editorType == "Decimal") {
                                var formatSrt_1 = '#,##0.00';
                                if (c.sourceItem.editorParams) {
                                    var decimals = c.sourceItem.editorParams['decimals'];
                                    if (decimals) {
                                        formatSrt_1 = '#,##0.';
                                        for (var i = 0; i < decimals; i++) {
                                            formatSrt_1 += '0';
                                        }
                                    }
                                    else if (c.sourceItem.editorParams['minValue']) {
                                        var splitedMinValue = c.sourceItem.editorParams['minValue'].split('.');
                                        if (splitedMinValue.length > 1) {
                                            formatSrt_1 = '#,##0.' + splitedMinValue[1];
                                        }
                                        else {
                                            formatSrt_1 = '#,##0';
                                        }
                                    }
                                }
                                c.format = function (ctx) { return Serenity.NumberFormatter.format(ctx.value, formatSrt_1); };
                            }
                        }
                        else if (c.sourceItem.formatterType == "Checkbox") {
                            c.cssClass += ' align-center';
                        }
                        else {
                            c.cssClass += ' align-left';
                            c.width = c.minWidth > 99 ? c.minWidth : 99;
                        }
                    }
                    else {
                        c.cssClass += ' align-left';
                        c.width = c.minWidth > 99 ? c.minWidth : 99;
                    }
                }
                //editor
                if (isEditable == true && c.sourceItem && c.sourceItem.readOnly != true) {
                    usingSlickGridEditors();
                    if (q.useSerenityInlineEditors) {
                        c.editor = SerenityInlineEditor;
                    }
                    else {
                        if (c.sourceItem.editorType == "Lookup" || c.sourceItem.editorType == "Enum") {
                            c.editor = Slick['Editors']['Select2'];
                            c.width = c.minWidth > 160 ? c.minWidth : 160;
                        }
                        else if (c.sourceItem.editorType == "Date") {
                            c.editor = Slick['Editors']['Date'];
                        }
                        else if (c.sourceItem.editorType == "Boolean") {
                            c.editor = Slick['Editors']['Checkbox'];
                        }
                        else if (c.sourceItem.editorType == "Integer") {
                            c.editor = Slick['Editors']['Integer'];
                        }
                        else if (c.sourceItem.editorType == "Decimal") {
                            c.editor = Slick['Editors']['Float'];
                        }
                        else if (c.sourceItem.editorType == "YesNoSelect") {
                            c.editor = Slick['Editors']['YesNoSelect'];
                        }
                        else if (c.sourceItem.editorType == "PercentComplete") {
                            c.editor = Slick['Editors']['PercentComplete'];
                        }
                        else if (c.sourceItem.editorType == "LongText") {
                            c.editor = Slick['Editors']['LongText'];
                        }
                        else {
                            c.editor = Slick['Editors']['Text'];
                        }
                    }
                }
            });
            columns.unshift({
                field: 'RowNum',
                name: '#',
                cssClass: 'rownum-column',
                headerCssClass: 'align-center',
                width: 40,
                minWidth: 40,
                maxWidth: 40,
                visible: extOptions.ShowRowNumberColumn,
                format: function (ctx) {
                    if (!ctx.item.RowNum) {
                        ctx.item.RowNum = _this.nextRowNumber++;
                    }
                    return String(ctx.item.RowNum);
                }
            });
            if (extOptions.ShowInlineActionsColumn == true) {
                var inlineActionsColumnWidth = 0;
                var inlineActionsColumnContent_1 = '';
                if (extOptions.ShowEditInlineButtun == true) {
                    inlineActionsColumnWidth += 25;
                    inlineActionsColumnContent_1 += '<a class="inline-actions view-details" title="edit/view details" style="padding-right: 10px;"><i class="view-details fa fa-pencil-square-o"></i></a>';
                }
                if (extOptions.ShowDeleteInlineButtun == true) {
                    inlineActionsColumnWidth += 25;
                    inlineActionsColumnContent_1 += '<a class="inline-actions delete-row" title="delete"><i class="delete-row fa fa-trash-o text-red"></i></a>';
                }
                columns.unshift({
                    field: 'inline-actions',
                    name: '',
                    cssClass: 'inline-actions-column',
                    width: inlineActionsColumnWidth,
                    minWidth: inlineActionsColumnWidth,
                    maxWidth: inlineActionsColumnWidth,
                    format: function (ctx) { return inlineActionsColumnContent_1; }
                });
            }
            if (extOptions.ShowRowSelectionCheckboxColumn == true) {
                var rowSelectionCol = Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; });
                rowSelectionCol.width = rowSelectionCol.minWidth = rowSelectionCol.maxWidth = 25;
                columns.unshift(rowSelectionCol);
            }
            if (this.element.hasClass('RowSelectionCheckGrid')) { //show checkbox column in picker mode
                var options = this.options;
                if (!options.multiple && !options.gridType) {
                    Q.notifyWarning("Could not determine multiple/single. Probably there is no 'options' parameter in grid's constructor.");
                }
                if (options.multiple == true) {
                    var rowSelectionCol = Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; });
                    rowSelectionCol.width = rowSelectionCol.minWidth = rowSelectionCol.maxWidth = 25;
                    columns.unshift(rowSelectionCol);
                }
                else {
                    columns.unshift({
                        field: 'row-selection',
                        name: '',
                        cssClass: 'inline-actions-column',
                        width: 66,
                        minWidth: 66,
                        maxWidth: 66,
                        format: function (ctx) { return '<a class="inline-actions select-row"><i class="select-row fa fa-check"></i> Select</a>'; }
                    });
                }
            }
            return columns;
        };
        GridBase.prototype.createSlickGrid = function () {
            var grid = _super.prototype.createSlickGrid.call(this);
            usingSlickAutoColumnSize();
            if (Slick.AutoColumnSize) {
                this.autoColumnSizePlugin = new Slick.AutoColumnSize();
                grid.registerPlugin(this.autoColumnSizePlugin);
            }
            grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
            return grid;
        };
        GridBase.prototype.resetColumns = function (columns) {
            var _this = this;
            this.slickContainer.fadeTo(0, 0);
            this.slickGrid.setColumns(columns);
            setTimeout(function () {
                if (_this.get_ExtGridOptions().AutoColumnSize == true) {
                    _this.resizeAllCulumn();
                }
                _this.slickContainer.fadeTo(100, 1);
            }, 100);
        };
        GridBase.prototype.resizeAllCulumn = function () {
            this.isAutosized = true;
            var gridContainerWidth = this.slickContainer.width();
            if (gridContainerWidth > 0) { }
            else {
                gridContainerWidth = this.element.closest('.s-Dialog').width() - 55;
            }
            if (gridContainerWidth > 0) { }
            else {
                gridContainerWidth = this.element.closest('.s-Panel').width() - 55;
            }
            if (gridContainerWidth > 0) { }
            else {
                gridContainerWidth = $('section.content').width() - 75;
            }
            this.slickGrid.setOptions({ forceFitColumns: false });
            var allVisibleColumns = this.autoColumnSizePlugin.resizeAllColumns().filter(function (f) { return f.visible != false; }); // this.allColumns;
            var allVisibleColumnWidth = 0;
            allVisibleColumns.map(function (m) { return m.width; }).forEach(function (e) { return allVisibleColumnWidth += e; });
            if (allVisibleColumnWidth > gridContainerWidth) {
                this.autoColumnSizePlugin.resizeAllColumns();
            }
            else if (allVisibleColumnWidth < gridContainerWidth) {
                this.autoColumnSizePlugin.resizeAllColumns();
                var fixedSizeColumns_1 = [];
                var resizableColumns_1 = [];
                allVisibleColumns.forEach(function (c) {
                    if (c.minWidth == c.maxWidth) {
                        fixedSizeColumns_1.push(c);
                        c.width = c.maxWidth;
                    }
                    else if (c.sourceItem) {
                        if (c.sourceItem.formatterType == String("Number")) {
                            fixedSizeColumns_1.push(c);
                        }
                        else if (c.sourceItem.filteringType == String("Enum")) {
                            fixedSizeColumns_1.push(c);
                            if (c.width < 80)
                                c.width = 80;
                        }
                        else if (c.sourceItem.formatterType == String("Date")) {
                            fixedSizeColumns_1.push(c);
                            if (c.width < 80)
                                c.width = 80;
                        }
                        else if (c.sourceItem.formatterType == String("DateTime")) {
                            fixedSizeColumns_1.push(c);
                            if (c.width < 140)
                                c.width = 140;
                        }
                        else if (c.sourceItem.formatterType == String("Checkbox")) {
                            fixedSizeColumns_1.push(c);
                        }
                        else {
                            resizableColumns_1.push(c);
                        }
                    }
                    else {
                        resizableColumns_1.push(c);
                    }
                });
                if (resizableColumns_1.length == 0) {
                    fixedSizeColumns_1 = [];
                    resizableColumns_1 = [];
                    allVisibleColumns.forEach(function (c) {
                        if (c.minWidth == c.maxWidth) {
                            fixedSizeColumns_1.push(c);
                            c.width = c.maxWidth;
                        }
                        else {
                            resizableColumns_1.push(c);
                        }
                    });
                }
                var fixedSizeColumnsWidth_1 = 0;
                fixedSizeColumns_1.map(function (m) { return m.width; }).forEach(function (e) { return fixedSizeColumnsWidth_1 += e; });
                var stretchableGridAreaWidth_1 = gridContainerWidth - fixedSizeColumnsWidth_1 - 18;
                var resizableColumnsWidth_1 = 0;
                resizableColumns_1
                    .map(function (m) { return m.width; })
                    .forEach(function (e) { return resizableColumnsWidth_1 += e; });
                resizableColumns_1.forEach(function (c) {
                    c.width = c.width * (stretchableGridAreaWidth_1 / resizableColumnsWidth_1);
                });
                this.slickGrid.setColumns(allVisibleColumns);
                this.slickGrid.onColumnsResized.notify();
            }
            this.setItems(this.getItems());
        };
        GridBase.prototype.getSlickOptions = function () {
            var opt = _super.prototype.getSlickOptions.call(this);
            if (this.get_ExtGridOptions().AutoColumnSize == true) {
                opt.forceFitColumns = true;
            }
            opt.enableTextSelectionOnCells = true;
            opt.enableCellNavigation = true;
            opt.asyncEditorLoading = false;
            opt.autoEdit = true;
            return opt;
        };
        GridBase.prototype.getViewOptions = function () {
            var opt = _super.prototype.getViewOptions.call(this);
            opt.rowsPerPage = q.DefaultMainGridOptions.RowsPerPage;
            return opt;
        };
        GridBase.prototype.onClick = function (e, row, cell) {
            _super.prototype.onClick.call(this, e, row, cell);
            if (e.isDefaultPrevented())
                return;
            var item = this.itemAt(row);
            var recordId = item[this.getIdProperty()];
            var target = $(e.target);
            // if user clicks "i" element, e.g. icon
            if (target.parent().hasClass('inline-action') || target.parent().hasClass('inline-actions') || target.parent().hasClass('inline-btn'))
                target = target.parent();
            if (target.hasClass('inline-action') || target.hasClass('inline-actions') || target.hasClass('inline-btn')) {
                //e.preventDefault();
                this.onInlineActionClick(target, recordId, item);
            }
        };
        GridBase.prototype.onInlineActionClick = function (target, recordId, item) {
            var _this = this;
            if (target.hasClass('delete-row')) {
                if (this.isReadOnly == true) {
                    Q.notifyWarning('Read only records could not be deleted!');
                }
                else {
                    Q.confirm('Delete record?', function () {
                        var o = _this;
                        if (o.deleteEntity) { //for in-memory grid
                            o.deleteEntity(recordId);
                        }
                        else {
                            Q.serviceRequest(_this.getService() + '/Delete', { EntityId: recordId }, function (response) {
                                _this.refresh();
                            });
                        }
                    });
                }
            }
            else if (target.hasClass('view-details')) {
                this.editItem(recordId);
            }
            else if (target.hasClass('select-row')) {
                this.rowSelection.setSelectedKeys([recordId]);
                this.pickerDialog.onSuccess(this.selectedItems);
                this.pickerDialog.dialogClose();
            }
        };
        GridBase.prototype.resetRowNumber = function () {
            this.nextRowNumber = 1;
            var items = this.getItems();
            var grouping_fields = this.view.getGrouping();
            if (grouping_fields.length == 0) {
                for (var i = 0; i < items.length; i++) {
                    items[i].RowNum = i + 1;
                }
            }
            else if (grouping_fields.length > 0) {
                var generateRowNumber_1 = function (groups) {
                    for (var gi = 0; gi < groups.length; gi++) {
                        var subGroups = groups[gi].groups;
                        if (subGroups) {
                            generateRowNumber_1(subGroups);
                        }
                        else {
                            var rows = groups[gi].rows;
                            for (var i = 0; i < rows.length; i++) {
                                rows[i].RowNum = i + 1;
                            }
                        }
                    }
                };
                var groups = this.view.getGroups();
                generateRowNumber_1(groups);
            }
            this.setItems(items);
        };
        GridBase.prototype.setGrouping = function (groupInfo) {
            this.view.setGrouping(groupInfo);
            this.resetRowNumber();
        };
        GridBase.prototype.onViewProcessData = function (response) {
            var _this = this;
            var r = _super.prototype.onViewProcessData.call(this, response);
            if (this.get_ExtGridOptions().ShowRowNumberColumn == true) {
                setTimeout(function () { _this.resetRowNumber(); });
            }
            return r;
        };
        GridBase.prototype.initDialog = function (dialog) {
            _super.prototype.initDialog.call(this, dialog);
            dialog.parentGrid = this;
        };
        Object.defineProperty(GridBase.prototype, "selectedItems", {
            get: function () {
                var _this = this;
                return this.rowSelection.getSelectedKeys().map(function (m) {
                    return _this.view.getItemById(m);
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridBase.prototype, "selectedKeys", {
            set: function (value) {
                var options = this.options;
                if (options.multiple == true) {
                    this.rowSelection.setSelectedKeys(value);
                }
                else {
                }
            },
            enumerable: true,
            configurable: true
        });
        GridBase = __decorate([
            Serenity.Decorators.filterable()
        ], GridBase);
        return GridBase;
    }(Serenity.EntityGrid));
    _Ext.GridBase = GridBase;
})(_Ext || (_Ext = {}));
/// <reference path="../Bases/GridBase.ts" />
var _Ext;
(function (_Ext) {
    var AuditLogGrid = /** @class */ (function (_super) {
        __extends(AuditLogGrid, _super);
        function AuditLogGrid(container) {
            return _super.call(this, container) || this;
        }
        AuditLogGrid.prototype.getColumnsKey = function () { return '_Ext.AuditLog'; };
        AuditLogGrid.prototype.getDialogType = function () { return _Ext.AuditLogDialog; };
        AuditLogGrid.prototype.getIdProperty = function () { return _Ext.AuditLogRow.idProperty; };
        AuditLogGrid.prototype.getLocalTextPrefix = function () { return _Ext.AuditLogRow.localTextPrefix; };
        AuditLogGrid.prototype.getService = function () { return _Ext.AuditLogService.baseUrl; };
        AuditLogGrid.prototype.getButtons = function () {
            var buttons = _super.prototype.getButtons.call(this);
            buttons.splice(0, 1);
            return buttons;
        };
        AuditLogGrid.prototype.createQuickSearchInput = function () {
        };
        AuditLogGrid.prototype.getQuickFilters = function () {
            var filters = _super.prototype.getQuickFilters.call(this);
            for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {
                var filter = filters_1[_i];
                console.log(filter.type == Serenity.StringEditor);
                if (filter.type == Serenity.StringEditor) {
                    //change quick filter to contains operator by default
                    //filter.handler = h => {
                    //    if (h.active) {
                    //        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria,
                    //            [[h.field], '=', h.value]);
                    //    }
                    //};
                    filter.handler = null;
                }
            }
            // we create a date-range quick filter, which is a composite
            // filter with two date time editors
            var actionDate = this.dateTimeRangeQuickFilter('ActionDate', 'Action Date');
            // need to override its handler, as default date-range filter will set Criteria parameter of list request.
            // we need to set StartDate and EndDate custom parameters of our AuditLogSpListRequest
            actionDate.handler = function (args) {
                // args.widget here is the start date editor. value of a date editor is a ISO date string
                var start = args.widget.value;
                // to find end date editor, need to search it by its css class among siblings
                var end = args.widget.element.nextAll('.s-DateTimeEditor.dateQ')
                    .getWidget(Serenity.DateTimeEditor).value;
                args.request.ActionStartDate = start;
                args.request.ActionEndDate = end;
                // active option controls when a filter editor looks active, e.g. its label is blueish
                args.active = !Q.isEmptyOrNull(start) || !Q.isEmptyOrNull(end);
            };
            filters.push(actionDate);
            return filters;
        };
        AuditLogGrid = __decorate([
            Serenity.Decorators.registerClass(),
            Serenity.Decorators.filterable(false)
            //export class AuditLogGrid extends Serenity.EntityGrid<AuditLogRow, any> {
        ], AuditLogGrid);
        return AuditLogGrid;
    }(_Ext.GridBase));
    _Ext.AuditLogGrid = AuditLogGrid;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditLogViewer = /** @class */ (function () {
        function AuditLogViewer(el, entityVersions) {
            this.el = '.content-wrapper';
            this.data = {
                entityVersions: []
            };
            this.mounted = function () {
            };
            this.computed = {
                test: function () {
                    return 'test computed';
                }
            };
            this.filters = {
                filterByYardId: function () {
                    return [];
                }
            };
            this.methods = {
                showDiff: function (versionInfo) {
                    //showing diff visually
                    var left = versionInfo.OldEntity;
                    var right = versionInfo.NewEntity;
                    var delta = jsondiffpatch.diff(left, right);
                    // beautiful html diff
                    document.getElementById('visualizeDiff').innerHTML = jsondiffpatch.formatters.html.format(delta, left);
                },
                getDiff: function (versionInfo) {
                    //showing diff visually
                    //var left = versionInfo.OldEntity;
                    //var right = versionInfo.NewEntity;
                    //console.log(this.entity);
                    //showing diff visually
                    var left = JSON.stringify(versionInfo.OldEntity ? versionInfo.OldEntity : null);
                    var leftJson = JSON.parse(left);
                    //if (left) {
                    //    if (left.PlantJson) {
                    //        left.PlantInfo = JSON.parse(left.PlantJson);
                    //        delete (left.PlantJson);
                    //    }
                    //    delete (left.Id);
                    //    delete (left.IDate);
                    //    delete (left.IUser);
                    //    delete (left.EDate);
                    //    delete (left.EUser);
                    //}
                    var right = JSON.stringify(versionInfo.NewEntity ? versionInfo.NewEntity : null);
                    var rightJson = JSON.parse(right);
                    //if (right) {
                    //    if (right.PlantJson) {
                    //        right.PlantInfo = JSON.parse(right.PlantJson);
                    //        delete (right.PlantJson);
                    //    }
                    //}
                    //only show content of json property
                    for (var key in leftJson) {
                        if (!rightJson.hasOwnProperty(key)) {
                            delete leftJson[key];
                        }
                    }
                    var delta = jsondiffpatch.diff(leftJson, rightJson);
                    // beautiful html diff
                    return jsondiffpatch.formatters.html.format(delta);
                    //var delta = jsondiffpatch.diff(left, right);
                    //// left is optional, if specified unchanged values will be visible too
                    //document.getElementBy('the-diff').innerHTML = jsondiffpatch.formatters.html.format(delta, left);
                    //// Also you can dinamically show/hide unchanged values
                    //jsondiffpatch.formatters.html.showUnchanged();
                    //jsondiffpatch.formatters.html.hideUnchanged();
                    //// these will also adjust array move arrows (SVG), which is useful if something alters the html layout
                }
            };
            this.el = el || this.el;
            this.data.entityVersions = entityVersions;
        }
        AuditLogViewer.prototype.destroyed = function () {
        };
        return AuditLogViewer;
    }());
    _Ext.AuditLogViewer = AuditLogViewer;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AuditLogViewerDialog = /** @class */ (function (_super) {
        __extends(AuditLogViewerDialog, _super);
        function AuditLogViewerDialog(request) {
            var _this = _super.call(this) || this;
            _this.request = request;
            usingVuejs();
            usingJsonDiffPatch();
            _this.dialogTitle = 'Audit Log Viewer';
            _this.onDialogOpen = function () {
                _Ext.AuditLogViewerService.List(_this.request, function (response) {
                    response.EntityVersions.forEach(function (e) {
                        delete (e.Id);
                        console.log(e.OldEntity);
                        e.OldEntity = JSON.parse(e.OldEntity);
                        e.NewEntity = JSON.parse(e.NewEntity);
                        if (e.OldEntity) {
                            delete (e.OldEntity.Id);
                            delete (e.OldEntity.IDate);
                            delete (e.OldEntity.IUser);
                            delete (e.OldEntity.EDate);
                            delete (e.OldEntity.EUser);
                        }
                        e.ActionType = _Ext.AuditActionType[e.ActionType];
                        e.isShowed = false;
                    });
                    new Vue(new _Ext.AuditLogViewer('#' + _this.idPrefix + 'dialogContent', response.EntityVersions));
                });
            };
            return _this;
        }
        AuditLogViewerDialog.prototype.getTemplateName = function () {
            return '_Ext.AuditLogViewer';
        };
        AuditLogViewerDialog = __decorate([
            Serenity.Decorators.registerClass(),
            Serenity.Decorators.maximizable()
        ], AuditLogViewerDialog);
        return AuditLogViewerDialog;
    }(Serenity.TemplatedDialog));
    _Ext.AuditLogViewerDialog = AuditLogViewerDialog;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ReportGridBase = /** @class */ (function (_super) {
        __extends(ReportGridBase, _super);
        function ReportGridBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReportGridBase.prototype.getButtons = function () {
            var buttons = _super.prototype.getButtons.call(this);
            buttons.splice(0, 1);
            return buttons;
        };
        ReportGridBase.prototype.getColumns = function () {
            var columns = _super.prototype.getColumns.call(this);
            columns.splice(0, 1);
            return columns;
        };
        ReportGridBase = __decorate([
            Serenity.Decorators.filterable()
        ], ReportGridBase);
        return ReportGridBase;
    }(_Ext.GridBase));
    _Ext.ReportGridBase = ReportGridBase;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ReportPanelBase = /** @class */ (function (_super) {
        __extends(ReportPanelBase, _super);
        function ReportPanelBase(container) {
            var _this = _super.call(this, container) || this;
            _this.byId('PanelTitle').text(_this.getReportTitle());
            _this.byId('SubmitButton').click(function (e) {
                e.preventDefault();
                if (!_this.validateForm()) {
                    return;
                }
                _Ext.ReportHelper.execute({ reportKey: _this.getReportKey(), params: { Request: _this.getReportRequest() }, extension: 'html' });
            });
            _this.byId('DownloadPdfButton').click(function (e) {
                e.preventDefault();
                if (!_this.validateForm()) {
                    return;
                }
                _Ext.ReportHelper.execute({ reportKey: _this.getReportKey(), params: { Request: _this.getReportRequest() }, extension: 'html' });
            });
            return _this;
        }
        ReportPanelBase.prototype.getTemplateName = function () { return 'ReportPanel'; };
        ReportPanelBase.prototype.getReportTitle = function () { return 'Report Title'; };
        ReportPanelBase.prototype.getReportKey = function () { return 'Report.Key'; };
        ReportPanelBase.prototype.getReportRequest = function () { return this.getSaveEntity(); };
        return ReportPanelBase;
    }(Serenity.PropertyPanel));
    _Ext.ReportPanelBase = ReportPanelBase;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    /**
     * Our select editor with hardcoded values.
     *
     * When you define a new editor type, make sure you build
     * and transform templates for it to be available
     * in server side forms, e.g. [HardCodedValuesEditor]
     */
    var AdaTidakAdaEditor = /** @class */ (function (_super) {
        __extends(AdaTidakAdaEditor, _super);
        function AdaTidakAdaEditor(container) {
            var _this = _super.call(this, container, null) || this;
            // you may also use addItem which accepts a Select2Item parameter
            _this.addItem({
                id: "true",
                text: "Ada"
            });
            // don't let selecting this one (disabled)
            _this.addItem({
                id: "false",
                text: "Tidak Ada",
            });
            return _this;
            //this.set_value(null);
        }
        AdaTidakAdaEditor = __decorate([
            Serenity.Decorators.registerEditor()
        ], AdaTidakAdaEditor);
        return AdaTidakAdaEditor;
    }(Serenity.Select2Editor));
    _Ext.AdaTidakAdaEditor = AdaTidakAdaEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var AutoCompleteEditor = /** @class */ (function (_super) {
        __extends(AutoCompleteEditor, _super);
        function AutoCompleteEditor(input, options) {
            var _this = _super.call(this, input) || this;
            _this.options = options;
            input.bind('change', function (e) {
                if (!Serenity.WX.hasOriginalEvent(e)) {
                    return;
                }
            });
            setTimeout(function () {
                _this.bindAutoComplete(input);
            }, 1000);
            return _this;
        }
        AutoCompleteEditor.prototype.bindAutoComplete = function (input) {
            var opt = this.options;
            var source = opt.sourceArray;
            if (opt.sourceCSV) {
                source = opt.sourceCSV.split(',');
            }
            else if (this.options.lookupKey) {
                var lookup_1 = Q.getLookup(opt.lookupKey);
                source = lookup_1.items.map(function (m) { return m[lookup_1.textField]; });
            }
            input.autocomplete({
                minLength: opt.minSearchLength || 0,
                autoFocus: true,
                source: source,
                focus: function (event, ui) {
                    //$(".ui-helper-hidden-accessible").hide();  //fix issue with the selected data showing up on webpage
                    //event.preventDefault();
                    //return false;
                },
            });
            input.data("ui-autocomplete")._renderItem = function (ul, item) {
                return $("<li>")
                    .append("<a>" + item.label + "</a>")
                    .appendTo(ul);
            };
            input.bind('click', function (e) {
                var wasOpen = input.autocomplete("widget").is(":visible");
                // Close if already visible
                if (wasOpen) {
                    return;
                }
                // Pass empty string as value to search for, displaying all results
                input.autocomplete("search", "");
            });
        };
        AutoCompleteEditor = __decorate([
            Serenity.Decorators.registerEditor()
        ], AutoCompleteEditor);
        return AutoCompleteEditor;
    }(Serenity.StringEditor));
    _Ext.AutoCompleteEditor = AutoCompleteEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ColorEditor = /** @class */ (function (_super) {
        __extends(ColorEditor, _super);
        function ColorEditor(container) {
            var _this = _super.call(this, container) || this;
            try {
                _this.element.colorpicker({ format: "hex" });
            }
            catch (e) { }
            return _this;
        }
        ColorEditor.prototype.getTemplate = function () {
            usingBootstrapColorPicker();
            return "<div class=\"input-group colorpicker-component\">\n                        <input type=\"text\" value=\"#00AABB\" class=\"form-control\" />\n                        <span class=\"input-group-addon\"><i></i></span>\n                    </div>";
        };
        ;
        ColorEditor.prototype.getEditValue = function (property, target) {
            try {
                var editVal = this.element.colorpicker().data().color;
                target[property.name] = editVal;
            }
            catch (e) { }
        };
        ColorEditor.prototype.setEditValue = function (source, property) {
            var val = source[property.name];
            //this.element.children('input').val(val);
            try {
                this.element.data('colorpicker').setValue(val);
            }
            catch (e) { }
        };
        ColorEditor = __decorate([
            Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue]),
            Serenity.Decorators.editor(),
            Serenity.Decorators.element("<div/>")
        ], ColorEditor);
        return ColorEditor;
    }(Serenity.TemplatedWidget));
    _Ext.ColorEditor = ColorEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var DateTimePickerEditor = /** @class */ (function (_super) {
        __extends(DateTimePickerEditor, _super);
        function DateTimePickerEditor(container) {
            var _this = _super.call(this, container) || this;
            usingJqueryUITimepickerAddon();
            _this.element.datetimepicker({
                timeInput: true,
                controlType: 'select',
                oneLine: true,
                timeFormat: "HH:mm:ss",
            });
            return _this;
        }
        DateTimePickerEditor.prototype.getEditValue = function (property, target) { target[property.name] = this.value; };
        DateTimePickerEditor.prototype.setEditValue = function (source, property) { this.value = source[property.name]; };
        Object.defineProperty(DateTimePickerEditor.prototype, "value", {
            //http://trentrichardson.com/examples/timepicker
            get: function () {
                return Q.formatDate(this.valueAsDate, 'yyyy-MM-ddTHH:mm:ss');
            },
            set: function (val) {
                this.valueAsDate = Q.parseISODateTime(val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateTimePickerEditor.prototype, "valueAsDate", {
            get: function () {
                var val = this.element.datetimepicker('getDate');
                return val;
            },
            set: function (val) {
                this.element.datetimepicker('setDate', val);
            },
            enumerable: true,
            configurable: true
        });
        DateTimePickerEditor.prototype.get_readOnly = function () {
            return this.element.hasClass('readonly');
        };
        DateTimePickerEditor.prototype.set_readOnly = function (value) {
            if (value == true) {
                this.element.datetimepicker("option", "disabled", true);
                this.element.addClass('readonly');
                this.element.attr("disabled");
            }
            else {
                this.element.datetimepicker("option", "disabled", false);
                this.element.removeClass('readonly');
                this.element.removeAttr("disabled");
            }
        };
        DateTimePickerEditor.prototype.set_minDate = function (date) {
            this.element.datetimepicker('option', 'minDate', date);
        };
        DateTimePickerEditor.prototype.set_maxDate = function (date) {
            this.element.datetimepicker('option', 'maxDate', date);
        };
        DateTimePickerEditor.prototype.set_minDateTime = function (date) {
            this.element.datetimepicker('option', 'minDateTime', date);
        };
        DateTimePickerEditor.prototype.set_maxDateTime = function (date) {
            this.element.datetimepicker('option', 'maxDateTime', date);
        };
        DateTimePickerEditor = __decorate([
            Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue, Serenity.IReadOnly]),
            Serenity.Decorators.editor(),
            Serenity.Decorators.element("<input/>")
        ], DateTimePickerEditor);
        return DateTimePickerEditor;
    }(Serenity.Widget));
    _Ext.DateTimePickerEditor = DateTimePickerEditor;
})(_Ext || (_Ext = {}));
/// <reference path="../Bases/DialogBase.ts" />
var _Ext;
(function (_Ext) {
    var EditorDialogBase = /** @class */ (function (_super) {
        __extends(EditorDialogBase, _super);
        function EditorDialogBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EditorDialogBase.prototype.get_ExtDialogOptions = function () { return q.DefaultEditorDialogOptions; };
        EditorDialogBase.prototype.getIdProperty = function () { return "__id"; };
        EditorDialogBase.prototype.destroy = function () {
            this.onSave = null;
            this.onDelete = null;
            _super.prototype.destroy.call(this);
        };
        EditorDialogBase.prototype.updateInterface = function () {
            _super.prototype.updateInterface.call(this);
            this.saveAndCloseButton.find('.button-inner').text(this.isNew() ? (Q.tryGetText('Controls.AddButton') || 'Add') : (Q.tryGetText('Controls.ApplyButton') || 'Apply'));
            // apply changes button doesn't work properly with in-memory grids yet
            if (this.applyChangesButton) {
                this.applyChangesButton.hide();
            }
            if (this.parentEditor.isReadOnly == true) {
                this.saveAndCloseButton.addClass('disabled');
                this.deleteButton.addClass('disabled');
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                // remove required asterisk (*)
                this.element.find('sup').hide();
            }
        };
        EditorDialogBase.prototype.saveHandler = function (options, callback) {
            this.onSave && this.onSave(options, callback);
        };
        EditorDialogBase.prototype.deleteHandler = function (options, callback) {
            this.onDelete && this.onDelete(options, callback);
        };
        EditorDialogBase = __decorate([
            Serenity.Decorators.registerClass()
        ], EditorDialogBase);
        return EditorDialogBase;
    }(_Ext.DialogBase));
    _Ext.EditorDialogBase = EditorDialogBase;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var EmptyLookupEditor = /** @class */ (function (_super) {
        __extends(EmptyLookupEditor, _super);
        function EmptyLookupEditor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EmptyLookupEditor.prototype.setSelect2Items = function (items) {
            var _this = this;
            this.clearItems();
            items.forEach(function (item) { _this.addItem(item); });
        };
        EmptyLookupEditor.prototype.setLookupItems = function (lookup) {
            var items = lookup.items.map(function (m) {
                return {
                    id: m[lookup.idField],
                    text: m[lookup.textField],
                    source: m
                };
            });
            this.setSelect2Items(items);
        };
        EmptyLookupEditor = __decorate([
            Serenity.Decorators.registerEditor()
        ], EmptyLookupEditor);
        return EmptyLookupEditor;
    }(Serenity.Select2Editor));
    _Ext.EmptyLookupEditor = EmptyLookupEditor;
})(_Ext || (_Ext = {}));
/// <reference path="../Bases/GridBase.ts" />
var _Ext;
(function (_Ext) {
    var GridEditorBase = /** @class */ (function (_super) {
        __extends(GridEditorBase, _super);
        function GridEditorBase(container) {
            var _this = _super.call(this, container) || this;
            _this.nextId = 1;
            _this.slickGrid.onSort.subscribe(function (e, args) {
                _this.sortGridFunction(args.grid, args.sortCols[0], args.sortCols[0].sortCol.field);
                //(args.grid as Slick.Grid).init();
                args.grid.invalidateAllRows();
                args.grid.invalidate();
                args.grid.render();
                args.grid.resizeCanvas();
            });
            return _this;
        }
        GridEditorBase.prototype.get_ExtGridOptions = function () { return q.DefaultEditorGridOptions; };
        GridEditorBase.prototype.getIdProperty = function () { return "__id"; };
        GridEditorBase.prototype.sortGridFunction = function (grid, column, field) {
            grid.getData().sort(function (a, b) {
                var result = a[field] > b[field] ? 1 :
                    a[field] < b[field] ? -1 :
                        0;
                return column.sortAsc ? result : -result;
            });
        };
        GridEditorBase.prototype.getQuickFilters = function () {
            return [];
        };
        GridEditorBase.prototype.id = function (entity) {
            return entity[this.getIdProperty()];
        };
        GridEditorBase.prototype.save = function (opt, callback) {
            var _this = this;
            var request = opt.request;
            var row = Q.deepClone(request.Entity);
            var id = this.id(row);
            if (id == null) {
                row[this.getIdProperty()] = "`" + this.nextId++;
            }
            if (!this.validateEntity(row, id)) {
                return;
            }
            var items = this.view.getItems().slice();
            if (id == null) {
                items.push(row);
            }
            else {
                var index = Q.indexOf(items, function (x) { return _this.id(x) === id; });
                items[index] = Q.deepClone({}, items[index], row);
            }
            this.value = items;
            callback({});
        };
        GridEditorBase.prototype.deleteEntity = function (id) {
            var _this = this;
            this.view.deleteItem(id);
            setTimeout(function () { _this.onItemsChanged(); });
            return true;
        };
        GridEditorBase.prototype.validateEntity = function (row, id) {
            return true;
        };
        GridEditorBase.prototype.getNewEntity = function () {
            return {};
        };
        GridEditorBase.prototype.getButtons = function () {
            var _this = this;
            return [{
                    title: 'Add ' + this.getItemName(),
                    cssClass: 'add-button',
                    onClick: function () { _this.addButtonClick(); }
                }];
        };
        GridEditorBase.prototype.addButtonClick = function () {
            var _this = this;
            this.createEntityDialog(this.getItemType(), function (dlg) {
                var dialog = dlg;
                dialog.parentEditor = _this;
                dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                dialog.loadEntityAndOpenDialog(_this.getNewEntity());
            });
        };
        GridEditorBase.prototype.editItem = function (entityOrId) {
            var _this = this;
            var id = entityOrId;
            var item = this.view.getItemById(id);
            this.createEntityDialog(this.getItemType(), function (dlg) {
                var dialog = dlg;
                dialog.onDelete = function (opt, callback) {
                    if (!_this.deleteEntity(id)) {
                        return;
                    }
                    callback({});
                };
                dialog.parentEditor = _this;
                dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                dialog.loadEntityAndOpenDialog(item);
            });
            ;
        };
        GridEditorBase.prototype.getEditValue = function (property, target) {
            target[property.name] = this.value;
        };
        GridEditorBase.prototype.setEditValue = function (source, property) {
            this.value = source[property.name];
        };
        Object.defineProperty(GridEditorBase.prototype, "value", {
            get: function () {
                var p = this.getIdProperty();
                this.slickGrid.getEditController().commitCurrentEdit();
                var items = this.view.getItems();
                this.onBeforeGetValue(items);
                return items.map(function (x) {
                    var y = Q.deepClone(x);
                    var id = y[p];
                    if (id && id.toString().charAt(0) == '`')
                        delete y[p];
                    if (y['RowNum'])
                        delete y['RowNum'];
                    return y;
                });
            },
            set: function (value) {
                var _this = this;
                var id = this.getIdProperty();
                var val = value || [];
                var items = val.map(function (x) {
                    var y = Q.deepClone(x);
                    if (y[id] == null) {
                        y[id] = "`" + _this.nextId++;
                    }
                    return y;
                });
                var r = this.onViewProcessData({ Entities: items });
                this.view.setItems(r.Entities, true);
                setTimeout(function () { _this.onItemsChanged(); });
                this.resetRowNumber(); // to generate serial no.
            },
            enumerable: true,
            configurable: true
        });
        GridEditorBase.prototype.getGridCanLoad = function () {
            return false;
        };
        GridEditorBase.prototype.usePager = function () {
            return false;
        };
        GridEditorBase.prototype.getInitialTitle = function () {
            return null;
        };
        GridEditorBase.prototype.createToolbarExtensions = function () {
            var _this = this;
            //super.createToolbarExtensions();
            Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                _this.searchText = Select2.util.stripDiacritics(Q.trimToNull(text) || '').toLowerCase();
                _this.view.setItems(_this.view.getItems(), true);
            });
        };
        GridEditorBase.prototype.onViewFilter = function (row) {
            if (!_super.prototype.onViewFilter.call(this, row)) {
                return false;
            }
            if (this.searchText) {
                return this.matchContains(row);
            }
            return true;
        };
        GridEditorBase.prototype.matchContains = function (item) {
            var result = false;
            for (var prop in item) {
                result = Select2.util.stripDiacritics(String(item[prop] || '')).toLowerCase().indexOf(this.searchText) >= 0;
                if (result == true) {
                    return result;
                }
            }
            return result;
        };
        GridEditorBase.prototype.enableFiltering = function () { return false; };
        GridEditorBase.prototype.onViewSubmit = function () { return false; };
        GridEditorBase.prototype.get_readOnly = function () {
            return this.isReadOnly;
        };
        GridEditorBase.prototype.set_readOnly = function (value) {
            this.isReadOnly = value;
            if (value == true) {
                this.element.find('.add-button').addClass('disabled');
                var opt = this.slickGrid.getOptions();
                opt.editable = false;
                this.slickGrid.setOptions(opt);
            }
            else {
                this.element.find('.add-button').removeClass('disabled');
            }
        };
        GridEditorBase.prototype.getSlickOptions = function () {
            var opt = _super.prototype.getSlickOptions.call(this);
            opt.forceFitColumns = false;
            //opt.autoHeight = true; // If you need to show footer, you have to do opt.autoHeight = false
            return opt;
        };
        //custom events
        GridEditorBase.prototype.onItemsChanged = function () {
        };
        GridEditorBase.prototype.onBeforeGetValue = function (items) {
        };
        GridEditorBase = __decorate([
            Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue, Serenity.IReadOnly]),
            Serenity.Decorators.editor(),
            Serenity.Decorators.element("<div/>")
        ], GridEditorBase);
        return GridEditorBase;
    }(_Ext.GridBase));
    _Ext.GridEditorBase = GridEditorBase;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var HardCodedLookupEditor = /** @class */ (function (_super) {
        __extends(HardCodedLookupEditor, _super);
        function HardCodedLookupEditor(container, options) {
            var _this = _super.call(this, container, options) || this;
            var source = options.sourceArray;
            if (options.sourceCSV) {
                source = options.sourceCSV.split(',');
            }
            source.forEach(function (i) { return _this.addOption(i, i); });
            return _this;
        }
        HardCodedLookupEditor.prototype.getSelect2Options = function () {
            var opt = _super.prototype.getSelect2Options.call(this);
            return opt;
        };
        HardCodedLookupEditor = __decorate([
            Serenity.Decorators.registerEditor()
        ], HardCodedLookupEditor);
        return HardCodedLookupEditor;
    }(Serenity.Select2Editor));
    _Ext.HardCodedLookupEditor = HardCodedLookupEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var HtmlTemplateEditor = /** @class */ (function (_super) {
        __extends(HtmlTemplateEditor, _super);
        function HtmlTemplateEditor(textArea, opt) {
            return _super.call(this, textArea, opt) || this;
        }
        HtmlTemplateEditor.prototype.getConfig = function () {
            var config = _super.prototype.getConfig.call(this);
            var placehorders = this.options.placeholders;
            if (placehorders) {
                config.placeholder_select = {
                    placeholders: placehorders.split(',')
                };
                config.extraPlugins += ',richcombo,placeholder_select';
            }
            config.allowedContent = true;
            config.enterMode = window['CKEDITOR'].ENTER_BR;
            config.extraPlugins += ',showborders';
            config.removePlugins += ',uploadimage';
            //config.forcePasteAsPlainText = true;
            //config.toolbar = [['placeholder_select']];
            config.removeButtons += ',Cut,Copy,Paste,PasteText,PasteFromWord' +
                ',SpecialChar,Subscript,Superscript,Styles,' +
                'Link,Unlink,CreatePlaceholder,' +
                'Image,Anchor,Blockquote,BGColor,' +
                'Superscript,RemoveFormat';
            return config;
        };
        HtmlTemplateEditor = __decorate([
            Serenity.Decorators.editor(),
            Serenity.Decorators.element("<div/>")
        ], HtmlTemplateEditor);
        return HtmlTemplateEditor;
    }(Serenity.HtmlContentEditor));
    _Ext.HtmlTemplateEditor = HtmlTemplateEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var StaticTextBlock = /** @class */ (function (_super) {
        __extends(StaticTextBlock, _super);
        function StaticTextBlock(container, options) {
            var _this = _super.call(this, container, options) || this;
            // hide the caption label for this editor if in a form. ugly hack
            if (_this.options.hideLabel)
                _this.element.closest('.field').find('.caption').hide();
            // remove required asterisk (*)
            _this.element.closest('.field').find('sup').hide();
            _this.updateElementContent();
            return _this;
        }
        StaticTextBlock.prototype.updateElementContent = function () {
            var text = Q.coalesce(this.options.text, this._value);
            // if isLocalText is set, text is actually a local text key
            if (this.options.isLocalText)
                text = Q.text(text);
            // don't html encode if isHtml option is true
            if (this.options.isHtml)
                this.element.html(text);
            else
                this.element.text(text);
        };
        /**
         * By implementing ISetEditValue interface, we allow this editor to display its field value.
         * But only do this when our text content is not explicitly set in options
         */
        StaticTextBlock.prototype.setEditValue = function (source, property) {
            if (this.options.text == null) {
                this._value = Q.coalesce(this.options.text, source[property.name]);
                this.updateElementContent();
            }
        };
        Object.defineProperty(StaticTextBlock.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
                this.updateElementContent();
            },
            enumerable: true,
            configurable: true
        });
        StaticTextBlock = __decorate([
            Serenity.Decorators.element("<div/>"),
            Serenity.Decorators.registerEditor([Serenity.ISetEditValue])
        ], StaticTextBlock);
        return StaticTextBlock;
    }(Serenity.Widget));
    _Ext.StaticTextBlock = StaticTextBlock;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    /**
     * Our select editor with hardcoded values.
     *
     * When you define a new editor type, make sure you build
     * and transform templates for it to be available
     * in server side forms, e.g. [HardCodedValuesEditor]
     */
    var UndangTidakUndangEditor = /** @class */ (function (_super) {
        __extends(UndangTidakUndangEditor, _super);
        function UndangTidakUndangEditor(container) {
            var _this = _super.call(this, container, null) || this;
            // you may also use addItem which accepts a Select2Item parameter
            _this.addItem({
                id: "true",
                text: "Diundang"
            });
            // don't let selecting this one (disabled)
            _this.addItem({
                id: "false",
                text: "Tidak Diundang",
            });
            return _this;
            //this.set_value(null);
        }
        UndangTidakUndangEditor = __decorate([
            Serenity.Decorators.registerEditor()
        ], UndangTidakUndangEditor);
        return UndangTidakUndangEditor;
    }(Serenity.Select2Editor));
    _Ext.UndangTidakUndangEditor = UndangTidakUndangEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    /**
     * Our select editor with hardcoded values.
     *
     * When you define a new editor type, make sure you build
     * and transform templates for it to be available
     * in server side forms, e.g. [HardCodedValuesEditor]
     */
    var YaTidakEditor = /** @class */ (function (_super) {
        __extends(YaTidakEditor, _super);
        function YaTidakEditor(container) {
            var _this = _super.call(this, container, null) || this;
            // you may also use addItem which accepts a Select2Item parameter
            _this.addItem({
                id: "true",
                text: "Ya"
            });
            // don't let selecting this one (disabled)
            _this.addItem({
                id: "false",
                text: "Tidak",
            });
            return _this;
            //this.set_value(null);
        }
        YaTidakEditor = __decorate([
            Serenity.Decorators.registerEditor()
        ], YaTidakEditor);
        return YaTidakEditor;
    }(Serenity.Select2Editor));
    _Ext.YaTidakEditor = YaTidakEditor;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var CardViewMixin = /** @class */ (function () {
        function CardViewMixin(options) {
            var _this = this;
            this.options = options;
            var u, f;
            var dg = this.dataGrid = options.grid;
            var idProperty = dg.getIdProperty();
            var getId = this.getId = function (item) { return item[idProperty]; };
            options.defaultViewType = options.defaultViewType || 'list';
            this.viewType = options.defaultViewType;
            var divViewSwitch = $('\n<div class="btn-group view-switch" data-toggle="buttons" style="float: right">\n    <label class="btn btn-default active" title="List View">\n        <i class="fa fa-th-list text-purple"><\/i>\n        <input type="radio" name="' + dg.element.attr("id") + '_ViewType" value="list" checked />\n    <\/label>\n    <label class="btn btn-default" title="Card View">\n        <i class="fa fa-th-large text-purple"><\/i>\n        <input type="radio" name="' + dg.element.attr("id") + '_ViewType" value="card" />    \n    <\/label>\n<\/div>')
                .prependTo(dg.element.find(".grid-title"));
            this.cardContainer = $('<div class="card-container" style="display: none;"><div class="card-items"><\/div><\/div>').insertAfter(dg.element.children(".grid-container"));
            divViewSwitch.find("input").change(function (e) {
                return _this.switchView($(e.target).val());
            });
            this.resizeCardView();
            dg.element.bind("layout", function () {
                return _this.resizeCardView();
            });
            dg.view.onDataChanged.subscribe(function () {
                _this.vm && _this.updateCardItems();
            });
            u = dg.getCurrentSettings;
            dg.getCurrentSettings = function (n) {
                var i = u.apply(dg, [n]);
                return i.viewType = divViewSwitch.find("input:checked").val(), i;
            };
            f = dg.restoreSettings;
            dg.restoreSettings = function (n, i) {
                var u, e, o, s;
                if (f.apply(dg, [n, i]),
                    n == null) {
                    if (u = this.getPersistanceStorage(),
                        u == null)
                        return;
                    if (e = Q.trimToNull(u.getItem(this.getPersistanceKey())),
                        !e)
                        return;
                    n = JSON.parse(e);
                }
                o = n.viewType || options.defaultViewType;
                s = divViewSwitch.find("input:checked").val() || options.defaultViewType;
                o != s && divViewSwitch.find("input").eq(o == "card" ? 1 : 0).click();
            };
        }
        CardViewMixin.prototype.switchView = function (viewType) {
            this.resizeCardView();
            var isCardView = viewType == "card";
            this.dataGrid.element.children(".card-container").toggle(isCardView);
            this.dataGrid.element.children(".grid-container").toggle(!isCardView);
            isCardView && this.updateCardItems();
            this.dataGrid.persistSettings();
        };
        CardViewMixin.prototype.updateCardItems = function () {
            if (this.vm)
                this.vm.items = this.dataGrid.getItems();
            else {
                usingVuejs();
                this.vm = new Vue({
                    el: this.cardContainer.children()[0],
                    template: this.options.containerTemplate ? "<div> " + this.options.containerTemplate + " </div>"
                        : "<div class=\"card-items\">\n    <div v-for=\"(item, index) in items\" class=\"" + (this.options.itemCssClass || 'col-sm-12 col-md-6 col-lg-4') + "\">\n        <div class=\"card-item\" style=\"" + this.options.itemCssStyle + "\">\n        " + this.options.itemTemplate + "\n        </div>\n    </div>\n</div>",
                    data: {
                        items: this.dataGrid.getItems()
                    },
                    methods: this.options.methods
                });
            }
        };
        CardViewMixin.prototype.resizeCardView = function () {
            var gridContainer = this.dataGrid.element.children(".grid-container"), width = this.dataGrid.element.width(), height = gridContainer.height();
            this.dataGrid.element.children(".card-container").css({
                width: width + "px",
                height: height + "px"
            });
        };
        return CardViewMixin;
    }());
    _Ext.CardViewMixin = CardViewMixin;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    /**
     * A mixin that can be applied to a DataGrid for excel style filtering functionality
     */
    var HeaderFiltersMixin = /** @class */ (function () {
        function HeaderFiltersMixin(options) {
            this.options = options;
            var dg = this.dataGrid = options.grid;
            var currentColumn = null;
            var cachedValues = {};
            usingSlickHeaderFilters();
            var headerFilters = new Slick['Plugins'].HeaderFilters({
                getFilterValues: function (column, setFilterableValues) {
                    if (!dg.view.url || !dg.view["getPagingInfo"]().rowsPerPage || dg.view.getLength() == 0
                        && !Q.any(dg.slickGrid.getColumns(), function (x) { return x.filterValues && x.filterValues.length > 0; })) {
                        return null;
                    }
                    currentColumn = column;
                    try {
                        if (!dg.onViewSubmit()) {
                            setFilterableValues([]);
                            return;
                        }
                    }
                    finally {
                        currentColumn = null;
                    }
                    var request = Q.deepClone(dg.view.params);
                    request.DistinctFields = [column.field];
                    request.Skip = 0;
                    request.Take = 0;
                    var cacheKey = $.toJSON(request);
                    var cachedValue = cachedValues[cacheKey];
                    if (cachedValue && cachedValue.expires > (new Date).getTime())
                        setFilterableValues(cachedValue.value);
                    else {
                        Q.serviceCall({
                            request: request,
                            url: dg.view.url,
                            onSuccess: function (response) {
                                cachedValues[cacheKey] = {
                                    value: response.Values,
                                    expires: (new Date).getTime() + 1e3 * 30
                                };
                                setFilterableValues(response.Values);
                            }
                        });
                    }
                },
                isFilterable: function (column) {
                    return column.sourceItem != null && column.sortable && (column.sourceItem.notFilterable == null || !column.sourceItem.notFilterable);
                }
            });
            headerFilters.onFilterApplied.subscribe(function () {
                dg.refresh();
            });
            dg.slickGrid.registerPlugin(headerFilters);
            var oldOnViewSubmit = dg.onViewSubmit;
            dg.onViewSubmit = function () {
                if (!oldOnViewSubmit.call(dg))
                    return false;
                var columns = dg.slickGrid.getColumns();
                var request = dg.view.params;
                for (var n = 0; n < columns.length; n++) {
                    var column = columns[n];
                    if (column === currentColumn)
                        continue;
                    var filterValues = column.filterValues;
                    if (filterValues && filterValues.length) {
                        var u = filterValues.filter(function (f) { return f != null; });
                        var d = [[column.field], "in", [u]];
                        if (u.length !== filterValues.length) {
                            if (u.length > 0)
                                d = Serenity.Criteria.or(["is null", [column.field]], d);
                            else
                                d = ["is null", [column.field]];
                        }
                        request.Criteria = Serenity.Criteria.and(request.Criteria, d);
                    }
                }
                return true;
            };
        }
        return HeaderFiltersMixin;
    }());
    _Ext.HeaderFiltersMixin = HeaderFiltersMixin;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    /**
     * A mixin that can be applied to a DataGrid for tree functionality
     */
    var TreeGridMixin = /** @class */ (function () {
        function TreeGridMixin(options) {
            this.options = options;
            var dg = this.dataGrid = options.grid;
            var idProperty = options.idField || dg.getIdProperty();
            var getId = this.getId = function (item) { return item[idProperty]; };
            dg.element.find('.grid-container').on('click', function (e) {
                if ($(e.target).hasClass('s-TreeToggle')) {
                    var src = dg.slickGrid.getCellFromEvent(e);
                    if (src.cell >= 0 &&
                        src.row >= 0) {
                        TreeGridMixin.toggleClick(e, src.row, src.row, dg.view, getId);
                    }
                }
            });
            var oldViewFilter = dg.onViewFilter;
            dg.onViewFilter = function (item) {
                if (!oldViewFilter.apply(this, [item]))
                    return false;
                return TreeGridMixin.filterById(item, dg.view, idProperty, options.getParentId);
            };
            var oldProcessData = dg.onViewProcessData;
            dg.onViewProcessData = function (response) {
                response = oldProcessData.apply(this, [response]);
                response.Entities = TreeGridMixin.applyTreeOrdering(response.Entities, getId, options.getParentId);
                Serenity.SlickTreeHelper.setIndents(response.Entities, getId, options.getParentId, (options.initialCollapse && options.initialCollapse()) || false);
                return response;
            };
            if (options.toggleField) {
                var col = Q.first(dg.getGrid().getColumns(), function (x) { return x.field == options.toggleField; });
                col.format = TreeGridMixin.treeToggle(function () { return dg.view; }, getId, col.format || (function (ctx) { return Q.htmlEncode(ctx.value); }));
                col.formatter = Serenity.SlickHelper.convertToFormatter(col.format);
            }
        }
        /**
         * Expands / collapses all rows in a grid automatically
         */
        TreeGridMixin.prototype.toggleAll = function () {
            Serenity.SlickTreeHelper.setCollapsed(this.dataGrid.view.getItems(), !this.dataGrid.view.getItems().every(function (x) { return x._collapsed == true; }));
            this.dataGrid.view.setItems(this.dataGrid.view.getItems(), true);
        };
        TreeGridMixin.prototype.expandAll = function () {
            Serenity.SlickTreeHelper.setCollapsed(this.dataGrid.view.getItems(), false);
            this.dataGrid.view.setItems(this.dataGrid.view.getItems(), true);
        };
        TreeGridMixin.prototype.collapsedAll = function () {
            Serenity.SlickTreeHelper.setCollapsed(this.dataGrid.view.getItems(), true);
            this.dataGrid.view.setItems(this.dataGrid.view.getItems(), true);
        };
        /**
         * Reorders a set of items so that parents comes before their children.
         * This method is required for proper tree ordering, as it is not so easy to perform with SQL.
         * @param items list of items to be ordered
         * @param getId a delegate to get ID of a record (must return same ID with grid identity field)
         * @param getParentId a delegate to get parent ID of a record
         */
        TreeGridMixin.applyTreeOrdering = function (items, getId, getParentId) {
            var result = [];
            var byId = Q.toGrouping(items, getId);
            var byParentId = Q.toGrouping(items, getParentId);
            var visited = {};
            function takeChildren(theParentId) {
                if (visited[theParentId])
                    return;
                visited[theParentId] = true;
                for (var _i = 0, _a = (byParentId[theParentId] || []); _i < _a.length; _i++) {
                    var child = _a[_i];
                    result.push(child);
                    takeChildren(getId(child));
                }
            }
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                var parentId = getParentId(item);
                var hasParent = parentId != null;
                var parent_1 = byId[parentId];
                var isRootItem = !hasParent || !(parent_1 || []).length;
                if (isRootItem) {
                    result.push(item);
                    takeChildren(getId(item));
                }
            }
            return result;
        };
        TreeGridMixin.filterById = function (item, view, idProperty, getParentId) {
            return Serenity.SlickTreeHelper.filterCustom(item, function (x) {
                var parentId = getParentId(x);
                if (parentId == null) {
                    return null;
                }
                var items = view.getItems();
                var parentItem = items.filter(function (f) { return f[idProperty] == parentId; })[0];
                return parentItem;
            });
        };
        TreeGridMixin.treeToggle = function (getView, getId, formatter) {
            return function (ctx) {
                var text = formatter(ctx);
                var view = getView();
                var indent = Q.coalesce(ctx.item._indent, 0);
                var spacer = '<span class="s-TreeIndent" style="width:' + 15 * indent + 'px"></span>';
                var id = getId(ctx.item);
                var idx = view.getIdxById(ctx.item.__id || id);
                var next = view.getItemByIdx(idx + 1);
                if (next != null) {
                    var nextIndent = Q.coalesce(next._indent, 0);
                    if (nextIndent > indent) {
                        if (!!!!ctx.item._collapsed) {
                            return spacer + '<span class="s-TreeToggle s-TreeExpand"></span>' + text;
                        }
                        else {
                            return spacer + '<span class="s-TreeToggle s-TreeCollapse"></span>' + text;
                        }
                    }
                }
                return spacer + '<span class="s-TreeToggle"></span>' + text;
            };
        };
        TreeGridMixin.toggleClick = function (e, row, cell, view, getId) {
            var target = $(e.target);
            if (!target.hasClass('s-TreeToggle')) {
                return;
            }
            if (target.hasClass('s-TreeCollapse') || target.hasClass('s-TreeExpand')) {
                var item = view.getItem(row);
                if (item != null) {
                    if (!!!item._collapsed) {
                        item._collapsed = true;
                    }
                    else {
                        item._collapsed = false;
                    }
                    var id = getId(item);
                    view.updateItem(item.__id || id, item); //to support in-memory grid we check fake item.__id
                }
                if (e.shiftKey) {
                    view.beginUpdate();
                    try {
                        Serenity.SlickTreeHelper.setCollapsed(view.getItems(), !!item._collapsed);
                        view.setItems(view.getItems(), true);
                    }
                    finally {
                        view.endUpdate();
                    }
                }
            }
        };
        return TreeGridMixin;
    }());
    _Ext.TreeGridMixin = TreeGridMixin;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ExcelExportHelper;
    (function (ExcelExportHelper) {
        function createToolButton(options) {
            return {
                hint: Q.coalesce(options.title, 'Excel'),
                title: Q.coalesce(options.hint, ''),
                cssClass: 'export-xlsx-button',
                onClick: function () {
                    if (!options.onViewSubmit()) {
                        return;
                    }
                    var grid = options.grid;
                    var request = Q.deepClone(grid.getView().params);
                    request.Take = 0;
                    request.Skip = 0;
                    var sortBy = grid.getView().sortBy;
                    if (sortBy) {
                        request.Sort = sortBy;
                    }
                    request.IncludeColumns = [];
                    var columns = grid.getGrid().getColumns();
                    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
                        var column = columns_2[_i];
                        request.IncludeColumns.push(column.id || column.field);
                    }
                    Q.postToService({ service: options.service, request: request, target: '_blank' });
                },
                separator: options.separator
            };
        }
        ExcelExportHelper.createToolButton = createToolButton;
    })(ExcelExportHelper = _Ext.ExcelExportHelper || (_Ext.ExcelExportHelper = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var PdfExportHelper;
    (function (PdfExportHelper) {
        function toAutoTableColumns(srcColumns, columnStyles, columnTitles) {
            return srcColumns.map(function (src) {
                var col = {
                    dataKey: src.id || src.field,
                    title: src.name || ''
                };
                if (columnTitles && columnTitles[col.dataKey] != null)
                    col.title = columnTitles[col.dataKey];
                var style = {};
                if ((src.cssClass || '').indexOf("align-right") >= 0)
                    style.halign = 'right';
                else if ((src.cssClass || '').indexOf("align-center") >= 0)
                    style.halign = 'center';
                columnStyles[col.dataKey] = style;
                return col;
            });
        }
        function toAutoTableData(entities, keys, srcColumns) {
            var el = document.createElement('span');
            var row = 0;
            return entities.map(function (item) {
                var dst = {};
                for (var cell = 0; cell < srcColumns.length; cell++) {
                    var src = srcColumns[cell];
                    var fld = src.field || '';
                    var key = keys[cell];
                    var txt = void 0;
                    var html = void 0;
                    if (src.formatter) {
                        html = src.formatter(row, cell, item[fld], src, item);
                    }
                    else if (src.format) {
                        html = src.format({ row: row, cell: cell, item: item, value: item[fld] });
                    }
                    else {
                        dst[key] = item[fld];
                        continue;
                    }
                    html = html + ""; //error indexOf, convert to string when number
                    if (!html || (html.indexOf('<') < 0 && html.indexOf('&') < 0))
                        dst[key] = html;
                    else {
                        el.innerHTML = html;
                        if (el.children.length == 1 &&
                            $(el.children[0]).is(":input")) {
                            dst[key] = $(el.children[0]).val();
                        }
                        else if (el.children.length == 1 &&
                            $(el.children).is('.check-box')) {
                            dst[key] = $(el.children).hasClass("checked") ? "Yes" : "No";
                        }
                        else
                            dst[key] = el.textContent || '';
                    }
                }
                row++;
                return dst;
            });
        }
        function exportToPdf(options) {
            var g = options.grid;
            if (!options.onViewSubmit())
                return;
            includeAutoTable();
            var request = Q.deepClone(g.view.params);
            request.Take = 0;
            request.Skip = 0;
            var sortBy = g.view.sortBy;
            if (sortBy != null)
                request.Sort = sortBy;
            var gridColumns = g.slickGrid.getColumns();
            gridColumns = gridColumns.filter(function (x) { return x.id !== "__select__" && x.name.length > 0; });
            request.IncludeColumns = [];
            for (var _i = 0, gridColumns_2 = gridColumns; _i < gridColumns_2.length; _i++) {
                var column = gridColumns_2[_i];
                request.IncludeColumns.push(column.id || column.field);
            }
            Q.serviceCall({
                url: g.view.url,
                request: request,
                onSuccess: function (response) {
                    var doc = new jsPDF('l', 'pt');
                    var groupings = g.view.getGrouping(); //group fields
                    var groupingColumns = gridColumns.filter(function (f) { return groupings.some(function (s) { return s.getter == f.field; }) == true; });
                    var srcColumns = gridColumns.filter(function (f) { return groupings.some(function (s) { return s.getter == f.field; }) == false; });
                    var columnStyles = {};
                    var columns = toAutoTableColumns(srcColumns, columnStyles, options.columnTitles);
                    var keys = columns.filter(function (f) { return groupings.some(function (s) { return s.getter == f; }) == false; }).map(function (x) { return x.dataKey; });
                    var totalPagesExp = "{{T}}";
                    var pageNumbers = options.pageNumbers == null || options.pageNumbers;
                    var autoOptions = $.extend({
                        margin: { top: 40, left: 40, right: 40, bottom: pageNumbers ? 110 : 100 },
                        startY: 90,
                        styles: {
                            fontSize: 8,
                            // overflow: 'linebreak',
                            cellPadding: 5,
                            valign: 'middle',
                            lineColor: 0,
                        },
                        headerStyles: { fillColor: 255, textColor: 0, lineWidth: 1, fillStyle: 'S', halign: 'center', valign: 'middle' },
                        columnStyles: columnStyles
                    }, options.tableOptions);
                    ///region Title
                    {
                        if (q.jsPDFHeaderImageData) {
                            doc.addImage(q.jsPDFHeaderImageData, 'PNG', 40, 40, 60, 60);
                        }
                        doc.autoTable([q.jsPDFHeaderTitle], [], {
                            margin: { bottom: 10, left: 110 },
                            startY: options.titleTop || 45,
                            headerStyles: { fillColor: 255, textColor: 0 },
                            styles: { halign: 'left', fontSize: 18 }
                        });
                        var reportTitle = '';
                        if (groupingColumns[0])
                            reportTitle = groupingColumns.map(function (m) { return m.name; }).join(', ') + ' wise ';
                        reportTitle += options.reportTitle || g.getTitle();
                        reportTitle += " Report";
                        doc.autoTable([reportTitle], [], {
                            margin: { top: 10, bottom: 10, left: 110 },
                            startY: doc.autoTableEndPosY(),
                            headerStyles: { fillColor: 255, textColor: 0 },
                            styles: { halign: 'left', fontSize: 14 }
                        });
                    }
                    ///region Header
                    {
                        var header = function (data) {
                        };
                        autoOptions.beforePageContent = header;
                    }
                    ///region Footer
                    {
                        if (pageNumbers) {
                            var footer = function (data) {
                                var str = data.pageCount;
                                // Total page number plugin only available in jspdf v1.0+
                                if (typeof doc.putTotalPages === 'function') {
                                    str = str + " / " + totalPagesExp;
                                }
                                doc.autoTableText(str, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - autoOptions.margin.bottom, {
                                    halign: 'center'
                                });
                            };
                            autoOptions.afterPageContent = footer;
                        }
                    }
                    ///region Content
                    {
                        //extra space after title
                        doc.autoTable([''], [], {
                            startY: doc.autoTableEndPosY() + 20,
                            headerStyles: { fillColor: 255, textColor: 0 }
                        });
                        var headerHeight = 125;
                        var headerFontSizeBase = 11;
                        var entities = response.Entities || [];
                        g.setItems(entities);
                        var groups = g.view.getGroups(); //grouped data
                        if (groups.length > 0) {
                            var ggg = function (grps, parentGroupIndex) {
                                var endPosY = doc.autoTableEndPosY();
                                for (var i = 0; i < grps.length; i++) {
                                    var group = grps[i];
                                    var level = group.level + 1;
                                    doc.autoTable([group.title], [], {
                                        margin: { left: 30 + level * 10, top: 2 },
                                        startY: doc.autoTableEndPosY(),
                                        headerStyles: { fillColor: 255, textColor: 0, fontSize: 10 - group.level, cellPadding: 0 }
                                    });
                                    if (group.groups) {
                                        ggg(group.groups, i);
                                    }
                                    else {
                                        var data = toAutoTableData(group.rows, keys, srcColumns);
                                        autoOptions.startY = doc.autoTableEndPosY();
                                        autoOptions.margin.left = 30 + level * 10;
                                        autoOptions.margin.bottom = 10;
                                        doc.autoTable(columns, data, autoOptions);
                                        //for extra space
                                        doc.autoTable([''], [], {
                                            margin: { left: 30 + level * 10, top: 2 },
                                            startY: doc.autoTableEndPosY() + 10,
                                            headerStyles: { fillColor: 255, textColor: 0 }
                                        });
                                    }
                                }
                            };
                            ggg(groups, -1);
                        }
                        else {
                            var data = toAutoTableData(g.getItems(), keys, srcColumns);
                            autoOptions.startY = headerHeight;
                            doc.autoTable(columns, data, autoOptions);
                        }
                    }
                    if (typeof doc.putTotalPages === 'function') {
                        doc.putTotalPages(totalPagesExp);
                    }
                    if (!options.output || options.output == "file") {
                        var fileName = options.reportTitle || "{0}_{1}.pdf";
                        fileName = Q.format(fileName, g.getTitle() || "report", Q.formatDate(new Date(), "yyyyMMdd_HHmm"));
                        doc.save(fileName);
                        return;
                    }
                    if (options.autoPrint)
                        doc.autoPrint();
                    var output = options.output;
                    if (output == 'newwindow' || '_blank')
                        output = 'dataurlnewwindow';
                    else if (output == 'window')
                        output = 'datauri';
                    doc.output(output);
                }
            });
        }
        PdfExportHelper.exportToPdf = exportToPdf;
        function createToolButton(options) {
            return {
                title: options.title || '',
                hint: options.hint || 'PDF',
                cssClass: 'export-pdf-button',
                onClick: function () { return exportToPdf(options); },
                separator: options.separator
            };
        }
        PdfExportHelper.createToolButton = createToolButton;
        function includeJsPDF() {
            if (typeof jsPDF !== "undefined")
                return;
            var script = $("jsPDFScript");
            if (script.length > 0)
                return;
            $("<script/>")
                .attr("type", "text/javascript")
                .attr("id", "jsPDFScript")
                .attr("src", Q.resolveUrl("~/Scripts/jspdf.min.js"))
                .appendTo(document.head);
        }
        function includeAutoTable() {
            includeJsPDF();
            if (typeof jsPDF === "undefined" ||
                typeof jsPDF.API == "undefined" ||
                typeof jsPDF.API.autoTable !== "undefined")
                return;
            var script = $("jsPDFAutoTableScript");
            if (script.length > 0)
                return;
            $("<script/>")
                .attr("type", "text/javascript")
                .attr("id", "jsPDFAutoTableScript")
                .attr("src", Q.resolveUrl("~/Scripts/jspdf.plugin.autotable.min.js"))
                .appendTo(document.head);
        }
    })(PdfExportHelper = _Ext.PdfExportHelper || (_Ext.PdfExportHelper = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var ReportHelper;
    (function (ReportHelper) {
        function createToolButton(options) {
            return {
                title: Q.coalesce(options.title, 'Report'),
                cssClass: Q.coalesce(options.cssClass, 'print-button'),
                icon: options.icon,
                onClick: function () {
                    ReportHelper.execute(options);
                }
            };
        }
        ReportHelper.createToolButton = createToolButton;
        function execute(options) {
            var opt = options.getParams ? options.getParams() : options.params;
            Q.postToUrl({
                url: '~/Report/' + (options.download ? 'Download' : 'Render'),
                params: {
                    key: options.reportKey,
                    ext: Q.coalesce(options.extension, 'pdf'),
                    opt: opt ? $.toJSON(opt) : ''
                },
                target: Q.coalesce(options.target, '_blank')
            });
        }
        ReportHelper.execute = execute;
    })(ReportHelper = _Ext.ReportHelper || (_Ext.ReportHelper = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var DialogUtils;
    (function (DialogUtils) {
        function pendingChangesConfirmation(element, hasPendingChanges) {
            element.bind('dialogbeforeclose', function (e) {
                if (!Serenity.WX.hasOriginalEvent(e) || !hasPendingChanges()) {
                    return;
                }
                e.preventDefault();
                Q.confirm('You have pending changes. Save them?', function () { return element.find('div.save-and-close-button').click(); }, {
                    onNo: function () {
                        element.dialog().dialog('close');
                    }
                });
            });
        }
        DialogUtils.pendingChangesConfirmation = pendingChangesConfirmation;
    })(DialogUtils = _Ext.DialogUtils || (_Ext.DialogUtils = {}));
})(_Ext || (_Ext = {}));
function loadScriptAsync(url, callback) {
    // Adding the script tag to the head as suggested before
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    // Then bind the event to the callback function.
    // There are several events for cross browser compatibility.
    script.onload = callback;
    // Fire the loading
    head.appendChild(script);
}
function loadScript(url) {
    $.ajax({
        url: url,
        dataType: "script",
        async: false,
        cache: true,
        success: function () {
            // all good...
        },
        error: function () {
            throw new Error("Could not load script " + url);
        }
    });
}
function usingVuejs() {
    if (window['Vue']) {
        return;
    }
    else {
        loadScript(Q.resolveUrl("~/Scripts/vue.js"));
        //filters
        window['Vue'].filter('formatDate', function (value, format) {
            if (value) {
                return Q.formatDate(value, format);
            }
        });
        window['Vue'].filter('formatDateReadable', function (value) {
            if (value) {
                var date = Q.parseISODateTime(value);
                return date.getDate() + ' ' + _Ext.Months[date.getMonth()].substr(0, 3) + ' ' + date.getFullYear();
            }
        });
        window['Vue'].filter('dayOnly', function (value) {
            if (value) {
                return Q.formatDate(value, 'dd');
            }
        });
        window['Vue'].filter('monthOnly', function (value) {
            if (value) {
                var date = Q.parseISODateTime(value);
                return _Ext.Months[date.getMonth()];
            }
        });
        window['Vue'].filter('monthOnly3', function (value) {
            if (value) {
                var date = Q.parseISODateTime(value);
                return _Ext.Months[date.getMonth()].substr(0, 3);
            }
        });
        window['Vue'].filter('yearOnly', function (value) {
            if (value) {
                var date = Q.parseISODateTime(value);
                return date.getFullYear();
            }
        });
        window['Vue'].filter('timeOnlyHHmm', function (value) {
            if (value) {
                return Q.formatDate(value, 'HH:mm');
            }
        });
        window['Vue'].filter('formatDateTimeReadable', function (value) {
            if (value) {
                var date = Q.parseISODateTime(value);
                return date.getDate() + ' ' + _Ext.Months[date.getMonth()] + ' ' + date.getFullYear()
                    + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
            }
        });
        window['Vue'].filter('enumText', function (value, enumKey) {
            if (value) {
                return Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), value);
            }
        });
        window['Vue'].filter('truncate', function (text, length, clamp) {
            clamp = clamp || '...';
            length = length || 30;
            if (text.length <= length)
                return text;
            var tcText = text.slice(0, length - clamp.length);
            var last = tcText.length - 1;
            while (last > 0 && tcText[last] !== ' ' && tcText[last] !== clamp[0])
                last -= 1;
            // Fix for case when text dont have any `space`
            last = last || length - clamp.length;
            tcText = tcText.slice(0, last);
            return tcText + clamp;
        });
        window['Vue'].filter('capitalize', function (value) {
            if (!value)
                return '';
            value = value.toString();
            return value.charAt(0).toUpperCase() + value.toLowerCase().slice(1);
        });
    }
}
function includeBootstrapColorPickerCss() {
    var style = $("#colorpicker");
    if (style.length > 0) {
        return;
    }
    $("<link/>")
        .attr("type", "text/css")
        .attr("id", "colorpicker")
        .attr("rel", "stylesheet")
        .attr("href", Q.resolveUrl("~/Scripts/colorpicker/bootstrap-colorpicker.min.css"))
        .appendTo(document.head);
}
function usingBootstrapColorPicker() {
    if (window['colorpicker']) {
        return;
    }
    else {
        includeBootstrapColorPickerCss();
        loadScript(Q.resolveUrl("~/Scripts/colorpicker/bootstrap-colorpicker.min.js"));
    }
}
function includeJqueryUITimepickerAddonCss() {
    var style = $("#datetimepicker");
    if (style.length > 0) {
        return;
    }
    $("<link/>")
        .attr("type", "text/css")
        .attr("id", "datetimepicker")
        .attr("rel", "stylesheet")
        .attr("href", Q.resolveUrl("~/Content/jquery-ui-timepicker-addon.css"))
        .appendTo(document.head);
}
function usingJqueryUITimepickerAddon() {
    if (window['datetimepicker']) {
        return;
    }
    else {
        includeJqueryUITimepickerAddonCss();
        loadScript(Q.resolveUrl("~/Scripts/jquery-ui-timepicker-addon.js"));
    }
}
function usingBabylonjs() {
    if (window['BABYLON'] && window['BABYLON']['Engine']) {
        return;
    }
    else {
        loadScript(Q.resolveUrl("~/Scripts/babylonjs/babylon.js"));
    }
}
function usingChartjs() {
    if (window['Chart']) {
        return;
    }
    else {
        loadScript(Q.resolveUrl('~/Scripts/chartjs/Chart.js'));
    }
}
function includeCustomMarkerCss() {
    var style = $("#customMarker");
    if (style.length > 0) {
        return;
    }
    $("<link/>")
        .attr("type", "text/css")
        .attr("id", "customMarker")
        .attr("rel", "stylesheet")
        .attr("href", Q.resolveUrl("~/Scripts/googlemap/CustomMarker.css"))
        .appendTo(document.head);
}
function usingCustomMarker() {
    if (window['CustomMarker']) {
        return;
    }
    else {
        includeCustomMarkerCss();
        loadScript(Q.resolveUrl("~/Scripts/googlemap/CustomMarker.js"));
    }
}
function includeGoogleMap(callback, callbackFullName) {
    if (window['google']) {
        if (callback)
            callback();
        return;
    }
    var script = $("#googleScript");
    if (script.length > 0) {
        if (callback)
            callback();
        return;
    }
    $("<script/>")
        .attr("type", "text/javascript")
        .attr("id", "googleScript")
        .attr("src", 'http://maps.google.com/maps/api/js?v=3.31&key=AIzaSyCRiY7aFA2cI6STbl3YQ3r6m1IpUFmBM98&callback=' + callbackFullName || 'includeGoogleMap')
        .appendTo(document.head);
}
function includeMarkerWithLabel() {
    if (window['MarkerWithLabel']) {
        return;
    }
    var script = $("#MarkerWithLabelScript");
    if (script.length > 0) {
        return;
    }
    $("<script/>")
        .attr("type", "text/javascript")
        .attr("id", "MarkerWithLabelScript")
        .attr("src", Q.resolveUrl("~/Scripts/googlemap/markerwithlabel.js"))
        .appendTo(document.head);
}
function includeVisCss() {
    var style = $("#Vis");
    if (style.length > 0) {
        return;
    }
    $("<link/>")
        .attr("type", "text/css")
        .attr("id", "Vis")
        .attr("rel", "stylesheet")
        .attr("href", Q.resolveUrl("~/Scripts/visjs/vis.min.css"))
        .appendTo(document.head);
}
function usingVisjs() {
    if (window['vis']) {
        return;
    }
    else {
        includeVisCss();
        loadScript(Q.resolveUrl("~/Scripts/visjs/vis.min.js"));
    }
}
function usingJsonDiffPatch() {
    if (window['jsondiffpatch']) {
        return;
    }
    else {
        $("<link/>").attr("type", "text/css").attr("id", "JsonDiffPatch").attr("rel", "stylesheet")
            .attr("href", Q.resolveUrl("~/Modules/_Ext/AuditLogViewer/jsondiffpatch/formatters-styles/html.css"))
            .appendTo(document.head);
        loadScript(Q.resolveUrl("~/Modules/_Ext/AuditLogViewer/jsondiffpatch/jsondiffpatch.min.js"));
        loadScript(Q.resolveUrl("~/Modules/_Ext/AuditLogViewer/jsondiffpatch/jsondiffpatch-formatters.min.js"));
    }
}
function usingSlickGridEditors() {
    if (window['Slick'] && window['Slick']['Editors'] && window['Slick']['Editors']['Text']) {
        return;
    }
    else {
        loadScript(Q.resolveUrl("~/Modules/_Ext/Editors/slick.editors.js"));
    }
}
function usingSlickAutoColumnSize() {
    if (window['Slick'] && window['Slick']['AutoColumnSize']) {
        return;
    }
    else {
        loadScript(Q.resolveUrl("~/Modules/_Ext/CustomSlickGridPlugin/slick.autocolumnsize.js"));
    }
}
function usingSlickHeaderFilters() {
    if (window['Slick'] && window['Slick']['HeaderFilters']) {
        return;
    }
    else {
        $("<link/>")
            .attr("type", "text/css")
            .attr("id", "CustomSlickGridPlugin")
            .attr("rel", "stylesheet")
            .attr("href", Q.resolveUrl("~/Modules/_Ext/CustomSlickGridPlugin/slick-headerfilters.css"))
            .appendTo(document.head);
        loadScript(Q.resolveUrl("~/Modules/_Ext/CustomSlickGridPlugin/slick.headerfilters.js"));
    }
}
function usingJsRender() {
    if (window['$.templates'] || window['$.views']) {
        return;
    }
    else {
        //includeBootstrapColorPickerCss();
        loadScript(Q.resolveUrl("~/Scripts/jsrender.js"));
    }
}
var q;
(function (q) {
    function groupBy(xs, key) {
        return xs.reduce(function (rv, x) {
            (rv[x[key]] = rv[x[key]] || []).push(x);
            return rv;
        }, {});
    }
    q.groupBy = groupBy;
    function sortBy(xs, key) {
        return xs.sort(function (a, b) {
            if (a[key] < b[key]) {
                return -1;
            }
            if (a[key] > b[key]) {
                return 1;
            }
            return 0;
        });
    }
    q.sortBy = sortBy;
    function sortByDesc(xs, key) {
        return xs.sort(function (a, b) {
            if (a[key] > b[key]) {
                return -1;
            }
            if (a[key] < b[key]) {
                return 1;
            }
            return 0;
        });
    }
    q.sortByDesc = sortByDesc;
})(q || (q = {}));
var q;
(function (q) {
    function nextTick(date) {
        return new Date(date.getTime() + 1);
    }
    q.nextTick = nextTick;
    function addMinutes(date, minutes) {
        return new Date(date.getTime() + minutes * 60000);
    }
    q.addMinutes = addMinutes;
    function addHours(date, hours) {
        return new Date(date.getTime() + hours * 3600000);
    }
    q.addHours = addHours;
    function getHours(fromDate, toDate) {
        var hours = 0;
        if (fromDate && toDate) {
            var totalMiliSeconds = toDate.valueOf() - fromDate.valueOf();
            hours = totalMiliSeconds / (1000 * 60 * 60);
        }
        return hours;
    }
    q.getHours = getHours;
    function getDays24HourPulse(fromDate, toDate) {
        var days = q.getHours(fromDate, toDate) / 24;
        return Math.ceil(days);
    }
    q.getDays24HourPulse = getDays24HourPulse;
    function getDays(pFromDate, pToDate) {
        var fromDate = new Date(pFromDate.getFullYear(), pFromDate.getMonth(), pFromDate.getDate());
        var toDate = new Date(pToDate.getFullYear(), pToDate.getMonth(), pToDate.getDate(), 23, 59, 59);
        var days = q.getHours(fromDate, toDate) / 24;
        //days = days <= 0 ? 1 : days;
        return Math.ceil(days);
    }
    q.getDays = getDays;
    function getMonths(fromDate, toDate) {
        var months = q.getDays24HourPulse(fromDate, toDate) / 30;
        return Math.ceil(months);
    }
    q.getMonths = getMonths;
    function getCalenderMonths(fromDate, toDate) {
        var months;
        months = (toDate.getFullYear() - fromDate.getFullYear()) * 12;
        months -= fromDate.getMonth();
        months += toDate.getMonth();
        return months <= 0 ? 0 : months;
    }
    q.getCalenderMonths = getCalenderMonths;
    function getCalenderMonthsCeil(fromDate, toDate) {
        var months = q.getCalenderMonths(fromDate, toDate);
        return months == 0 ? 1 : months;
    }
    q.getCalenderMonthsCeil = getCalenderMonthsCeil;
    function addDays(date, days) {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }
    q.addDays = addDays;
    function addMonths(date, months) {
        var result = new Date(date);
        result.setMonth(result.getMonth() + months);
        return result;
    }
    q.addMonths = addMonths;
    function addYear(date, years) {
        var result = new Date(date);
        result.setFullYear(result.getFullYear() + years);
        return result;
    }
    q.addYear = addYear;
    function getPeriods(fromDate, toDate, periodUnit) {
        if (periodUnit == _Ext.TimeUoM.Day) {
            var days = q.getDays(fromDate, toDate);
            return days;
        }
        else if (periodUnit == _Ext.TimeUoM.Month) {
            var months = q.getMonths(fromDate, toDate);
            return months == 0 ? 1 : months;
        }
        else if (periodUnit == _Ext.TimeUoM.CalenderMonth) {
            var calenderMonths = q.getCalenderMonths(fromDate, toDate);
            return calenderMonths + 1;
        }
    }
    q.getPeriods = getPeriods;
    function addPeriod(date, period, periodUnit) {
        var result = new Date(date);
        if (periodUnit == _Ext.TimeUoM.Day)
            result.setDate(result.getDate() + period);
        else if (periodUnit == _Ext.TimeUoM.Month)
            result.setMonth(result.getMonth() + period);
        else if (periodUnit == _Ext.TimeUoM.CalenderMonth) {
            result.setDate(1);
            result.setMonth(result.getMonth() + period);
        }
        return result;
    }
    q.addPeriod = addPeriod;
    function formatISODate(date) {
        if (date) {
            var offset = date.getTimezoneOffset();
            var result = new Date(date.getTime() - offset * 60 * 1000);
            return result.toISOString();
        }
        else
            return null;
    }
    q.formatISODate = formatISODate;
    //editor utils
    function bindDateTimeEditorChange(editor, handler) {
        editor.change(handler);
        editor.element.closest('.field').find('.time').change(handler);
        editor.element.closest('.field').find('.inplace-now').click(handler);
    }
    q.bindDateTimeEditorChange = bindDateTimeEditorChange;
    function initDateRangeEditor(fromDateEditor, toDateEditor, onChangeHandler) {
        var startDateTextBox = fromDateEditor.element;
        var endDateTextBox = toDateEditor.element;
        startDateTextBox.datepicker('option', 'onClose', function (dateText, inst) {
            if (endDateTextBox.val() != '') {
                var testStartDate = startDateTextBox.datepicker('getDate');
                var testEndDate = endDateTextBox.datepicker('getDate');
                if (testStartDate > testEndDate)
                    endDateTextBox.datepicker('setDate', testStartDate);
            }
            else {
                endDateTextBox.val(dateText);
            }
        });
        endDateTextBox.datepicker('option', 'minDate', startDateTextBox.datepicker('getDate'));
        startDateTextBox.datepicker('option', 'onSelect', function (selectedDateTime) {
            endDateTextBox.datepicker('option', 'minDate', startDateTextBox.datepicker('getDate'));
        });
        endDateTextBox.datepicker('option', 'onClose', function (dateText, inst) {
            if (startDateTextBox.val() != '') {
                var testStartDate = startDateTextBox.datepicker('getDate');
                var testEndDate = endDateTextBox.datepicker('getDate');
                if (testStartDate > testEndDate)
                    startDateTextBox.datepicker('setDate', testEndDate);
            }
            else {
                startDateTextBox.val(dateText);
            }
        });
        startDateTextBox.datepicker('option', 'maxDate', endDateTextBox.datepicker('getDate'));
        endDateTextBox.datepicker('option', 'onSelect', function (selectedDateTime) {
            startDateTextBox.datepicker('option', 'maxDate', endDateTextBox.datepicker('getDate'));
        });
        setTimeout(function () {
            fromDateEditor.change(onChangeHandler);
            toDateEditor.change(onChangeHandler);
        }, 500);
    }
    q.initDateRangeEditor = initDateRangeEditor;
    function initDateTimeRangeEditor(fromDateTimeEditor, toDateTimeEditor, onChangeHandler) {
        //fromDateTimeEditor.destroy();
        //toDateTimeEditor.destroy();
        var startDateTextBox = fromDateTimeEditor.element;
        var endDateTextBox = toDateTimeEditor.element;
        //startDateTextBox.datetimepicker('option', 'timeFormat', 'HH:mm z')
        startDateTextBox.datetimepicker('option', 'onClose', function (dateText, inst) {
            if (endDateTextBox.val() != '') {
                var testStartDate = startDateTextBox.datetimepicker('getDate');
                var testEndDate = endDateTextBox.datetimepicker('getDate');
                if (testStartDate > testEndDate)
                    endDateTextBox.datetimepicker('setDate', testStartDate);
            }
            else {
                endDateTextBox.val(dateText);
            }
        });
        endDateTextBox.datetimepicker('option', 'minDate', startDateTextBox.datetimepicker('getDate'));
        startDateTextBox.datetimepicker('option', 'onSelect', function (selectedDateTime) {
            endDateTextBox.datetimepicker('option', 'minDate', startDateTextBox.datetimepicker('getDate'));
        });
        //endDateTextBox.datetimepicker('option', 'timeFormat', 'HH:mm z')
        endDateTextBox.datetimepicker('option', 'onClose', function (dateText, inst) {
            if (startDateTextBox.val() != '') {
                var testStartDate = startDateTextBox.datetimepicker('getDate');
                var testEndDate = endDateTextBox.datetimepicker('getDate');
                if (testStartDate > testEndDate)
                    startDateTextBox.datetimepicker('setDate', testEndDate);
            }
            else {
                startDateTextBox.val(dateText);
            }
        });
        startDateTextBox.datetimepicker('option', 'maxDate', endDateTextBox.datetimepicker('getDate'));
        endDateTextBox.datetimepicker('option', 'onSelect', function (selectedDateTime) {
            startDateTextBox.datetimepicker('option', 'maxDate', endDateTextBox.datetimepicker('getDate'));
        });
        setTimeout(function () {
            fromDateTimeEditor.change(onChangeHandler);
            toDateTimeEditor.change(onChangeHandler);
        }, 500);
    }
    q.initDateTimeRangeEditor = initDateTimeRangeEditor;
    function formatDate(d, format) {
        if (!d) {
            return '';
        }
        var date;
        if (typeof d == "string") {
            var res = Q.parseDate(d);
            if (!res)
                return d;
            date = res;
        }
        else
            date = d;
        if (format == null || format == "d") {
            format = Q.Culture.dateFormat;
        }
        else {
            switch (format) {
                case "g":
                    format = Q.Culture.dateTimeFormat.replace(":ss", "");
                    break;
                case "G":
                    format = Q.Culture.dateTimeFormat;
                    break;
                case "s":
                    format = "yyyy-MM-ddTHH:mm:ss";
                    break;
                case "u": return Q.formatISODateTimeUTC(date);
            }
        }
        var pad = function (i) {
            return Q.zeroPad(i, 2);
        };
        return format.replace(new RegExp('dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|fff|zz?z?|\\/', 'g'), function (fmt) {
            var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            switch (fmt) {
                case '/': return Q.Culture.dateSeparator;
                case 'hh': return pad(((date.getHours() < 13) ? date.getHours() : (date.getHours() - 12)));
                case 'h': return ((date.getHours() < 13) ? date.getHours() : (date.getHours() - 12));
                case 'HH': return pad(date.getHours());
                case 'H': return date.getHours();
                case 'mm': return pad(date.getMinutes());
                case 'm': return date.getMinutes();
                case 'ss': return pad(date.getSeconds());
                case 's': return date.getSeconds();
                case 'yyyy': return date.getFullYear();
                case 'yy': return date.getFullYear().toString().substr(2, 4);
                case 'dddd': return days[date.getDay()];
                case 'ddd': return days[date.getDay()].substr(0, 3);
                case 'dd': return pad(date.getDate());
                case 'd': return date.getDate().toString();
                case 'MMMM': return months[date.getMonth()];
                case 'MMM': return months[date.getMonth()].substr(0, 3);
                case 'MM': return pad(date.getMonth() + 1);
                case 'M': return date.getMonth() + 1;
                case 't': return ((date.getHours() < 12) ? 'A' : 'P');
                case 'tt': return ((date.getHours() < 12) ? 'AM' : 'PM');
                case 'fff': return Q.zeroPad(date.getMilliseconds(), 3);
                case 'zzz':
                case 'zz':
                case 'z': return '';
                default: return fmt;
            }
        });
    }
    q.formatDate = formatDate;
})(q || (q = {}));
var q;
(function (q) {
    function initDetailEditor(dialog, editor, options) {
        if (options === void 0) { options = {}; }
        if (options.showCaption != true) {
            editor.element.siblings('.caption').hide();
        }
        if (options.hideToolbar == true) {
            editor.element.find('.grid-toolbar').hide();
        }
        if (options.isReadOnly == true) {
            editor.set_readOnly(options.isReadOnly);
        }
        editor.parentDialog = dialog;
        dialog.onAfterSetDialogSize = function () {
            var $gridContainer = editor.element.find('.grid-container');
            if (options.height) {
                editor.slickGrid.setOptions({ autoHeight: false });
                $gridContainer.height(options.height);
            }
            else {
                var top_1 = $gridContainer.position().top;
                var height = dialog.element.innerHeight() - top_1 - 40;
                if (height > 200)
                    $gridContainer.height(height);
            }
            if (options.width) {
                $gridContainer.width(options.width);
            }
            editor.slickGrid.resizeCanvas();
        };
    }
    q.initDetailEditor = initDetailEditor;
    function setGridEditorHeight(editor, heightInPx) {
        editor.css('height', heightInPx + 'px');
        editor.find('.grid-container')
            .css('height', (heightInPx - 25) + 'px')
            .height(heightInPx);
    }
    q.setGridEditorHeight = setGridEditorHeight;
    function addNotificationIcon(editor, isSuccess) {
        var isAddOnInitialized = editor.element.data('isAddOnInitialized');
        if (isAddOnInitialized != true) {
            editor.element.after('<span class="text text-danger" style="padding:3px"><i class="fa fa-times"></i></span>');
            editor.element.data('isAddOnInitialized', true);
        }
        if (isSuccess == true) {
            editor.element.switchClass('bg-danger', 'bg-success')
                .siblings('.text').switchClass('text-danger', 'text-success')
                .children().switchClass('fa-times', 'fa-check');
        }
        else {
            editor.element.switchClass('bg-success', 'bg-danger')
                .siblings('.text').switchClass('text-success', 'text-danger')
                .children().switchClass('fa-check', 'fa-times');
        }
    }
    q.addNotificationIcon = addNotificationIcon;
    function setEditorLabel(editor, value) {
        editor.element.siblings('label').text(value);
    }
    q.setEditorLabel = setEditorLabel;
    function hideEditorLabel(editor) {
        editor.element.siblings('label').hide();
    }
    q.hideEditorLabel = hideEditorLabel;
    function setEditorCategoryLabel(editor, value) {
        var categoryAnchor = editor.element.closest('.category').find('.category-anchor');
        categoryAnchor.text(value);
        var categoryAnchorName = categoryAnchor.attr('name');
        categoryAnchor.closest('.s-PropertyGrid').find("a[href='#" + categoryAnchorName + "']").text(value);
    }
    q.setEditorCategoryLabel = setEditorCategoryLabel;
    function hideEditorCategory(editor, value) {
        if (value === void 0) { value = true; }
        if (value == true)
            editor.element.closest('.category').hide();
        else
            editor.element.closest('.category').show();
        var categoryAnchor = editor.element.closest('.category').find('.category-anchor');
        var categoryAnchorName = categoryAnchor.attr('name');
        if (value == true)
            categoryAnchor.closest('.s-PropertyGrid').find("a[href='#" + categoryAnchorName + "']").hide();
        else
            categoryAnchor.closest('.s-PropertyGrid').find("a[href='#" + categoryAnchorName + "']").show();
    }
    q.hideEditorCategory = hideEditorCategory;
    function hideCategories(containerElement, value) {
        if (value === void 0) { value = true; }
        if (value == true)
            containerElement.find('.category').hide();
        else
            containerElement.find('.category').show();
        var categoryAnchor = containerElement.find('.category').find('.category-anchor');
        var categoryAnchorName = categoryAnchor.attr('name');
        if (value == true)
            categoryAnchor.closest('.s-PropertyGrid').find("a[href='#" + categoryAnchorName + "']").hide();
        else
            categoryAnchor.closest('.s-PropertyGrid').find("a[href='#" + categoryAnchorName + "']").show();
    }
    q.hideCategories = hideCategories;
    function hideFields(containerElement, value) {
        if (value === void 0) { value = true; }
        if (value == true)
            containerElement.find('.field').hide();
        else
            containerElement.find('.field').show();
    }
    q.hideFields = hideFields;
    function hideFieldsAndCategories(containerElement, value) {
        if (value === void 0) { value = true; }
        hideFields(containerElement);
        hideCategories(containerElement);
    }
    q.hideFieldsAndCategories = hideFieldsAndCategories;
    function hideField(editor, value) {
        if (value === void 0) { value = true; }
        if (editor) {
            if (value == true)
                editor.element.closest('.field').hide();
            else
                editor.element.closest('.field').show();
        }
    }
    q.hideField = hideField;
    function showField(editor, value) {
        if (value === void 0) { value = true; }
        if (editor) {
            if (value == true)
                editor.element.closest('.field').show();
            else
                editor.element.closest('.field').hide();
        }
    }
    q.showField = showField;
    function showFieldAndCategory(editor, value) {
        if (value === void 0) { value = true; }
        showField(editor, value);
        if (value == true)
            hideEditorCategory(editor, false);
    }
    q.showFieldAndCategory = showFieldAndCategory;
    function hideEditorTab(editor, value) {
        if (value === void 0) { value = true; }
        var tabId = editor.element.closest('.tab-pane').hide().attr('id');
        var tabAnchor = editor.element.closest('.s-PropertyGrid').find("a[href='#" + tabId + "']");
        tabAnchor.closest('li').hide();
    }
    q.hideEditorTab = hideEditorTab;
    function readOnlyEditorTab(editor, value) {
        if (value === void 0) { value = true; }
        var $editors = editor.element.closest('.tab-pane').find('.editor');
        Serenity.EditorUtils.setReadonly($editors, value);
    }
    q.readOnlyEditorTab = readOnlyEditorTab;
    function readOnlyEditorCategory(editor, value) {
        if (value === void 0) { value = true; }
        var $editors = editor.element.closest('.category').find('.editor');
        Serenity.EditorUtils.setReadonly($editors, value);
    }
    q.readOnlyEditorCategory = readOnlyEditorCategory;
    function readonlyEditorCategory($editor, value) {
        if (value === void 0) { value = true; }
        var $editors = $editor.closest('.category').find('.editor');
        Serenity.EditorUtils.setReadonly($editors, value);
    }
    q.readonlyEditorCategory = readonlyEditorCategory;
    function readOnlyEditor(editor, value) {
        if (value === void 0) { value = true; }
        Serenity.EditorUtils.setReadOnly(editor, value);
    }
    q.readOnlyEditor = readOnlyEditor;
    function readonlyEditor($editor, value) {
        if (value === void 0) { value = true; }
        Serenity.EditorUtils.setReadonly($editor, value);
    }
    q.readonlyEditor = readonlyEditor;
    function moveEditorFromTab(editor, toElement, isPrepend) {
        if (isPrepend === void 0) { isPrepend = false; }
        var fieldDiv = editor.element.closest('.field');
        if (isPrepend == true)
            fieldDiv.prependTo(toElement);
        else
            fieldDiv.appendTo(toElement);
    }
    q.moveEditorFromTab = moveEditorFromTab;
    function moveEditorCategoryFromTab(editor, toElement, isPrepend) {
        if (isPrepend === void 0) { isPrepend = false; }
        var fieldDiv = editor.element.closest('.field');
        var categoryDiv = editor.element.closest('.category');
        if (isPrepend == true)
            categoryDiv.prependTo(toElement);
        else
            categoryDiv.appendTo(toElement);
        //hide category navigation link
        var categoryAnchor = categoryDiv.find('.category-anchor');
        var categoryAnchorName = categoryAnchor.attr('name');
        categoryAnchor.closest('.s-PropertyGrid').find("a[href='#" + categoryAnchorName + "']").hide();
    }
    q.moveEditorCategoryFromTab = moveEditorCategoryFromTab;
    function selectEditorTab(editor) {
        var tabId = editor.element.closest('.tab-pane').attr('id');
        var tabAnchor = editor.element.closest('.s-PropertyGrid').find("a[href='#" + tabId + "']");
        tabAnchor.tab('show');
    }
    q.selectEditorTab = selectEditorTab;
    // for select2 lookup editor
    function getSelectedRow(e) {
        var selectedItem = e.added;
        var selectedRow = selectedItem.source;
        return selectedRow;
    }
    q.getSelectedRow = getSelectedRow;
})(q || (q = {}));
var q;
(function (q) {
    function getEnumText(enumKey, value) {
        var title = Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), value);
        return title;
    }
    q.getEnumText = getEnumText;
    function getEnumValues(enumType) {
        var items = [];
        for (var item in enumType) {
            if (!isNaN(Number(item))) {
                items.push(enumType[item]);
            }
        }
        return items;
    }
    q.getEnumValues = getEnumValues;
    function getEnumKeys(enumType) {
        var items = [];
        for (var item in enumType) {
            if (!isNaN(Number(item))) {
                items.push(item);
            }
        }
        return items;
    }
    q.getEnumKeys = getEnumKeys;
})(q || (q = {}));
var q;
(function (q) {
    function isCosmicThemeApplied() {
        return document.body.className.indexOf('cosmic') >= 0;
    }
    q.isCosmicThemeApplied = isCosmicThemeApplied;
    function getSelectedLanguage() {
        return document.getElementById('LanguageSelect').value;
    }
    q.getSelectedLanguage = getSelectedLanguage;
    function formatDecimal(value) {
        var title = Serenity.NumberFormatter.format(value, '#,##0.00');
        return title;
    }
    q.formatDecimal = formatDecimal;
    function formatInt(value) {
        var title = Serenity.NumberFormatter.format(value, '#,##0');
        return title;
    }
    q.formatInt = formatInt;
    // Check numeric or not then return value, if NAN then return zero(0)
    function ToNumber(value) {
        return isNaN(value) ? 0 : value;
    }
    q.ToNumber = ToNumber;
    function ToBool(value) {
        return value == 'true' ? true : false;
    }
    q.ToBool = ToBool;
    //colorDepth should be within '0123456789ABCDEF'
    function getRandomColor(hexLetters) {
        var letters = hexLetters; // '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            var letterIndex = Math.floor((Math.random()) * letters.length);
            if (letterIndex > 15)
                letterIndex = 15;
            if (letterIndex < 0)
                letterIndex = 0;
            color += letters[letterIndex];
        }
        return color;
    }
    q.getRandomColor = getRandomColor;
})(q || (q = {}));
var isPageRefreshRequired;
//const nameof = <T>(name: keyof T) => name;
//const nameofFactory = <T>() => (name: keyof T) => name;
//usage const nameof = nameofFactory<Edoc.RevenueReportModel>();
var q;
(function (q) {
    q.queryString = {};
    q.jsPDFHeaderImageData = null;
    q.jsPDFHeaderTitle = 'Report Title';
    q.useSerenityInlineEditors = true;
    q.DefaultMainGridOptions = {
        AutoColumnSize: true,
        FadeInEffectWhenInit: true,
        ShowAnyInEqualityFilterWithTextValue: true,
        ShowInlineActionsColumn: true,
        ShowDeleteInlineButtun: false,
        ShowEditInlineButtun: true,
        ShowRowNumberColumn: true,
        ShowRowSelectionCheckboxColumn: false,
        RowsPerPage: 100
    };
    q.DefaultEditorGridOptions = {
        AutoColumnSize: true,
        FadeInEffectWhenInit: true,
        ShowAnyInEqualityFilterWithTextValue: true,
        ShowInlineActionsColumn: true,
        ShowDeleteInlineButtun: true,
        ShowEditInlineButtun: true,
        ShowRowSelectionCheckboxColumn: false,
        ShowRowNumberColumn: true
    };
    q.DefaultEntityDialogOptions = {
        AutoFitContentArea: true,
        HideCategoyLinksBar: true,
        PendingChangesConfirmation: true,
        ShowSaveAndNewButtonInToolbar: false,
        ShowCloseButtonInToolbar: false,
        ShowRefreshButtonInToolbar: false,
        ShowChangeLogButtonInToolbar: true,
        ShowReplaceRowButtonInToolbar: false
    };
    q.DefaultEditorDialogOptions = {
        AutoFitContentArea: false,
        HideCategoyLinksBar: true,
        PendingChangesConfirmation: true,
        ShowSaveAndNewButtonInToolbar: false,
        ShowCloseButtonInToolbar: false,
        ShowRefreshButtonInToolbar: false,
        ShowChangeLogButtonInToolbar: false,
        ShowReplaceRowButtonInToolbar: false
    };
    //date time
    q.fiscalYearMonths = [6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5];
})(q || (q = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Authorization;
    (function (Authorization) {
        Object.defineProperty(Authorization, 'userDefinition', {
            get: function () {
                return Q.getRemoteData('UserData');
            }
        });
        function hasPermission(permissionKey) {
            var ud = Authorization.userDefinition;
            return ud.Username === 'admin' || !!ud.Permissions[permissionKey];
        }
        Authorization.hasPermission = hasPermission;
    })(Authorization = SCMONLINE.Authorization || (SCMONLINE.Authorization = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ChartInDialog = /** @class */ (function (_super) {
            __extends(ChartInDialog, _super);
            function ChartInDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ChartInDialog_1 = ChartInDialog;
            ChartInDialog.initializePage = function () {
                $(function () {
                    $('#LaunchDialogButton').click(function (e) {
                        (new ChartInDialog_1()).dialogOpen();
                    });
                });
            };
            ChartInDialog.prototype.onDialogOpen = function () {
                var _this = this;
                _super.prototype.onDialogOpen.call(this);
                BasicSamples.BasicSamplesService.OrdersByShipper({}, function (response) {
                    _this.areaChart = new Morris.Area({
                        element: _this.idPrefix + 'Chart',
                        resize: true, parseTime: false,
                        data: response.Values,
                        xkey: 'Month',
                        ykeys: response.ShipperKeys, labels: response.ShipperLabels, hideHover: 'auto'
                    });
                });
            };
            ChartInDialog.prototype.arrange = function () {
                _super.prototype.arrange.call(this);
                this.areaChart && this.areaChart.redraw();
            };
            ChartInDialog.prototype.getTemplate = function () {
                // you could also put this in a ChartInDialog.Template.html file. it's here for simplicity.
                return "<div id='~_Chart'></div>";
            };
            ChartInDialog.prototype.getDialogOptions = function () {
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.title = 'Orders by Shipper';
                return opt;
            };
            var ChartInDialog_1;
            ChartInDialog = ChartInDialog_1 = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.resizable(),
                Serenity.Decorators.maximizable()
            ], ChartInDialog);
            return ChartInDialog;
        }(Serenity.TemplatedDialog));
        BasicSamples.ChartInDialog = ChartInDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var CloneableEntityDialog = /** @class */ (function (_super) {
            __extends(CloneableEntityDialog, _super);
            function CloneableEntityDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CloneableEntityDialog.prototype.updateInterface = function () {
                // by default cloneButton is hidden in base UpdateInterface method
                _super.prototype.updateInterface.call(this);
                // here we show it if it is edit mode (not new)
                this.cloneButton.toggle(this.isEditMode());
            };
            /**
             * Overriding this method is optional to customize cloned entity
             */
            CloneableEntityDialog.prototype.getCloningEntity = function () {
                var clone = _super.prototype.getCloningEntity.call(this);
                // add (Clone) suffix if it's not already added
                var suffix = ' (Clone)';
                if (!Q.endsWith(clone.ProductName || '', suffix)) {
                    clone.ProductName = (clone.ProductName || '') + suffix;
                }
                // it's better to clear image for this sample
                // otherwise we would have to create a temporary copy of it
                // and upload
                clone.ProductImage = null;
                // let's clear fields not logical to be cloned
                clone.UnitsInStock = 0;
                clone.UnitsOnOrder = 0;
                return clone;
            };
            CloneableEntityDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.maximizable()
            ], CloneableEntityDialog);
            return CloneableEntityDialog;
        }(SCMONLINE.Northwind.ProductDialog));
        BasicSamples.CloneableEntityDialog = CloneableEntityDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of ProductGrid to override dialog type to CloneableEntityDialog
         */
        var CloneableEntityGrid = /** @class */ (function (_super) {
            __extends(CloneableEntityGrid, _super);
            function CloneableEntityGrid(container) {
                return _super.call(this, container) || this;
            }
            CloneableEntityGrid.prototype.getDialogType = function () { return BasicSamples.CloneableEntityDialog; };
            CloneableEntityGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CloneableEntityGrid);
            return CloneableEntityGrid;
        }(SCMONLINE.Northwind.ProductGrid));
        BasicSamples.CloneableEntityGrid = CloneableEntityGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DefaultValuesInNewGrid = /** @class */ (function (_super) {
            __extends(DefaultValuesInNewGrid, _super);
            function DefaultValuesInNewGrid(container) {
                return _super.call(this, container) || this;
            }
            /**
             * This method is called when New Item button is clicked.
             * By default, it calls EditItem with an empty entity.
             * This is a good place to fill in default values for New Item button.
             */
            DefaultValuesInNewGrid.prototype.addButtonClick = function () {
                this.editItem({
                    CustomerID: 'ANTON',
                    RequiredDate: Q.formatDate(new Date(), 'yyyy-MM-dd'),
                    EmployeeID: SCMONLINE.Northwind.EmployeeRow.getLookup().items
                        .filter(function (x) { return x.FullName === 'Robert King'; })[0].EmployeeID,
                    ShipVia: SCMONLINE.Northwind.ShipperRow.getLookup().items
                        .filter(function (x) { return x.CompanyName === 'Speedy Express'; })[0].ShipperID
                });
            };
            DefaultValuesInNewGrid.prototype.getButtons = function () {
                var _this = this;
                // preserving default New Item button
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push({
                    title: 'Add Order from the Queen',
                    cssClass: 'add-button',
                    onClick: function () {
                        // using EditItem method as a shortcut to create a new Order dialog,
                        // bind to its events, load our order row, and open dialog
                        _this.editItem({
                            CustomerID: 'QUEEN',
                            EmployeeID: SCMONLINE.Northwind.EmployeeRow.getLookup().items
                                .filter(function (x) { return x.FullName === 'Nancy Davolio'; })[0].EmployeeID,
                            ShipVia: SCMONLINE.Northwind.ShipperRow.getLookup().items
                                .filter(function (x) { return x.CompanyName === 'United Package'; })[0].ShipperID
                        });
                    }
                });
                buttons.push({
                    title: 'Add Order with 5 Chai by Laura', cssClass: 'add-note-button',
                    onClick: function () {
                        // we could use EditItem here too, but for demonstration
                        // purposes we are manually creating dialog this time
                        var dlg = new SCMONLINE.Northwind.OrderDialog();
                        // let grid watch for changes to manually created dialog, 
                        // so when a new item is saved, grid can refresh itself
                        _this.initDialog(dlg);
                        // get a reference to product Chai
                        var chai = SCMONLINE.Northwind.ProductRow.getLookup().items
                            .filter(function (x) { return x.ProductName === 'Chai'; })[0];
                        // LoadEntityAndOpenDialog, loads an OrderRow 
                        // to dialog and opens it
                        var lauraCallahanID = SCMONLINE.Northwind.EmployeeRow.getLookup().items
                            .filter(function (x) { return x.FullName === 'Laura Callahan'; })[0].EmployeeID;
                        dlg.loadEntityAndOpenDialog({
                            CustomerID: 'GOURL',
                            EmployeeID: lauraCallahanID,
                            DetailList: [{
                                    ProductID: chai.ProductID,
                                    ProductName: chai.ProductName,
                                    UnitPrice: chai.UnitPrice,
                                    Quantity: 5,
                                    LineTotal: chai.UnitPrice * 5
                                }]
                        });
                    }
                });
                return buttons;
            };
            DefaultValuesInNewGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DefaultValuesInNewGrid);
            return DefaultValuesInNewGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.DefaultValuesInNewGrid = DefaultValuesInNewGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DialogBoxes;
        (function (DialogBoxes) {
            function initializePage() {
                confirmDialogButtons();
                confirmWithCustomTitle();
                information();
                warning();
                alert();
                alertWithHtmlContent();
            }
            DialogBoxes.initializePage = initializePage;
            function confirmDialogButtons() {
                // here we demonstrate how you can detect which button user has clicked
                // second parameter is Yes handler and it is called only when user clicks Yes.
                // third parameter has some additional options, that you should only use when needed
                $('#ConfirmDialogButtons').click(function () {
                    Q.confirm("Click one of buttons, or close dialog with [x] on top right, i'll tell you what you did!", function () {
                        Q.notifySuccess("You clicked YES. Great!");
                    }, {
                        onNo: function () {
                            Q.notifyInfo("You clicked NO. Why?");
                        },
                        onCancel: function () {
                            Q.notifyError("You clicked X. Operation is cancelled. Will try again?");
                        }
                    });
                });
            }
            function confirmWithCustomTitle() {
                $('#ConfirmWithCustomTitle').click(function () {
                    Q.confirm("This confirmation has a custom title", function () {
                        Q.notifySuccess("Allright!");
                    }, {
                        title: 'Some Custom Confirmation Title'
                    });
                });
            }
            function information() {
                $('#Information').click(function () {
                    Q.information("What a nice day", function () {
                        Q.notifySuccess("No problem!");
                    });
                });
            }
            function warning() {
                $('#Warning').click(function () {
                    Q.warning("Hey, be careful!");
                });
            }
            function alert() {
                $('#Alert').click(function () {
                    Q.alert("Houston, we got a problem!");
                });
            }
            function alertWithHtmlContent() {
                $('#AlertWithHtmlContent').click(function () {
                    Q.alert("<h4>Here is some HTML content!</h4>" +
                        "<ul><li>Item 1</li><li>Item 2</li >" +
                        "<li>Visit <a href='http://serenity.is/' target='_blank' style='color: #ddf'>http://serenity.is/</a>!</li></ul>", {
                        htmlEncode: false
                    });
                });
            }
        })(DialogBoxes = BasicSamples.DialogBoxes || (BasicSamples.DialogBoxes = {}));
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * A version of order dialog converted to a panel by adding Serenity.Decorators.panel decorator.
         */
        var EntityDialogAsPanel = /** @class */ (function (_super) {
            __extends(EntityDialogAsPanel, _super);
            function EntityDialogAsPanel() {
                return _super.call(this) || this;
            }
            EntityDialogAsPanel.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.deleteButton.hide();
                this.applyChangesButton.hide();
            };
            EntityDialogAsPanel.prototype.onSaveSuccess = function (response) {
                this.showSaveSuccessMessage(response);
            };
            EntityDialogAsPanel = __decorate([
                Serenity.Decorators.panel()
            ], EntityDialogAsPanel);
            return EntityDialogAsPanel;
        }(SCMONLINE.Northwind.OrderDialog));
        BasicSamples.EntityDialogAsPanel = EntityDialogAsPanel;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Category/CategoryDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var GetInsertedRecordIdDialog = /** @class */ (function (_super) {
            __extends(GetInsertedRecordIdDialog, _super);
            function GetInsertedRecordIdDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * This method is called after the save request to service
             * is completed succesfully. This can be an insert or update.
             *
             * @param response Response that is returned from server
             */
            GetInsertedRecordIdDialog.prototype.onSaveSuccess = function (response) {
                // check that this is an insert
                if (this.isNew()) {
                    Q.notifySuccess("Just inserted a category with ID: " + response.EntityId);
                    // you could also open a new dialog
                    // new Northwind.CategoryDialog().loadByIdAndOpenDialog(response.EntityId);
                    // but let's better load inserted record using Retrieve service
                    SCMONLINE.Northwind.CategoryService.Retrieve({
                        EntityId: response.EntityId
                    }, function (resp) {
                        Q.notifyInfo("Looks like the category you added has name: " + resp.Entity.CategoryName);
                    });
                }
            };
            GetInsertedRecordIdDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], GetInsertedRecordIdDialog);
            return GetInsertedRecordIdDialog;
        }(SCMONLINE.Northwind.CategoryDialog));
        BasicSamples.GetInsertedRecordIdDialog = GetInsertedRecordIdDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Category/CategoryGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of CategoryGrid to override dialog type to GetInsertedRecordIdDialog
         */
        var GetInsertedRecordIdGrid = /** @class */ (function (_super) {
            __extends(GetInsertedRecordIdGrid, _super);
            function GetInsertedRecordIdGrid(container) {
                return _super.call(this, container) || this;
            }
            GetInsertedRecordIdGrid.prototype.getDialogType = function () { return BasicSamples.GetInsertedRecordIdDialog; };
            GetInsertedRecordIdGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], GetInsertedRecordIdGrid);
            return GetInsertedRecordIdGrid;
        }(SCMONLINE.Northwind.CategoryGrid));
        BasicSamples.GetInsertedRecordIdGrid = GetInsertedRecordIdGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Our custom order dialog subclass that will have a tab to display and edit selected customer details.
         */
        var OtherFormInTabDialog = /** @class */ (function (_super) {
            __extends(OtherFormInTabDialog, _super);
            function OtherFormInTabDialog() {
                var _this = _super.call(this) || this;
                // entity dialogs by default creates a property grid on element with ID "PropertyGrid".
                // here we explicitly create another, the customer property grid (vertical form) on element with ID "CustomerPropertyGrid".
                _this.customerPropertyGrid = new Serenity.PropertyGrid(_this.byId("CustomerPropertyGrid"), {
                    idPrefix: _this.idPrefix + "_Customer_",
                    items: Q.getForm(SCMONLINE.Northwind.CustomerForm.formKey).filter(function (x) { return x.name != 'CustomerID'; }),
                    useCategories: true
                });
                // this is just a helper to access editors if needed
                _this.customerForm = new SCMONLINE.Northwind.CustomerForm(_this.customerPropertyGrid.idPrefix);
                // initialize validator for customer form
                _this.customerValidator = _this.byId("CustomerForm").validate(Q.validateOptions({}));
                var selfChange = 0;
                // creating another toolbar for customer tab that will only save Customer
                new Serenity.Toolbar(_this.byId("CustomerToolbar"), {
                    buttons: [{
                            cssClass: "apply-changes-button",
                            title: Q.text("Controls.EntityDialog.SaveButton"),
                            onClick: function () {
                                var id = _this.getCustomerID();
                                if (!id)
                                    return;
                                if (!_this.customerValidator.form())
                                    return;
                                // prepare an empty entity to serialize customer details into
                                var c = {};
                                _this.customerPropertyGrid.save(c);
                                SCMONLINE.Northwind.CustomerService.Update({
                                    EntityId: id,
                                    Entity: c
                                }, function (response) {
                                    // reload customer list just in case
                                    Q.reloadLookup(SCMONLINE.Northwind.CustomerRow.lookupKey);
                                    // set flag that we are triggering customer select change event
                                    // otherwise active tab will change to first one
                                    selfChange++;
                                    try {
                                        // trigger change so that customer select updates its text
                                        // in case if Company Name is changed
                                        _this.form.CustomerID.element.change();
                                    }
                                    finally {
                                        selfChange--;
                                    }
                                    Q.notifySuccess("Saved customer details");
                                });
                            }
                        }]
                });
                _this.form.CustomerID.change(function (e) {
                    if (selfChange)
                        return;
                    var customerID = _this.getCustomerID();
                    Serenity.TabsExtensions.setDisabled(_this.tabs, 'Customer', !customerID);
                    if (!customerID) {
                        // no customer is selected, just load an empty entity
                        _this.customerPropertyGrid.load({});
                        return;
                    }
                    // load selected customer into customer form by calling CustomerService
                    SCMONLINE.Northwind.CustomerService.Retrieve({
                        EntityId: customerID
                    }, function (response) {
                        _this.customerPropertyGrid.load(response.Entity);
                    });
                });
                return _this;
            }
            OtherFormInTabDialog.prototype.getCustomerID = function () {
                var customerID = this.form.CustomerID.value;
                if (Q.isEmptyOrNull(customerID))
                    return null;
                // unfortunately, CustomerID (a string) used in this form and 
                // the ID (auto increment ID) are different, so we need to 
                // find numeric ID from customer lookups. 
                // you'll probably won't need this step.
                return Q.first(SCMONLINE.Northwind.CustomerRow.getLookup().items, function (x) { return x.CustomerID == customerID; }).ID;
            };
            OtherFormInTabDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Customer', !this.getCustomerID());
            };
            OtherFormInTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OtherFormInTabDialog);
            return OtherFormInTabDialog;
        }(SCMONLINE.Northwind.OrderDialog));
        BasicSamples.OtherFormInTabDialog = OtherFormInTabDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of OrderGrid to override dialog type to OtherFormInTabDialog
         */
        var OtherFormInTabGrid = /** @class */ (function (_super) {
            __extends(OtherFormInTabGrid, _super);
            function OtherFormInTabGrid(container) {
                return _super.call(this, container) || this;
            }
            OtherFormInTabGrid.prototype.getDialogType = function () { return BasicSamples.OtherFormInTabDialog; };
            OtherFormInTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OtherFormInTabGrid);
            return OtherFormInTabGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.OtherFormInTabGrid = OtherFormInTabGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Our custom order dialog subclass that will have a tab to display and edit selected customer details.
         * With single toolbar for all forms
         */
        var OtherFormOneBarDialog = /** @class */ (function (_super) {
            __extends(OtherFormOneBarDialog, _super);
            function OtherFormOneBarDialog() {
                var _this = _super.call(this) || this;
                _this.selfChange = 0;
                // entity dialogs by default creates a property grid on element with ID "PropertyGrid".
                // here we explicitly create another, the customer property grid (vertical form) on element with ID "CustomerPropertyGrid".
                _this.customerPropertyGrid = new Serenity.PropertyGrid(_this.byId("CustomerPropertyGrid"), {
                    items: Q.getForm(SCMONLINE.Northwind.CustomerForm.formKey).filter(function (x) { return x.name != 'CustomerID'; }),
                    idPrefix: _this.idPrefix + "_Customer_",
                    useCategories: true
                });
                // this is just a helper to access editors if needed
                _this.customerForm = new SCMONLINE.Northwind.CustomerForm(_this.customerPropertyGrid.idPrefix);
                // initialize validator for customer form
                _this.customerValidator = _this.byId("CustomerForm").validate(Q.validateOptions({}));
                _this.form.CustomerID.change(function (e) {
                    if (_this.selfChange)
                        return;
                    var customerID = _this.getCustomerID();
                    Serenity.TabsExtensions.setDisabled(_this.tabs, 'Customer', !customerID);
                    if (!customerID) {
                        // no customer is selected, just load an empty entity
                        _this.customerPropertyGrid.load({});
                        return;
                    }
                    // load selected customer into customer form by calling CustomerService
                    SCMONLINE.Northwind.CustomerService.Retrieve({
                        EntityId: customerID
                    }, function (response) {
                        _this.customerPropertyGrid.load(response.Entity);
                    });
                });
                return _this;
            }
            OtherFormOneBarDialog.prototype.getCustomerID = function () {
                var customerID = this.form.CustomerID.value;
                if (Q.isEmptyOrNull(customerID))
                    return null;
                // unfortunately, CustomerID (a string) used in this form and 
                // the ID (auto increment ID) are different, so we need to 
                // find numeric ID from customer lookups. 
                // you'll probably won't need this step.
                return Q.first(SCMONLINE.Northwind.CustomerRow.getLookup().items, function (x) { return x.CustomerID == customerID; }).ID;
            };
            OtherFormOneBarDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Customer', !this.getCustomerID());
            };
            // Save the customer and the order 
            OtherFormOneBarDialog.prototype.saveCustomer = function (callback, onSuccess) {
                var _this = this;
                var id = this.getCustomerID();
                if (!id) {
                    // If id of Customer isn't present, we save only Order entity
                    onSuccess(null);
                }
                else {
                    // Get current tab
                    var currTab = Serenity.TabsExtensions.activeTabKey(this.tabs);
                    // Select the correct tab and validate to see the error message in tab
                    Serenity.TabsExtensions.selectTab(this.tabs, "Customer");
                    if (!this.customerValidator.form()) {
                        return false;
                    }
                    // Re-select initial tab
                    Serenity.TabsExtensions.selectTab(this.tabs, currTab);
                    // prepare an empty entity to serialize customer details into
                    var c = {};
                    this.customerPropertyGrid.save(c);
                    SCMONLINE.Northwind.CustomerService.Update({
                        EntityId: id,
                        Entity: c
                    }, function (response) {
                        // reload customer list just in case
                        Q.reloadLookup(SCMONLINE.Northwind.CustomerRow.lookupKey);
                        // set flag that we are triggering customer select change event
                        // otherwise active tab will change to first one
                        _this.selfChange++;
                        try {
                            // trigger change so that customer select updates its text
                            // in case if Company Name is changed
                            _this.form.CustomerID.element.change();
                        }
                        finally {
                            _this.selfChange--;
                        }
                        onSuccess(response);
                    });
                }
                return true;
            };
            // Call super.save to save Order entity
            OtherFormOneBarDialog.prototype.saveOrder = function (callback) {
                _super.prototype.save.call(this, callback);
            };
            OtherFormOneBarDialog.prototype.saveAll = function (callback) {
                var _this = this;
                this.saveCustomer(callback, 
                // If customer successa, save Order entity
                function (resp) { return _this.saveOrder(callback); });
            };
            // This is called when save/update button is pressed
            OtherFormOneBarDialog.prototype.save = function (callback) {
                this.saveAll(callback);
            };
            OtherFormOneBarDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OtherFormOneBarDialog);
            return OtherFormOneBarDialog;
        }(SCMONLINE.Northwind.OrderDialog));
        BasicSamples.OtherFormOneBarDialog = OtherFormOneBarDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of OrderGrid to override dialog type to OtherFormInTabOneBarDialog
         */
        var OtherFormInTabOneBarGrid = /** @class */ (function (_super) {
            __extends(OtherFormInTabOneBarGrid, _super);
            function OtherFormInTabOneBarGrid(container) {
                return _super.call(this, container) || this;
            }
            OtherFormInTabOneBarGrid.prototype.getDialogType = function () { return BasicSamples.OtherFormOneBarDialog; };
            OtherFormInTabOneBarGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OtherFormInTabOneBarGrid);
            return OtherFormInTabOneBarGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.OtherFormInTabOneBarGrid = OtherFormInTabOneBarGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var PopulateLinkedDataDialog = /** @class */ (function (_super) {
            __extends(PopulateLinkedDataDialog, _super);
            function PopulateLinkedDataDialog() {
                var _this = _super.call(this) || this;
                _this.form = new BasicSamples.PopulateLinkedDataForm(_this.idPrefix);
                // "changeSelect2" is only fired when user changes the selection
                // but "change" is fired when dialog sets customer on load too
                // so we prefer "changeSelect2", as initial customer details 
                // will get populated by initial load, we don't want extra call
                _this.form.CustomerID.changeSelect2(function (e) {
                    var customerID = _this.form.CustomerID.value;
                    if (Q.isEmptyOrNull(customerID)) {
                        _this.setCustomerDetails({});
                        return;
                    }
                    // in northwind CustomerID is a string like "ALFKI", 
                    // while its actual integer ID value is 1.
                    // so we need to convert customer ID to ID.
                    // you won't have to do this conversion with your tables
                    var id = Q.first(SCMONLINE.Northwind.CustomerRow.getLookup().items, function (x) { return x.CustomerID == customerID; }).ID;
                    SCMONLINE.Northwind.CustomerService.Retrieve({
                        EntityId: id
                    }, function (response) {
                        _this.setCustomerDetails(response.Entity);
                    });
                });
                return _this;
            }
            PopulateLinkedDataDialog.prototype.getFormKey = function () { return BasicSamples.PopulateLinkedDataForm.formKey; };
            PopulateLinkedDataDialog.prototype.getIdProperty = function () { return SCMONLINE.Northwind.OrderRow.idProperty; };
            PopulateLinkedDataDialog.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.OrderRow.localTextPrefix; };
            PopulateLinkedDataDialog.prototype.getNameProperty = function () { return SCMONLINE.Northwind.OrderRow.nameProperty; };
            PopulateLinkedDataDialog.prototype.getService = function () { return SCMONLINE.Northwind.OrderService.baseUrl; };
            PopulateLinkedDataDialog.prototype.setCustomerDetails = function (details) {
                this.form.CustomerCity.value = details.City;
                this.form.CustomerContactName.value = details.ContactName;
                this.form.CustomerContactTitle.value = details.ContactTitle;
                this.form.CustomerCountry.value = details.Country;
                this.form.CustomerFax.value = details.Fax;
                this.form.CustomerPhone.value = details.Phone;
                this.form.CustomerRegion.value = details.Region;
            };
            /**
             * This dialog will have CSS class "s-PopulateLinkedDataDialog"
             * We are changing it here to "s-OrderDialog", to make it use default OrderDialog styles
             * This has no effect other than looks on populate linked data demonstration
             */
            PopulateLinkedDataDialog.prototype.getCssClass = function () {
                return _super.prototype.getCssClass.call(this) + " s-OrderDialog s-Northwind-OrderDialog";
            };
            PopulateLinkedDataDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PopulateLinkedDataDialog);
            return PopulateLinkedDataDialog;
        }(Serenity.EntityDialog));
        BasicSamples.PopulateLinkedDataDialog = PopulateLinkedDataDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * A subclass of OrderGrid that launches PopulateLinkedDataDialog
         */
        var PopulateLinkedDataGrid = /** @class */ (function (_super) {
            __extends(PopulateLinkedDataGrid, _super);
            function PopulateLinkedDataGrid(container) {
                return _super.call(this, container) || this;
            }
            PopulateLinkedDataGrid.prototype.getDialogType = function () { return BasicSamples.PopulateLinkedDataDialog; };
            PopulateLinkedDataGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PopulateLinkedDataGrid);
            return PopulateLinkedDataGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.PopulateLinkedDataGrid = PopulateLinkedDataGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Supplier/SupplierDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ReadOnlyDialog = /** @class */ (function (_super) {
            __extends(ReadOnlyDialog, _super);
            function ReadOnlyDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * This is the method that gets list of tool
             * buttons to be created in a dialog.
             *
             * Here we'll remove save and close button, and
             * apply changes buttons.
             */
            ReadOnlyDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                // purposes we'll hide it in another method (updateInterface)
                // buttons.splice(Q.indexOf(buttons, x => x.cssClass == "delete-button"), 1);
                return buttons;
            };
            /**
             * This method is a good place to update states of
             * interface elements. It is called after dialog
             * is initialized and an entity is loaded into dialog.
             * This is also called in new item mode.
             */
            ReadOnlyDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                // finding all editor elements and setting their readonly attribute
                // note that this helper method only works with basic inputs, 
                // some editors require widget based set readonly overload (setReadOnly)
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                // remove required asterisk (*)
                this.element.find('sup').hide();
                // here is a way to locate a button by its css class
                // note that this method is not available in 
                // getToolbarButtons() because buttons are not 
                // created there yet!
                // 
                // this.toolbar.findButton('delete-button').hide();
                // entity dialog also has reference variables to
                // its default buttons, lets use them to hide delete button
                this.deleteButton.hide();
                // we could also hide save buttons just like delete button,
                // but they are null now as we removed them in getToolbarButtons()
                // if we didn't we could write like this:
                // 
                // this.applyChangesButton.hide();
                // this.saveAndCloseButton.hide();
                // instead of hiding, we could disable a button
                // 
                // this.deleteButton.toggleClass('disabled', true);
            };
            /**
             * This method is called when dialog title needs to be updated.
             * Base class returns something like 'Edit xyz' for edit mode,
             * and 'New xyz' for new record mode.
             *
             * But our dialog is readonly, so we should change it to 'View xyz'
             */
            ReadOnlyDialog.prototype.getEntityTitle = function () {
                if (!this.isEditMode()) {
                    // we shouldn't hit here, but anyway for demo...
                    return "How did you manage to open this dialog in new record mode?";
                }
                else {
                    // entitySingular is type of record this dialog edits. something like 'Supplier'.
                    // you could hardcode it, but this is for demonstration
                    var entityType = _super.prototype.getEntitySingular.call(this);
                    // get name field value of record this dialog edits
                    var name_1 = this.getEntityNameFieldValue() || "";
                    // you could use Q.format with a local text, but again demo...
                    return 'View ' + entityType + " (" + name_1 + ")";
                }
            };
            /**
             * This method is actually the one that calls getEntityTitle()
             * and updates the dialog title. We could do it here too...
             */
            ReadOnlyDialog.prototype.updateTitle = function () {
                _super.prototype.updateTitle.call(this);
                // remove super.updateTitle() call above and uncomment 
                // below line if you'd like to use this version
                // 
                // this.dialogTitle = 'View Supplier (' + this.getEntityNameFieldValue() + ')';
            };
            ReadOnlyDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ReadOnlyDialog);
            return ReadOnlyDialog;
        }(SCMONLINE.Northwind.SupplierDialog));
        BasicSamples.ReadOnlyDialog = ReadOnlyDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Supplier/SupplierGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * A readonly grid that launches ReadOnlyDialog
         */
        var ReadOnlyGrid = /** @class */ (function (_super) {
            __extends(ReadOnlyGrid, _super);
            function ReadOnlyGrid(container) {
                return _super.call(this, container) || this;
            }
            ReadOnlyGrid.prototype.getDialogType = function () { return BasicSamples.ReadOnlyDialog; };
            /**
             * Removing add button from grid using its css class
             */
            ReadOnlyGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            ReadOnlyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ReadOnlyGrid);
            return ReadOnlyGrid;
        }(SCMONLINE.Northwind.SupplierGrid));
        BasicSamples.ReadOnlyGrid = ReadOnlyGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Customer/CustomerDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var SerialAutoNumberDialog = /** @class */ (function (_super) {
            __extends(SerialAutoNumberDialog, _super);
            function SerialAutoNumberDialog() {
                var _this = _super.call(this) || this;
                _this.form.CustomerID.element.on('keyup', function (e) {
                    // only auto number when a key between 'A' and 'Z' is pressed
                    if (e.which >= 65 && e.which <= 90)
                        _this.getNextNumber();
                });
                return _this;
            }
            SerialAutoNumberDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                // fill next number in new record mode
                if (this.isNew())
                    this.getNextNumber();
            };
            SerialAutoNumberDialog.prototype.getNextNumber = function () {
                var _this = this;
                var val = Q.trimToNull(this.form.CustomerID.value);
                // we will only get next number when customer ID is empty or 1 character in length
                if (!val || val.length <= 1) {
                    // if no customer ID yet (new record mode probably) use 'C' as a prefix
                    var prefix = (val || 'C').toUpperCase();
                    // call our service, see CustomerEndpoint.cs and CustomerRepository.cs
                    SCMONLINE.Northwind.CustomerService.GetNextNumber({
                        Prefix: prefix,
                        Length: 5 // we want service to search for and return serials of 5 in length
                    }, function (response) {
                        _this.form.CustomerID.value = response.Serial;
                        // this is to mark numerical part after prefix
                        _this.form.CustomerID.element[0].setSelectionRange(prefix.length, response.Serial.length);
                    });
                }
            };
            SerialAutoNumberDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], SerialAutoNumberDialog);
            return SerialAutoNumberDialog;
        }(SCMONLINE.Northwind.CustomerDialog));
        BasicSamples.SerialAutoNumberDialog = SerialAutoNumberDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Customer/CustomerGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of CustomerGrid to override dialog type to SerialAutoNumberDialog
         */
        var SerialAutoNumberGrid = /** @class */ (function (_super) {
            __extends(SerialAutoNumberGrid, _super);
            function SerialAutoNumberGrid(container) {
                return _super.call(this, container) || this;
            }
            SerialAutoNumberGrid.prototype.getDialogType = function () { return BasicSamples.SerialAutoNumberDialog; };
            SerialAutoNumberGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SerialAutoNumberGrid);
            return SerialAutoNumberGrid;
        }(SCMONLINE.Northwind.CustomerGrid));
        BasicSamples.SerialAutoNumberGrid = SerialAutoNumberGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Common/Helpers/GridEditorDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ChangingLookupTextDialog = /** @class */ (function (_super) {
            __extends(ChangingLookupTextDialog, _super);
            function ChangingLookupTextDialog() {
                var _this = _super.call(this) || this;
                _this.form = new BasicSamples.ChangingLookupTextForm(_this.idPrefix);
                _this.form.ProductID.changeSelect2(function (e) {
                    var productID = Q.toId(_this.form.ProductID.value);
                    if (productID != null) {
                        _this.form.UnitPrice.value = SCMONLINE.Northwind.ProductRow.getLookup().itemById[productID].UnitPrice;
                    }
                });
                _this.form.Discount.addValidationRule(_this.uniqueName, function (e) {
                    var price = _this.form.UnitPrice.value;
                    var quantity = _this.form.Quantity.value;
                    var discount = _this.form.Discount.value;
                    if (price != null && quantity != null && discount != null &&
                        discount > 0 && discount >= price * quantity) {
                        return "Discount can't be higher than total price!";
                    }
                });
                return _this;
            }
            ChangingLookupTextDialog.prototype.getFormKey = function () { return BasicSamples.ChangingLookupTextForm.formKey; };
            ChangingLookupTextDialog.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.OrderDetailRow.localTextPrefix; };
            ChangingLookupTextDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('apply-changes-button').hide();
                this.toolbar.findButton('save-and-close-button').hide();
            };
            ChangingLookupTextDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ChangingLookupTextDialog);
            return ChangingLookupTextDialog;
        }(SCMONLINE.Common.GridEditorDialog));
        BasicSamples.ChangingLookupTextDialog = ChangingLookupTextDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Our custom product editor type
         */
        var ChangingLookupTextEditor = /** @class */ (function (_super) {
            __extends(ChangingLookupTextEditor, _super);
            function ChangingLookupTextEditor(container, options) {
                return _super.call(this, container, options) || this;
            }
            ChangingLookupTextEditor.prototype.getLookupKey = function () {
                return SCMONLINE.Northwind.ProductRow.lookupKey;
            };
            ChangingLookupTextEditor.prototype.getItemText = function (item, lookup) {
                return _super.prototype.getItemText.call(this, item, lookup) +
                    ' (' +
                    '$' + Q.formatNumber(item.UnitPrice, '#,##0.00') +
                    ', ' + (item.UnitsInStock > 0 ? (item.UnitsInStock + ' in stock') : 'out of stock') +
                    ', ' + (item.SupplierCompanyName || 'Unknown') +
                    ')';
            };
            ChangingLookupTextEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], ChangingLookupTextEditor);
            return ChangingLookupTextEditor;
        }(Serenity.LookupEditorBase));
        BasicSamples.ChangingLookupTextEditor = ChangingLookupTextEditor;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/OrderDetail/OrderDetailDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Our subclass of order detail dialog with a CategoryID property
         * that will be used to set CascadeValue of product editor
         */
        var FilteredLookupOrderDetailDialog = /** @class */ (function (_super) {
            __extends(FilteredLookupOrderDetailDialog, _super);
            function FilteredLookupOrderDetailDialog() {
                var _this = _super.call(this) || this;
                _this.form = new SCMONLINE.Northwind.OrderDetailForm(_this.idPrefix);
                // we can set cascade field in constructor
                // we could also use FilterField but in this case, when CategoryID is null
                // lookup editor would show all products in any category
                _this.form.ProductID.cascadeField = "CategoryID" /* CategoryID */;
                return _this;
                // but CategoryID value is not yet available here as detail editor will set it 
                // after calling constructor (creating a detail dialog) so we'll use BeforeLoadEntity
            }
            /**
             * This method is called just before an entity is loaded to dialog
             * This is also called for new record mode with an empty entity
             */
            FilteredLookupOrderDetailDialog.prototype.beforeLoadEntity = function (entity) {
                _super.prototype.beforeLoadEntity.call(this, entity);
                // setting cascade value here
                // make sure you have [LookupInclude] on CategoryID property of ProductRow
                // otherwise this field won't be available in lookup script (will always be null),
                // so can't be filtered and you'll end up with an empty product list.
                this.form.ProductID.cascadeValue = this.categoryID;
            };
            FilteredLookupOrderDetailDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], FilteredLookupOrderDetailDialog);
            return FilteredLookupOrderDetailDialog;
        }(SCMONLINE.Northwind.OrderDetailDialog));
        BasicSamples.FilteredLookupOrderDetailDialog = FilteredLookupOrderDetailDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/OrderDetail/OrderDetailsEditor.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Our subclass of Order Details editor with a CategoryID property
         */
        var FilteredLookupDetailEditor = /** @class */ (function (_super) {
            __extends(FilteredLookupDetailEditor, _super);
            function FilteredLookupDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            FilteredLookupDetailEditor.prototype.getDialogType = function () { return BasicSamples.FilteredLookupOrderDetailDialog; };
            /**
             * This method is called to initialize an edit dialog created by
             * grid editor when Add button or an edit link is clicked
             * We have an opportunity here to pass CategoryID to edit dialog
             */
            FilteredLookupDetailEditor.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                // passing category ID from grid editor to detail dialog
                dialog.categoryID = this.categoryID;
            };
            FilteredLookupDetailEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], FilteredLookupDetailEditor);
            return FilteredLookupDetailEditor;
        }(SCMONLINE.Northwind.OrderDetailsEditor));
        BasicSamples.FilteredLookupDetailEditor = FilteredLookupDetailEditor;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Basic order dialog with a category selection
         */
        var FilteredLookupInDetailDialog = /** @class */ (function (_super) {
            __extends(FilteredLookupInDetailDialog, _super);
            function FilteredLookupInDetailDialog() {
                var _this = _super.call(this) || this;
                _this.form = new BasicSamples.FilteredLookupInDetailForm(_this.idPrefix);
                _this.form.CategoryID.change(function (e) {
                    _this.form.DetailList.categoryID = Q.toId(_this.form.CategoryID.value);
                });
                return _this;
            }
            FilteredLookupInDetailDialog.prototype.getFormKey = function () { return BasicSamples.FilteredLookupInDetailForm.formKey; };
            FilteredLookupInDetailDialog.prototype.getIdProperty = function () { return SCMONLINE.Northwind.OrderRow.idProperty; };
            FilteredLookupInDetailDialog.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.OrderRow.localTextPrefix; };
            FilteredLookupInDetailDialog.prototype.getNameProperty = function () { return SCMONLINE.Northwind.OrderRow.nameProperty; };
            FilteredLookupInDetailDialog.prototype.getService = function () { return SCMONLINE.Northwind.OrderService.baseUrl; };
            FilteredLookupInDetailDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], FilteredLookupInDetailDialog);
            return FilteredLookupInDetailDialog;
        }(Serenity.EntityDialog));
        BasicSamples.FilteredLookupInDetailDialog = FilteredLookupInDetailDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of OrderGrid to override dialog type to FilteredLookupInDetailDialog
         */
        var FilteredLookupInDetailGrid = /** @class */ (function (_super) {
            __extends(FilteredLookupInDetailGrid, _super);
            function FilteredLookupInDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            FilteredLookupInDetailGrid.prototype.getDialogType = function () { return BasicSamples.FilteredLookupInDetailDialog; };
            FilteredLookupInDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], FilteredLookupInDetailGrid);
            return FilteredLookupInDetailGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.FilteredLookupInDetailGrid = FilteredLookupInDetailGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductDialog.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * This is our custom product dialog that uses a different product form
         * (LookupFilterByMultipleForm) with our special category editor.
         */
        var LookupFilterByMultipleDialog = /** @class */ (function (_super) {
            __extends(LookupFilterByMultipleDialog, _super);
            function LookupFilterByMultipleDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LookupFilterByMultipleDialog.prototype.getFormKey = function () { return BasicSamples.LookupFilterByMultipleForm.formKey; };
            LookupFilterByMultipleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LookupFilterByMultipleDialog);
            return LookupFilterByMultipleDialog;
        }(SCMONLINE.Northwind.ProductDialog));
        BasicSamples.LookupFilterByMultipleDialog = LookupFilterByMultipleDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Subclass of ProductGrid to override dialog type to CloneableEntityDialog
         */
        var LookupFilterByMultipleGrid = /** @class */ (function (_super) {
            __extends(LookupFilterByMultipleGrid, _super);
            function LookupFilterByMultipleGrid(container) {
                return _super.call(this, container) || this;
            }
            LookupFilterByMultipleGrid.prototype.getDialogType = function () { return BasicSamples.LookupFilterByMultipleDialog; };
            /**
             * This method is called just before List request is sent to service.
             * You have an opportunity here to cancel request or modify it.
             * Here we'll add a custom criteria to list request.
             */
            LookupFilterByMultipleGrid.prototype.onViewSubmit = function () {
                if (!_super.prototype.onViewSubmit.call(this)) {
                    return false;
                }
                // this has no relation to our lookup editor but as we'll allow picking only 
                // categories of Produce and Seafood in product dialog, it's better to show
                // only products from these categories in grid too
                var request = this.view.params;
                request.Criteria = Serenity.Criteria.and(request.Criteria, [['CategoryName'], 'in', [['Produce', 'Seafood']]]);
                // brackets used are important above, NOT ['CategoryName', 'in', ['Produce', 'Seafood']]
                return true;
            };
            LookupFilterByMultipleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LookupFilterByMultipleGrid);
            return LookupFilterByMultipleGrid;
        }(SCMONLINE.Northwind.ProductGrid));
        BasicSamples.LookupFilterByMultipleGrid = LookupFilterByMultipleGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * This is our category editor that will show only categories of Produce and
         * Seafood. We are subclassing LookupEditorBase which also LookupEditor
         * derives from.
         *
         * After compiling and transforming templates, this editor type will be
         * available in server side to use in our LookupFilterByMultipleForm,
         * which is a version of ProductForm that uses our custom editor.
         */
        var ProduceSeafoodCategoryEditor = /** @class */ (function (_super) {
            __extends(ProduceSeafoodCategoryEditor, _super);
            function ProduceSeafoodCategoryEditor(container, opt) {
                return _super.call(this, container, opt) || this;
            }
            /**
             * Normally LookupEditor requires a lookup key to determine which set of
             * lookup data to show in editor. As our editor will only show category
             * data, we lock it to category lookup key.
             */
            ProduceSeafoodCategoryEditor.prototype.getLookupKey = function () {
                return SCMONLINE.Northwind.CategoryRow.lookupKey;
            };
            /**
             * Here we are filtering by category name but you could filter by any field.
             * Just make sure the fields you filter on has [LookupInclude] attribute on them,
             * otherwise their value will be null in client side as they are not sent back
             * from server in lookup script.
             */
            ProduceSeafoodCategoryEditor.prototype.getItems = function (lookup) {
                return _super.prototype.getItems.call(this, lookup).filter(function (x) {
                    return x.CategoryName === 'Produce' || x.CategoryName === 'Seafood';
                });
            };
            ProduceSeafoodCategoryEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], ProduceSeafoodCategoryEditor);
            return ProduceSeafoodCategoryEditor;
        }(Serenity.LookupEditorBase));
        BasicSamples.ProduceSeafoodCategoryEditor = ProduceSeafoodCategoryEditor;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var HardcodedValuesDialog = /** @class */ (function (_super) {
            __extends(HardcodedValuesDialog, _super);
            function HardcodedValuesDialog() {
                var _this = _super.call(this) || this;
                _this.form = new BasicSamples.HardcodedValuesForm(_this.idPrefix);
                _this.dialogTitle = "Please select some value";
                _this.form.SomeValue.changeSelect2(function (e) {
                    Q.notifySuccess("You selected item with key: " + _this.form.SomeValue.value);
                });
                return _this;
            }
            HardcodedValuesDialog.prototype.getFormKey = function () { return BasicSamples.HardcodedValuesForm.formKey; };
            HardcodedValuesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], HardcodedValuesDialog);
            return HardcodedValuesDialog;
        }(Serenity.PropertyDialog));
        BasicSamples.HardcodedValuesDialog = HardcodedValuesDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        /**
         * Our select editor with hardcoded values.
         *
         * When you define a new editor type, make sure you build
         * and transform templates for it to be available
         * in server side forms, e.g. [HardCodedValuesEditor]
         */
        var HardcodedValuesEditor = /** @class */ (function (_super) {
            __extends(HardcodedValuesEditor, _super);
            function HardcodedValuesEditor(container) {
                var _this = _super.call(this, container, null) || this;
                // add option accepts a key (id) value and display text value
                _this.addOption("key1", "Text 1");
                _this.addOption("key2", "Text 2");
                // you may also use addItem which accepts a Select2Item parameter
                _this.addItem({
                    id: "key3",
                    text: "Text 3"
                });
                // don't let selecting this one (disabled)
                _this.addItem({
                    id: "key4",
                    text: "Text 4",
                    disabled: true
                });
                return _this;
            }
            HardcodedValuesEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], HardcodedValuesEditor);
            return HardcodedValuesEditor;
        }(Serenity.Select2Editor));
        BasicSamples.HardcodedValuesEditor = HardcodedValuesEditor;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var StaticTextBlockDialog = /** @class */ (function (_super) {
            __extends(StaticTextBlockDialog, _super);
            function StaticTextBlockDialog() {
                var _this = _super.call(this) || this;
                _this.form = new BasicSamples.StaticTextBlockForm(_this.idPrefix);
                _this.dialogTitle = "A form with static text blocks";
                return _this;
            }
            StaticTextBlockDialog.prototype.getFormKey = function () { return BasicSamples.StaticTextBlockForm.formKey; };
            /**
             * Here we override loadInitialEntity method to set value for "DisplayFieldValue" field.
             * If this was an EntityDialog, your field value would be originating from server side entity.
             */
            StaticTextBlockDialog.prototype.loadInitialEntity = function () {
                this.propertyGrid.load({
                    DisplayFieldValue: 'This content comes from <b>the value</b> of <em>DisplayFieldValue</em> field.'
                });
            };
            StaticTextBlockDialog.prototype.getDialogOptions = function () {
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.width = 650;
                return opt;
            };
            StaticTextBlockDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], StaticTextBlockDialog);
            return StaticTextBlockDialog;
        }(Serenity.PropertyDialog));
        BasicSamples.StaticTextBlockDialog = StaticTextBlockDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Common/Helpers/BulkServiceAction.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var OrderBulkAction = /** @class */ (function (_super) {
            __extends(OrderBulkAction, _super);
            function OrderBulkAction() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * This controls how many service requests will be used in parallel.
             * Determine this number based on how many requests your server
             * might be able to handle, and amount of wait on external resources.
             */
            OrderBulkAction.prototype.getParallelRequests = function () {
                return 10;
            };
            /**
             * These number of records IDs will be sent to your service in one
             * service call. If your service is designed to handle one record only,
             * set it to 1. But note that, if you have 5000 records, this will
             * result in 5000 service calls / requests.
             */
            OrderBulkAction.prototype.getBatchSize = function () {
                return 5;
            };
            /**
             * This is where you should call your service.
             * Batch parameter contains the selected order IDs
             * that should be processed in this service call.
             */
            OrderBulkAction.prototype.executeForBatch = function (batch) {
                var _this = this;
                BasicSamples.BasicSamplesService.OrderBulkAction({
                    OrderIDs: batch.map(function (x) { return Q.parseInteger(x); })
                }, function (response) { return _this.set_successCount(_this.get_successCount() + batch.length); }, {
                    blockUI: false,
                    onError: function (response) { return _this.set_errorCount(_this.get_errorCount() + batch.length); },
                    onCleanup: function () { return _this.serviceCallCleanup(); }
                });
            };
            return OrderBulkAction;
        }(SCMONLINE.Common.BulkServiceAction));
        BasicSamples.OrderBulkAction = OrderBulkAction;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
/// <reference path="OrderBulkAction.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var CancellableBulkActionGrid = /** @class */ (function (_super) {
            __extends(CancellableBulkActionGrid, _super);
            function CancellableBulkActionGrid(container) {
                return _super.call(this, container) || this;
            }
            CancellableBulkActionGrid.prototype.createToolbarExtensions = function () {
                _super.prototype.createToolbarExtensions.call(this);
                this.rowSelection = new Serenity.GridRowSelectionMixin(this);
            };
            CancellableBulkActionGrid.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: 'Perform Bulk Action on Selected Orders',
                        cssClass: 'send-button',
                        onClick: function () {
                            if (!_this.onViewSubmit()) {
                                return;
                            }
                            var action = new BasicSamples.OrderBulkAction();
                            action.done = function () { return _this.rowSelection.resetCheckedAndRefresh(); };
                            action.execute(_this.rowSelection.getSelectedKeys());
                        }
                    }];
            };
            CancellableBulkActionGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(0, 0, Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; }));
                return columns;
            };
            CancellableBulkActionGrid.prototype.getViewOptions = function () {
                var opt = _super.prototype.getViewOptions.call(this);
                opt.rowsPerPage = 2500;
                return opt;
            };
            CancellableBulkActionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CancellableBulkActionGrid);
            return CancellableBulkActionGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.CancellableBulkActionGrid = CancellableBulkActionGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ConditionalFormattingGrid = /** @class */ (function (_super) {
            __extends(ConditionalFormattingGrid, _super);
            function ConditionalFormattingGrid(container) {
                return _super.call(this, container) || this;
            }
            ConditionalFormattingGrid.prototype.getColumnsKey = function () { return "Northwind.Product"; };
            ConditionalFormattingGrid.prototype.getDialogType = function () { return SCMONLINE.Northwind.ProductDialog; };
            ConditionalFormattingGrid.prototype.getIdProperty = function () { return SCMONLINE.Northwind.ProductRow.idProperty; };
            ConditionalFormattingGrid.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.ProductRow.localTextPrefix; };
            ConditionalFormattingGrid.prototype.getService = function () { return SCMONLINE.Northwind.ProductService.baseUrl; };
            /**
             * We override getColumns() to be able to add a custom CSS class to UnitPrice
             * We could also add this class in ProductColumns.cs but didn't want to modify
             * it solely for this sample.
             */
            ConditionalFormattingGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                // adding a specific css class to UnitPrice column, 
                // to be able to format cell with a different background
                Q.first(columns, function (x) { return x.field == "UnitPrice" /* UnitPrice */; }).cssClass += " col-unit-price";
                return columns;
            };
            /**
             * This method is called for all rows
             * @param item Data item for current row
             * @param index Index of the row in grid
             */
            ConditionalFormattingGrid.prototype.getItemCssClass = function (item, index) {
                var klass = "";
                if (item.Discontinued == true)
                    klass += " discontinued";
                else if (item.UnitsInStock <= 0)
                    klass += " out-of-stock";
                else if (item.UnitsInStock < 20)
                    klass += " critical-stock";
                else if (item.UnitsInStock > 50)
                    klass += " needs-reorder";
                if (item.UnitPrice >= 50)
                    klass += " high-price";
                else if (item.UnitPrice >= 20)
                    klass += " medium-price";
                else
                    klass += " low-price";
                return Q.trimToNull(klass);
            };
            ConditionalFormattingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ConditionalFormattingGrid);
            return ConditionalFormattingGrid;
        }(Serenity.EntityGrid));
        BasicSamples.ConditionalFormattingGrid = ConditionalFormattingGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var CustomLinksInGrid = /** @class */ (function (_super) {
            __extends(CustomLinksInGrid, _super);
            function CustomLinksInGrid(container) {
                return _super.call(this, container) || this;
            }
            /**
             * We override getColumns() to change format functions for some columns.
             * You could also write them as formatter classes, and use them at server side
             */
            CustomLinksInGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                Q.first(columns, function (x) { return x.field == "CustomerCompanyName" /* CustomerCompanyName */; }).format =
                    function (ctx) { return "<a href=\"javascript:;\" class=\"customer-link\">" + Q.htmlEncode(ctx.value) + "</a>"; };
                Q.first(columns, function (x) { return x.field == "OrderDate" /* OrderDate */; }).format =
                    function (ctx) { return "<a href=\"javascript:;\" class=\"date-link\">" + Q.formatDate(ctx.value) + "</a>"; };
                Q.first(columns, function (x) { return x.field == "EmployeeFullName" /* EmployeeFullName */; }).format =
                    function (ctx) { return "<a href=\"javascript:;\" class=\"employee-link\">" + Q.htmlEncode(ctx.value) + "</a>"; };
                Q.first(columns, function (x) { return x.field == "ShipCountry" /* ShipCountry */; }).format =
                    function (ctx) { return "<a href=\"javascript:;\" class=\"ship-country-link\">" + Q.htmlEncode(ctx.value) + "</a>"; };
                return columns;
            };
            CustomLinksInGrid.prototype.onClick = function (e, row, cell) {
                // let base grid handle clicks for its edit links
                _super.prototype.onClick.call(this, e, row, cell);
                // if base grid already handled, we shouldn"t handle it again
                if (e.isDefaultPrevented()) {
                    return;
                }
                // get reference to current item
                var item = this.itemAt(row);
                // get reference to clicked element
                var target = $(e.target);
                if (target.hasClass("customer-link")) {
                    e.preventDefault();
                    var message = Q.format("<p>You have clicked an order from customer: {0}.</p>" +
                        "<p>If you click Yes, i'll open Customer dialog.</p>" +
                        "<p>If you click No, i'll open Order dialog.</p>", Q.htmlEncode(item.CustomerCompanyName));
                    Q.confirm(message, function () {
                        // CustomerDialog doesn't use CustomerID but ID (identity)
                        // so need to find customer to get its actual ID
                        var customer = Q.first(SCMONLINE.Northwind.CustomerRow.getLookup().items, function (x) { return x.CustomerID == item.CustomerID; });
                        new SCMONLINE.Northwind.CustomerDialog().loadByIdAndOpenDialog(customer.ID);
                    }, {
                        htmlEncode: false,
                        onNo: function () {
                            new SCMONLINE.Northwind.OrderDialog().loadByIdAndOpenDialog(item.OrderID);
                        }
                    });
                }
                else if (target.hasClass("date-link")) {
                    e.preventDefault();
                    var ordersInSameDate = Q.count(this.view.getItems(), function (x) { return x.OrderDate == item.OrderDate; });
                    Q.notifyInfo("You clicked an order from date " +
                        Q.formatDate(item.OrderDate) + ". There are " +
                        ordersInSameDate + " orders from the same date that is loaded in grid at the moment");
                }
                else if (target.hasClass("employee-link")) {
                    e.preventDefault();
                    Q.notifySuccess("You clicked an employee name, " +
                        "so i've opened a new Order Dialog from same customer " +
                        "with that employee prepopulated!");
                    new SCMONLINE.Northwind.OrderDialog().loadEntityAndOpenDialog({
                        CustomerID: item.CustomerID,
                        EmployeeID: item.EmployeeID
                    });
                }
                else if (target.hasClass("ship-country-link")) {
                    e.preventDefault();
                    Q.notifySuccess("Let's filter the grid to orders from " + item.ShipCountry);
                    var countryFilter = this.findQuickFilter(Serenity.LookupEditor, "ShipCountry" /* ShipCountry */);
                    countryFilter.value = item.ShipCountry;
                    this.refresh();
                }
            };
            /**
             * This method is called for columns with [EditLink] attribute,
             * but only for edit links of this grid's own item type.
             * It is also called by Add Product button with a NULL entityOrId
             * parameter so we should check that entityOrId is a string
             * to be sure it is originating from a link.
             *
             * As we changed format for other columns, this will only be called
             * for links in remaining OrderID column
             */
            CustomLinksInGrid.prototype.editItem = function (entityOrId) {
                // check that this is an edit link click, not add button, ID is always a string
                if (typeof entityOrId == "string") {
                    // convert ID to an integer, and find order with that ID
                    var item = this.view.getItemById(Q.toId(entityOrId));
                    // date is a ISO string, so need to parse it first
                    var date = Q.formatDate(item.OrderDate);
                    // ask for confirmation
                    Q.confirm(Q.format("You clicked edit link for order with ID: {0} and Date: {1}. Should i open that order?", item.OrderID, date), function () {
                        new SCMONLINE.Northwind.OrderDialog().loadByIdAndOpenDialog(item.OrderID);
                    });
                }
                else {
                    _super.prototype.editItem.call(this, entityOrId);
                }
            };
            CustomLinksInGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomLinksInGrid);
            return CustomLinksInGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.CustomLinksInGrid = CustomLinksInGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DragDropSampleDialog = /** @class */ (function (_super) {
            __extends(DragDropSampleDialog, _super);
            function DragDropSampleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new BasicSamples.DragDropSampleForm(_this.idPrefix);
                return _this;
            }
            DragDropSampleDialog.prototype.getFormKey = function () { return BasicSamples.DragDropSampleForm.formKey; };
            DragDropSampleDialog.prototype.getIdProperty = function () { return BasicSamples.DragDropSampleRow.idProperty; };
            DragDropSampleDialog.prototype.getLocalTextPrefix = function () { return BasicSamples.DragDropSampleRow.localTextPrefix; };
            DragDropSampleDialog.prototype.getNameProperty = function () { return BasicSamples.DragDropSampleRow.nameProperty; };
            DragDropSampleDialog.prototype.getService = function () { return BasicSamples.DragDropSampleService.baseUrl; };
            DragDropSampleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DragDropSampleDialog);
            return DragDropSampleDialog;
        }(Serenity.EntityDialog));
        BasicSamples.DragDropSampleDialog = DragDropSampleDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var DragDropSampleGrid = /** @class */ (function (_super) {
            __extends(DragDropSampleGrid, _super);
            function DragDropSampleGrid(container) {
                var _this = _super.call(this, container) || this;
                new Serenity.TreeGridMixin({
                    grid: _this,
                    toggleField: "Title" /* Title */,
                    getParentId: function (x) { return x.ParentId; },
                    initialCollapse: function () { return false; },
                });
                // save prior drag target to restore its color during drag
                var priorDragTarget;
                // prevent the grid from cancelling drag'n'drop by default
                _this.slickGrid.onDragInit.subscribe(function (e, dd) {
                    e.stopImmediatePropagation();
                });
                // this method is called when an item is about to be dragged
                _this.slickGrid.onDragStart.subscribe(function (e, dd) {
                    // only allow edit links to be dragged
                    if (!$(e.target).hasClass('s-EditLink'))
                        return;
                    // make sure there is a cell in source location
                    var cell = _this.slickGrid.getCellFromEvent(e);
                    if (!cell) {
                        return;
                    }
                    // notify that we'll handle drag
                    e.stopImmediatePropagation();
                    // save details about dragged item
                    dd.row = cell.row;
                    var item = _this.itemAt(cell.row);
                    dd.item = item;
                    // a unique name for our operation
                    dd.mode = "move";
                    // create an absolute position helper shown during dragging
                    var helper = $("<span></span>")
                        .addClass('drag-helper')
                        .text("Moving " + item.Title)
                        .appendTo(document.body);
                    dd.helper = helper;
                });
                // this method is periodically called during drag
                _this.slickGrid.onDrag.subscribe(function (e, dd) {
                    // only handle our operation
                    if (dd.mode != "move") {
                        return;
                    }
                    // if we changed color of some target before, reset it
                    if (priorDragTarget && priorDragTarget != e.target) {
                        $(priorDragTarget).css('background-color', '');
                        priorDragTarget = null;
                    }
                    // find target, the source will drag into
                    var cell = _this.slickGrid.getCellFromEvent(e);
                    var target = !cell ? null : _this.itemAt(cell.row);
                    // accept only edit links and valid items as drag target
                    var reject = !$(e.target).hasClass('s-EditLink') || !_this.canMoveUnder(dd.item, target);
                    if (reject) {
                        dd.helper.text("Can't move " + dd.item.Title + " here");
                    }
                    else {
                        dd.helper.text("Move " + dd.item.Title + " under " + $(e.target).text());
                        // change color of current drag target
                        $(e.target).css('background-color', '#ddeeee');
                        priorDragTarget = e.target;
                    }
                    // toggle class of helper to show relevant accept / reject icon
                    dd.helper.toggleClass('reject', reject);
                    // position helper next to current mouse position
                    dd.helper.css({ top: e.pageY + 5, left: e.pageX + 4 });
                });
                // this is called when drag is completed
                _this.slickGrid.onDragEnd.subscribe(function (e, dd) {
                    if (dd.mode != "move") {
                        return;
                    }
                    // prevent browser from changing url
                    e.preventDefault();
                    // clear indicator color and drag helper
                    priorDragTarget && $(priorDragTarget).css('background-color', '');
                    dd.helper.remove();
                    // determine target row
                    var cell = _this.slickGrid.getCellFromEvent(e);
                    var item = dd.item;
                    var target = !cell ? null : _this.itemAt(cell.row);
                    // check again that this is valid drag target
                    if ($(e.target).hasClass('s-EditLink') && _this.canMoveUnder(item, target)) {
                        // this will move our primary drag source under new parent
                        var moveItem = function (onSuccess) {
                            BasicSamples.DragDropSampleService.Update({
                                EntityId: item.Id,
                                Entity: {
                                    ParentId: target.Id
                                }
                            }, onSuccess);
                        };
                        // if drag source has some children, need some confirmation
                        var children = _this.getChildren(dd.item);
                        if (children.length > 0) {
                            Q.confirm('Move its children alongside the item?', function () {
                                // if responded yes, moving item under new parent should be enough
                                moveItem(function () { return _this.refresh(); });
                            }, {
                                onNo: function () {
                                    // if responded no, children should move under old parent of item
                                    var oldParentId = item.ParentId == null ? null : item.ParentId;
                                    var moveNextChild = function (onSuccess) {
                                        var _this = this;
                                        if (children.length) {
                                            var x = children.shift();
                                            BasicSamples.DragDropSampleService.Update({
                                                EntityId: x.Id,
                                                Entity: {
                                                    ParentId: oldParentId || null
                                                }
                                            }, function () { return moveNextChild(onSuccess); }, {
                                                onError: function () { return _this.refresh(); }
                                            });
                                        }
                                        else
                                            onSuccess();
                                    };
                                    // first move item itself under new parent, 
                                    // then move its children under old parent one by one
                                    moveItem(function () { return moveNextChild(function () { return _this.refresh(); }); });
                                }
                            });
                        }
                        else {
                            // item has no children, just move it under new parent
                            moveItem(function () { return _this.refresh(); });
                        }
                    }
                    return false;
                });
                return _this;
            }
            DragDropSampleGrid.prototype.getColumnsKey = function () { return 'BasicSamples.DragDropSample'; };
            DragDropSampleGrid.prototype.getDialogType = function () { return BasicSamples.DragDropSampleDialog; };
            DragDropSampleGrid.prototype.getIdProperty = function () { return BasicSamples.DragDropSampleRow.idProperty; };
            DragDropSampleGrid.prototype.getLocalTextPrefix = function () { return BasicSamples.DragDropSampleRow.localTextPrefix; };
            DragDropSampleGrid.prototype.getService = function () { return BasicSamples.DragDropSampleService.baseUrl; };
            /**
             * This method will determine if item can be moved under a given target
             * An item can't be moved under itself, under one of its children
             */
            DragDropSampleGrid.prototype.canMoveUnder = function (item, target) {
                if (!item || !target || item.Id == target.Id || item.ParentId == target.Id)
                    return false;
                if (Q.any(this.getParents(target), function (x) { return x.Id == item.Id; }))
                    return false;
                return true;
            };
            /**
             * Gets children list of an item
             */
            DragDropSampleGrid.prototype.getChildren = function (item) {
                return this.getItems().filter(function (x) { return x.ParentId == item.Id; });
            };
            /**
             * Gets all parents of an item
             */
            DragDropSampleGrid.prototype.getParents = function (item) {
                // use this to prevent infinite recursion
                var visited = {};
                var result = [];
                // while item has a parent and not visited yet
                while (item.ParentId && !visited[item.ParentId]) {
                    // find parent by its ID
                    item = this.view.getItemById(item.ParentId);
                    if (!item)
                        break;
                    result.push(item);
                    visited[item.Id] = true;
                }
                return result;
            };
            DragDropSampleGrid.prototype.getButtons = function () {
                return [];
            };
            DragDropSampleGrid.prototype.usePager = function () {
                return false;
            };
            DragDropSampleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DragDropSampleGrid);
            return DragDropSampleGrid;
        }(Serenity.EntityGrid));
        BasicSamples.DragDropSampleGrid = DragDropSampleGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var SelectableEntityGrid = /** @class */ (function (_super) {
        __extends(SelectableEntityGrid, _super);
        function SelectableEntityGrid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectableEntityGrid.prototype.getSlickOptions = function () {
            var opt = _super.prototype.getSlickOptions.call(this);
            opt.enableTextSelectionOnCells = true;
            opt.selectedCellCssClass = "slick-row-selected";
            opt.enableCellNavigation = true;
            return opt;
        };
        SelectableEntityGrid.prototype.createSlickGrid = function () {
            var grid = _super.prototype.createSlickGrid.call(this);
            grid.setSelectionModel(new Slick.RowSelectionModel());
            return grid;
        };
        SelectableEntityGrid = __decorate([
            Serenity.Decorators.registerClass()
        ], SelectableEntityGrid);
        return SelectableEntityGrid;
    }(Serenity.EntityGrid));
    SCMONLINE.SelectableEntityGrid = SelectableEntityGrid;
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="SelectableEntityGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var RowSelectionGrid = /** @class */ (function (_super) {
            __extends(RowSelectionGrid, _super);
            function RowSelectionGrid(container) {
                return _super.call(this, container) || this;
            }
            RowSelectionGrid.prototype.getColumnsKey = function () { return "Northwind.Supplier"; };
            RowSelectionGrid.prototype.getDialogType = function () { return SCMONLINE.Northwind.SupplierDialog; };
            RowSelectionGrid.prototype.getIdProperty = function () { return SCMONLINE.Northwind.SupplierRow.idProperty; };
            RowSelectionGrid.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.SupplierRow.localTextPrefix; };
            RowSelectionGrid.prototype.getService = function () { return SCMONLINE.Northwind.SupplierService.baseUrl; };
            RowSelectionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RowSelectionGrid);
            return RowSelectionGrid;
        }(SCMONLINE.SelectableEntityGrid));
        BasicSamples.RowSelectionGrid = RowSelectionGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var GridFilteredByCriteria = /** @class */ (function (_super) {
            __extends(GridFilteredByCriteria, _super);
            function GridFilteredByCriteria(container) {
                return _super.call(this, container) || this;
            }
            GridFilteredByCriteria.prototype.onViewSubmit = function () {
                // only continue if base class returns true (didn't cancel request)
                if (!_super.prototype.onViewSubmit.call(this)) {
                    return false;
                }
                // view object is the data source for grid (SlickRemoteView)
                // this is an EntityGrid so its Params object is a ListRequest
                var request = this.view.params;
                // list request has a Criteria parameter
                // we AND criteria here to existing one because 
                // otherwise we might clear filter set by 
                // an edit filter dialog if any.
                request.Criteria = Serenity.Criteria.and(request.Criteria, [['UnitsInStock'], '>', 10], [['CategoryName'], '!=', 'Condiments'], [['Discontinued'], '=', 0]);
                // TypeScript doesn't support operator overloading
                // so we had to use array syntax above to build criteria.
                // Make sure you write
                // [['Field'], '>', 10] (which means field A is greater than 10)
                // not 
                // ['A', '>', 10] (which means string 'A' is greater than 10
                return true;
            };
            GridFilteredByCriteria = __decorate([
                Serenity.Decorators.registerClass()
            ], GridFilteredByCriteria);
            return GridFilteredByCriteria;
        }(SCMONLINE.Northwind.ProductGrid));
        BasicSamples.GridFilteredByCriteria = GridFilteredByCriteria;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var GroupingAndSummariesInGrid = /** @class */ (function (_super) {
            __extends(GroupingAndSummariesInGrid, _super);
            function GroupingAndSummariesInGrid(container) {
                return _super.call(this, container) || this;
            }
            GroupingAndSummariesInGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                // need to register this plugin for grouping or you'll have errors
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setSummaryOptions({
                    aggregators: [
                        new Slick.Aggregators.Avg("UnitPrice" /* UnitPrice */),
                        new Slick.Aggregators.Sum("UnitsInStock" /* UnitsInStock */),
                        new Slick.Aggregators.Max("UnitsOnOrder" /* UnitsOnOrder */),
                        new Slick.Aggregators.Avg("ReorderLevel" /* ReorderLevel */)
                    ]
                });
                return grid;
            };
            GroupingAndSummariesInGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                Q.first(columns, function (x) { return x.field === "UnitsOnOrder" /* UnitsOnOrder */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.max ? ('max: ' + Q.coalesce(totals.max[col.field], '')) : '');
                };
                Q.first(columns, function (x) { return x.field === "ReorderLevel" /* ReorderLevel */; })
                    .groupTotalsFormatter = function (totals, col) {
                    return (totals.avg ? ('avg: ' + Q.coalesce(Q.formatNumber(totals.avg[col.field], '0.'), '')) : '');
                };
                return columns;
            };
            GroupingAndSummariesInGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.showFooterRow = true;
                return opt;
            };
            GroupingAndSummariesInGrid.prototype.usePager = function () {
                return false;
            };
            GroupingAndSummariesInGrid.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: 'Group By Category',
                        cssClass: 'expand-all-button',
                        onClick: function () { return _this.view.setGrouping([{
                                getter: "CategoryName" /* CategoryName */
                            }]); }
                    },
                    {
                        title: 'Group By Category and Supplier',
                        cssClass: 'expand-all-button',
                        onClick: function () { return _this.view.setGrouping([{
                                formatter: function (x) { return 'Category: ' + x.value + ' (' + x.count + ' items)'; },
                                getter: "CategoryName" /* CategoryName */
                            }, {
                                formatter: function (x) { return 'Supplier: ' + x.value + ' (' + x.count + ' items)'; },
                                getter: "SupplierCompanyName" /* SupplierCompanyName */
                            }]); }
                    }, {
                        title: 'No Grouping',
                        cssClass: 'collapse-all-button',
                        onClick: function () { return _this.view.setGrouping([]); }
                    }];
            };
            GroupingAndSummariesInGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], GroupingAndSummariesInGrid);
            return GroupingAndSummariesInGrid;
        }(SCMONLINE.Northwind.ProductGrid));
        BasicSamples.GroupingAndSummariesInGrid = GroupingAndSummariesInGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var InitialValuesForQuickFilters = /** @class */ (function (_super) {
            __extends(InitialValuesForQuickFilters, _super);
            function InitialValuesForQuickFilters(container) {
                return _super.call(this, container) || this;
            }
            /**
             * This method is called to get list of quick filters to be created for this grid.
             * By default, it returns quick filter objects corresponding to properties that
             * have a [QuickFilter] attribute at server side OrderColumns.cs
             */
            InitialValuesForQuickFilters.prototype.getQuickFilters = function () {
                // get quick filter list from base class
                var filters = _super.prototype.getQuickFilters.call(this);
                // quick filter init method is a good place to set initial
                // value for a quick filter editor, just after it is created
                Q.first(filters, function (x) { return x.field == "OrderDate" /* OrderDate */; }).init = function (w) {
                    // w is a reference to the editor for this quick filter widget
                    // here we cast it to DateEditor, and set its value as date.
                    // note that in Javascript, months are 0 based, so date below
                    // is actually 2016-05-01
                    w.valueAsDate = new Date(2016, 4, 1);
                    // setting start date was simple. but this quick filter is actually
                    // a combination of two date editors. to get reference to second one,
                    // need to find its next sibling element by its class
                    var endDate = w.element.nextAll(".s-DateEditor").getWidget(Serenity.DateEditor);
                    endDate.valueAsDate = new Date(2016, 6, 1);
                };
                Q.first(filters, function (x) { return x.field == "ShippingState" /* ShippingState */; }).init = function (w) {
                    // enum editor has a string value, so need to call toString()
                    w.set_value(SCMONLINE.Northwind.OrderShippingState.NotShipped.toString());
                };
                return filters;
            };
            /**
             * This method is another possible place to modify quick filter widgets.
             * It is where the quick filter widgets are actually created.
             *
             * By default, it calls getQuickFilters() then renders UI for these
             * quick filters.
             *
             * We could use getQuickFilters() method for ShipVia too,
             * but this is for demonstration purposes
             */
            InitialValuesForQuickFilters.prototype.createQuickFilters = function () {
                // let base class to create quick filters first
                _super.prototype.createQuickFilters.call(this);
                // find a quick filter widget by its field name
                this.findQuickFilter(Serenity.LookupEditor, "ShipVia" /* ShipVia */).values = ["1", "2"];
            };
            InitialValuesForQuickFilters = __decorate([
                Serenity.Decorators.registerClass()
            ], InitialValuesForQuickFilters);
            return InitialValuesForQuickFilters;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.InitialValuesForQuickFilters = InitialValuesForQuickFilters;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Customer/CustomerGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var InlineActionGrid = /** @class */ (function (_super) {
            __extends(InlineActionGrid, _super);
            function InlineActionGrid(container) {
                return _super.call(this, container) || this;
            }
            InlineActionGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.unshift({
                    field: 'Delete Row',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action delete-row" title="delete">' +
                        '<i class="fa fa-trash-o text-red"></i></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                columns.splice(1, 0, {
                    field: 'View Details',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action view-details" title="view details"></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                columns.splice(2, 0, {
                    field: 'New Order',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action new-order" title="new order"></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            InlineActionGrid.prototype.onClick = function (e, row, cell) {
                var _this = this;
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                // if user clicks "i" element, e.g. icon
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('delete-row')) {
                        Q.confirm('Delete record?', function () {
                            SCMONLINE.Northwind.CustomerService.Delete({
                                EntityId: item.ID,
                            }, function (response) {
                                _this.refresh();
                            });
                        });
                    }
                    else if (target.hasClass('view-details')) {
                        this.editItem(item.ID);
                    }
                    else if (target.hasClass('new-order')) {
                        var dlg = new SCMONLINE.Northwind.OrderDialog();
                        this.initDialog(dlg);
                        dlg.loadEntityAndOpenDialog({
                            CustomerID: item.CustomerID
                        });
                    }
                }
            };
            InlineActionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], InlineActionGrid);
            return InlineActionGrid;
        }(SCMONLINE.Northwind.CustomerGrid));
        BasicSamples.InlineActionGrid = InlineActionGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var InlineImageFormatter = /** @class */ (function () {
            function InlineImageFormatter() {
            }
            InlineImageFormatter.prototype.format = function (ctx) {
                var file = (this.fileProperty ? ctx.item[this.fileProperty] : ctx.value);
                if (!file || !file.length)
                    return "";
                var href = Q.resolveUrl("~/upload/" + file);
                if (this.thumb) {
                    var parts = file.split('.');
                    file = parts.slice(0, parts.length - 1).join('.') + '_t.jpg';
                }
                var src = Q.resolveUrl('~/upload/' + file);
                return "<a class=\"inline-image\" target='_blank' href=\"" + href + "\">" +
                    ("<img src=\"" + src + "\" style='max-height: 145px; max-width: 100%;' /></a>");
            };
            InlineImageFormatter.prototype.initializeColumn = function (column) {
                if (this.fileProperty) {
                    column.referencedFields = column.referencedFields || [];
                    column.referencedFields.push(this.fileProperty);
                }
            };
            __decorate([
                Serenity.Decorators.option()
            ], InlineImageFormatter.prototype, "fileProperty", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], InlineImageFormatter.prototype, "thumb", void 0);
            InlineImageFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], InlineImageFormatter);
            return InlineImageFormatter;
        }());
        BasicSamples.InlineImageFormatter = InlineImageFormatter;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var InlineImageInGrid = /** @class */ (function (_super) {
            __extends(InlineImageInGrid, _super);
            function InlineImageInGrid(container) {
                return _super.call(this, container) || this;
            }
            InlineImageInGrid.prototype.getColumnsKey = function () { return "BasicSamples.InlineImageInGrid"; };
            InlineImageInGrid.prototype.getDialogType = function () { return SCMONLINE.Northwind.ProductDialog; };
            InlineImageInGrid.prototype.getIdProperty = function () { return SCMONLINE.Northwind.ProductRow.idProperty; };
            InlineImageInGrid.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.ProductRow.localTextPrefix; };
            InlineImageInGrid.prototype.getService = function () { return SCMONLINE.Northwind.ProductService.baseUrl; };
            InlineImageInGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.rowHeight = 150;
                return opt;
            };
            InlineImageInGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], InlineImageInGrid);
            return InlineImageInGrid;
        }(Serenity.EntityGrid));
        BasicSamples.InlineImageInGrid = InlineImageInGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ProductExcelImportDialog = /** @class */ (function (_super) {
            __extends(ProductExcelImportDialog, _super);
            function ProductExcelImportDialog() {
                var _this = _super.call(this) || this;
                _this.form = new BasicSamples.ProductExcelImportForm(_this.idPrefix);
                return _this;
            }
            ProductExcelImportDialog.prototype.getDialogTitle = function () {
                return "Excel Import";
            };
            ProductExcelImportDialog.prototype.getDialogButtons = function () {
                var _this = this;
                return [
                    {
                        text: 'Import',
                        click: function () {
                            if (!_this.validateBeforeSave())
                                return;
                            if (_this.form.FileName.value == null ||
                                Q.isEmptyOrNull(_this.form.FileName.value.Filename)) {
                                Q.notifyError("Please select a file!");
                                return;
                            }
                            BasicSamples.ProductExcelImportService.ExcelImport({
                                FileName: _this.form.FileName.value.Filename
                            }, function (response) {
                                Q.notifyInfo('Inserted: ' + (response.Inserted || 0) +
                                    ', Updated: ' + (response.Updated || 0));
                                if (response.ErrorList != null && response.ErrorList.length > 0) {
                                    Q.notifyError(response.ErrorList.join(',\r\n '));
                                }
                                _this.dialogClose();
                            });
                        },
                    },
                    {
                        text: 'Cancel',
                        click: function () { return _this.dialogClose(); }
                    }
                ];
            };
            ProductExcelImportDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductExcelImportDialog);
            return ProductExcelImportDialog;
        }(Serenity.PropertyDialog));
        BasicSamples.ProductExcelImportDialog = ProductExcelImportDialog;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Product/ProductGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ProductExcelImportGrid = /** @class */ (function (_super) {
            __extends(ProductExcelImportGrid, _super);
            function ProductExcelImportGrid(container) {
                return _super.call(this, container) || this;
            }
            /**
             * This method is called to get list of buttons to be created.
             */
            ProductExcelImportGrid.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                var buttons = _super.prototype.getButtons.call(this);
                // add our import button
                buttons.push({
                    title: 'Import From Excel',
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        // open import dialog, let it handle rest
                        var dialog = new BasicSamples.ProductExcelImportDialog();
                        dialog.element.on('dialogclose', function () {
                            _this.refresh();
                            dialog = null;
                        });
                        dialog.dialogOpen();
                    }
                });
                return buttons;
            };
            ProductExcelImportGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProductExcelImportGrid);
            return ProductExcelImportGrid;
        }(SCMONLINE.Northwind.ProductGrid));
        BasicSamples.ProductExcelImportGrid = ProductExcelImportGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var QuickFilterCustomization = /** @class */ (function (_super) {
            __extends(QuickFilterCustomization, _super);
            function QuickFilterCustomization(container) {
                return _super.call(this, container) || this;
            }
            QuickFilterCustomization.prototype.getColumnsKey = function () { return "Northwind.Order"; };
            QuickFilterCustomization.prototype.getDialogType = function () { return SCMONLINE.Northwind.OrderDialog; };
            QuickFilterCustomization.prototype.getIdProperty = function () { return SCMONLINE.Northwind.OrderRow.idProperty; };
            QuickFilterCustomization.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.OrderRow.localTextPrefix; };
            QuickFilterCustomization.prototype.getService = function () { return SCMONLINE.Northwind.OrderService.baseUrl; };
            /**
             * This method is called to get list of quick filters to be created for this grid.
             * By default, it returns quick filter objects corresponding to properties that
             * have a [QuickFilter] attribute at server side OrderColumns.cs
             */
            QuickFilterCustomization.prototype.getQuickFilters = function () {
                // get quick filter list from base class, e.g. columns
                var filters = _super.prototype.getQuickFilters.call(this);
                // we start by turning CustomerID filter to a Not Equal one
                var filter = Q.first(filters, function (x) { return x.field == "CustomerID" /* CustomerID */; });
                filter.title = "Customer Not Equal To";
                filter.handler = function (h) {
                    // if filter is active, e.g. editor has some value
                    if (h.active) {
                        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["CustomerID" /* CustomerID */], '!=', h.value]);
                    }
                };
                // turn order date filter to exact match, not a range
                filter = Q.first(filters, function (x) { return x.field == "OrderDate" /* OrderDate */; });
                filter.title = "Order Date Is Exactly";
                // element method in DataGrid turns this into a range editor, clear it to prevent
                filter.element = function (e) { };
                // need to override handler too, otherwise default handler will try to handle a date range
                filter.handler = function (h) {
                    if (h.active) {
                        h.request.EqualityFilter["OrderDate" /* OrderDate */] = h.value;
                    }
                    else {
                        h.request.EqualityFilter["OrderDate" /* OrderDate */] = null;
                    }
                };
                // reset these as they also expect range editors
                filter.loadState = null;
                filter.saveState = null;
                filter.displayText = null;
                // make employee filter a textbox, instead of lookup, and search by starts with
                filter = Q.first(filters, function (x) { return x.field == "EmployeeID" /* EmployeeID */; });
                filter.title = "Employee Name Starts With";
                filter.type = Serenity.StringEditor;
                filter.handler = function (h) {
                    if (h.active) {
                        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["EmployeeFullName" /* EmployeeFullName */], 'like', h.value + '%']);
                    }
                };
                // turn shipping state into a boolean filter
                filter = Q.first(filters, function (x) { return x.field == "ShippingState" /* ShippingState */; });
                filter.title = "Show Only Shipped";
                filter.type = Serenity.BooleanEditor;
                filter.handler = function (h) {
                    h.active = !!h.value;
                    if (h.active) {
                        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, ['is not null', ["ShippedDate" /* ShippedDate */]]);
                    }
                };
                // ship via filters by NOT IN
                filter = Q.first(filters, function (x) { return x.field == "ShipVia" /* ShipVia */; });
                filter.title = "Ship Via Not IN";
                filter.handler = function (h) {
                    if (h.active) {
                        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["ShipVia" /* ShipVia */], 'not in', [h.value]]);
                    }
                };
                // ship country filters by NOT contains
                filter = Q.first(filters, function (x) { return x.field == "ShipCountry" /* ShipCountry */; });
                filter.title = "Ship Country NOT Contains";
                filter.type = Serenity.StringEditor;
                filter.handler = function (h) {
                    if (h.active) {
                        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["ShipCountry" /* ShipCountry */], 'not like', '%' + h.value + '%']);
                    }
                };
                // ship city filters by GREATER THAN (>)
                filter = Q.first(filters, function (x) { return x.field == "ShipCity" /* ShipCity */; });
                filter.title = "Ship City Greater Than";
                filter.type = Serenity.StringEditor;
                filter.handler = function (h) {
                    if (h.active) {
                        h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["ShipCity" /* ShipCity */], '>', h.value]);
                    }
                };
                // create a range editor for freight
                var endFreight = null;
                filters.push({
                    field: "Freight" /* Freight */,
                    type: Serenity.DecimalEditor,
                    title: 'Freight Between',
                    element: function (e1) {
                        e1.css("width", "80px");
                        endFreight = Serenity.Widget.create({
                            type: Serenity.DecimalEditor,
                            element: function (e2) { return e2.insertAfter(e1).css("width", "80px"); }
                        });
                        endFreight.element.change(function (x) { return e1.triggerHandler("change"); });
                        $("<span/>").addClass("range-separator").text("-").insertAfter(e1);
                    },
                    handler: function (h) {
                        var active1 = h.value != null && !isNaN(h.value);
                        var active2 = endFreight.value != null && !isNaN(endFreight.value);
                        h.active = active1 || active2;
                        if (active1)
                            h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["Freight" /* Freight */], '>=', h.value]);
                        if (active2)
                            h.request.Criteria = Serenity.Criteria.and(h.request.Criteria, [["Freight" /* Freight */], '<=', endFreight.value]);
                    }
                });
                return filters;
            };
            QuickFilterCustomization = __decorate([
                Serenity.Decorators.registerClass()
            ], QuickFilterCustomization);
            return QuickFilterCustomization;
        }(Serenity.EntityGrid));
        BasicSamples.QuickFilterCustomization = QuickFilterCustomization;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Supplier/SupplierGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var RemovingAddButton = /** @class */ (function (_super) {
            __extends(RemovingAddButton, _super);
            function RemovingAddButton(container) {
                return _super.call(this, container) || this;
            }
            /**
             * This method is called to get list of buttons to be created.
             */
            RemovingAddButton.prototype.getButtons = function () {
                // call base method to get list of buttons
                // by default, base entity grid adds a few buttons, 
                // add, refresh, column selection in order.
                var buttons = _super.prototype.getButtons.call(this);
                // here is several methods to remove add button
                // only one is enabled, others are commented
                // METHOD 1
                // we would be able to simply return an empty button list,
                // but this would also remove all other buttons
                // return [];
                // METHOD 2
                // remove by splicing (something like delete by index)
                // here we hard code add button index (not nice!)
                // buttons.splice(0, 1);
                // METHOD 3 - recommended
                // remove by splicing, but this time find button index
                // by its css class. it is the best and safer method
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            RemovingAddButton = __decorate([
                Serenity.Decorators.registerClass()
            ], RemovingAddButton);
            return RemovingAddButton;
        }(SCMONLINE.Northwind.SupplierGrid));
        BasicSamples.RemovingAddButton = RemovingAddButton;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var CustomerGrossSalesGrid = /** @class */ (function (_super) {
            __extends(CustomerGrossSalesGrid, _super);
            function CustomerGrossSalesGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.nextId = 1;
                return _this;
            }
            CustomerGrossSalesGrid.prototype.getColumnsKey = function () { return "BasicSamples.CustomerGrossSales"; };
            CustomerGrossSalesGrid.prototype.getIdProperty = function () { return "__id"; };
            CustomerGrossSalesGrid.prototype.getNameProperty = function () { return SCMONLINE.Northwind.CustomerGrossSalesRow.nameProperty; };
            CustomerGrossSalesGrid.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.CustomerGrossSalesRow.localTextPrefix; };
            CustomerGrossSalesGrid.prototype.getService = function () { return BasicSamples.CustomerGrossSalesService.baseUrl; };
            /**
             * This method is called to preprocess data returned from the list service
             */
            CustomerGrossSalesGrid.prototype.onViewProcessData = function (response) {
                response = _super.prototype.onViewProcessData.call(this, response);
                // there is no __id property in CustomerGrossSalesRow but 
                // this is javascript and we can set any property of an object
                for (var _i = 0, _a = response.Entities; _i < _a.length; _i++) {
                    var x = _a[_i];
                    x.__id = this.nextId++;
                }
                return response;
            };
            CustomerGrossSalesGrid.prototype.getButtons = function () {
                var _this = this;
                var buttons = [];
                buttons.push(SCMONLINE.Common.ExcelExportHelper.createToolButton({
                    grid: this,
                    service: BasicSamples.CustomerGrossSalesService.baseUrl + '/ListExcel',
                    onViewSubmit: function () { return _this.onViewSubmit(); },
                    separator: true
                }));
                buttons.push(SCMONLINE.Common.PdfExportHelper.createToolButton({
                    grid: this,
                    onViewSubmit: function () { return _this.onViewSubmit(); }
                }));
                return buttons;
            };
            CustomerGrossSalesGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                // need to register this plugin for grouping or you'll have errors
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                this.view.setSummaryOptions({
                    aggregators: [
                        new Slick.Aggregators.Sum('GrossAmount')
                    ]
                });
                this.view.setGrouping([{
                        getter: 'ContactName'
                    }]);
                return grid;
            };
            CustomerGrossSalesGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.showFooterRow = true;
                return opt;
            };
            CustomerGrossSalesGrid.prototype.usePager = function () {
                return false;
            };
            CustomerGrossSalesGrid.prototype.getQuickFilters = function () {
                var filters = _super.prototype.getQuickFilters.call(this);
                // we create a date-range quick filter, which is a composite
                // filter with two date time editors
                var orderDate = this.dateRangeQuickFilter('OrderDate', 'Order Date');
                // need to override its handler, as default date-range filter will set Criteria parameter of list request.
                // we need to set StartDate and EndDate custom parameters of our CustomerGrossSalesListRequest
                orderDate.handler = function (args) {
                    // args.widget here is the start date editor. value of a date editor is a ISO date string
                    var start = args.widget.value;
                    // to find end date editor, need to search it by its css class among siblings
                    var end = args.widget.element.nextAll('.s-DateEditor')
                        .getWidget(Serenity.DateEditor).value;
                    args.request.StartDate = start;
                    args.request.EndDate = end;
                    // active option controls when a filter editor looks active, e.g. its label is blueish
                    args.active = !Q.isEmptyOrNull(start) || !Q.isEmptyOrNull(end);
                };
                filters.push(orderDate);
                return filters;
            };
            CustomerGrossSalesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerGrossSalesGrid);
            return CustomerGrossSalesGrid;
        }(Serenity.EntityGrid));
        BasicSamples.CustomerGrossSalesGrid = CustomerGrossSalesGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var TreeGrid = /** @class */ (function (_super) {
            __extends(TreeGrid, _super);
            function TreeGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.treeMixin = new Serenity.TreeGridMixin({
                    grid: _this,
                    // bring tree items initially collapsed
                    initialCollapse: function () { return true; },
                    // which column to place tree toggle / expand/collapse button
                    toggleField: "CustomerCompanyName" /* CustomerCompanyName */,
                    getParentId: function (x) {
                        // as we don't have parentId column here, we are cheating by using modulus 10 and 50
                        // e.g. order with ID 1605 will have parent 1600, order with ID 1613 will have parent 1610
                        var parentId = Math.floor(x.OrderID / 10) * 10;
                        if (parentId == x.OrderID) {
                            parentId = Math.floor(x.OrderID / 50) * 50;
                            // orders with ID 16050 and 17000 should have NULL parent
                            if (parentId == x.OrderID)
                                return null;
                        }
                        // if you had a ParentID column, you'd just return x.ParentID
                        return parentId;
                    }
                });
                return _this;
            }
            TreeGrid.prototype.usePager = function () {
                return false;
            };
            TreeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TreeGrid);
            return TreeGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.TreeGrid = TreeGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var ViewWithoutIDGrid = /** @class */ (function (_super) {
            __extends(ViewWithoutIDGrid, _super);
            function ViewWithoutIDGrid(container) {
                var _this = _super.call(this, container) || this;
                // this is our autoincrementing counter
                _this.nextId = 1;
                return _this;
            }
            ViewWithoutIDGrid.prototype.getColumnsKey = function () { return "Northwind.SalesByCategory"; };
            ViewWithoutIDGrid.prototype.getIdProperty = function () { return "__id"; };
            ViewWithoutIDGrid.prototype.getNameProperty = function () { return SCMONLINE.Northwind.SalesByCategoryRow.nameProperty; };
            ViewWithoutIDGrid.prototype.getLocalTextPrefix = function () { return SCMONLINE.Northwind.SalesByCategoryRow.localTextPrefix; };
            ViewWithoutIDGrid.prototype.getService = function () { return SCMONLINE.Northwind.SalesByCategoryService.baseUrl; };
            /**
             * This method is called to preprocess data returned from the list service
             */
            ViewWithoutIDGrid.prototype.onViewProcessData = function (response) {
                response = _super.prototype.onViewProcessData.call(this, response);
                // there is no __id property in SalesByCategoryRow but 
                // this is javascript and we can set any property of an object
                for (var _i = 0, _a = response.Entities; _i < _a.length; _i++) {
                    var x = _a[_i];
                    x.__id = this.nextId++;
                }
                return response;
            };
            ViewWithoutIDGrid.prototype.getButtons = function () {
                return [];
            };
            ViewWithoutIDGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ViewWithoutIDGrid);
            return ViewWithoutIDGrid;
        }(Serenity.EntityGrid));
        BasicSamples.ViewWithoutIDGrid = ViewWithoutIDGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var VSGalleryQAGrid = /** @class */ (function (_super) {
            __extends(VSGalleryQAGrid, _super);
            function VSGalleryQAGrid(container) {
                return _super.call(this, container) || this;
            }
            VSGalleryQAGrid.prototype.getColumnsKey = function () { return "BasicSamples.VSGalleryQA"; };
            VSGalleryQAGrid.prototype.getIdProperty = function () { return "ThreadId"; };
            VSGalleryQAGrid.prototype.getService = function () { return BasicSamples.VSGalleryQAService.baseUrl; };
            VSGalleryQAGrid.prototype.getButtons = function () {
                return [];
            };
            VSGalleryQAGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.rowHeight = 250;
                return opt;
            };
            VSGalleryQAGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                Q.first(columns, function (x) { return x.field == 'Posts'; }).format = function (ctx) {
                    var posts = ctx.value;
                    if (!posts || !posts.length)
                        return "";
                    var i = 0;
                    var text = "<ul class='posts'>";
                    for (var _i = 0, posts_1 = posts; _i < posts_1.length; _i++) {
                        var post = posts_1[_i];
                        text += "<li class='" + (i++ % 2 == 0 ? 'even' : 'odd') + "'><h4>";
                        text += post.PostedByName + " - ";
                        text += Q.formatDate(post.PostedOn, 'g');
                        text += "</h4><pre>";
                        text += Q.htmlEncode(post.Message);
                        text += "</pre></li>";
                    }
                    text += "</ul>";
                    return text;
                };
                return columns;
            };
            VSGalleryQAGrid.prototype.getInitialTitle = function () {
                return null;
            };
            VSGalleryQAGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VSGalleryQAGrid);
            return VSGalleryQAGrid;
        }(Serenity.EntityGrid));
        BasicSamples.VSGalleryQAGrid = VSGalleryQAGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
/// <reference path="../../../Northwind/Order/OrderGrid.ts" />
var SCMONLINE;
(function (SCMONLINE) {
    var BasicSamples;
    (function (BasicSamples) {
        var WrappedHeadersGrid = /** @class */ (function (_super) {
            __extends(WrappedHeadersGrid, _super);
            function WrappedHeadersGrid(container) {
                return _super.call(this, container) || this;
            }
            WrappedHeadersGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], WrappedHeadersGrid);
            return WrappedHeadersGrid;
        }(SCMONLINE.Northwind.OrderGrid));
        BasicSamples.WrappedHeadersGrid = WrappedHeadersGrid;
    })(BasicSamples = SCMONLINE.BasicSamples || (SCMONLINE.BasicSamples = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var ChangePasswordPanel = /** @class */ (function (_super) {
            __extends(ChangePasswordPanel, _super);
            function ChangePasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ChangePasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.w('ConfirmPassword', Serenity.PasswordEditor).value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ChangePassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ChangePassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ChangePasswordPanel.prototype.getFormKey = function () { return Membership.ChangePasswordForm.formKey; };
            ChangePasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ChangePasswordPanel);
            return ChangePasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ChangePasswordPanel = ChangePasswordPanel;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordPanel = /** @class */ (function (_super) {
            __extends(ForgotPasswordPanel, _super);
            function ForgotPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ForgotPasswordForm(_this.idPrefix);
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ForgotPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ForgotPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ForgotPasswordPanel.prototype.getFormKey = function () { return Membership.ForgotPasswordForm.formKey; };
            ForgotPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ForgotPasswordPanel);
            return ForgotPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ForgotPasswordPanel = ForgotPasswordPanel;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var ResetPasswordPanel = /** @class */ (function (_super) {
            __extends(ResetPasswordPanel, _super);
            function ResetPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ResetPasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    request.Token = _this.byId('Token').val();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ResetPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ResetPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/Account/Login');
                            });
                        }
                    });
                });
                return _this;
            }
            ResetPasswordPanel.prototype.getFormKey = function () { return Membership.ResetPasswordForm.formKey; };
            ResetPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ResetPasswordPanel);
            return ResetPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ResetPasswordPanel = ResetPasswordPanel;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var SCMONLINE;
(function (SCMONLINE) {
    var Membership;
    (function (Membership) {
        var SignUpPanel = /** @class */ (function (_super) {
            __extends(SignUpPanel, _super);
            function SignUpPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.SignUpForm(_this.idPrefix);
                _this.form.ConfirmEmail.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmEmail.value !== _this.form.Email.value) {
                        return Q.text('Validation.EmailConfirm');
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.Password.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/SignUp'),
                        request: {
                            DisplayName: _this.form.DisplayName.value,
                            Email: _this.form.Email.value,
                            Password: _this.form.Password.value
                        },
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.SignUp.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            SignUpPanel.prototype.getFormKey = function () { return Membership.SignUpForm.formKey; };
            SignUpPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], SignUpPanel);
            return SignUpPanel;
        }(Serenity.PropertyPanel));
        Membership.SignUpPanel = SignUpPanel;
    })(Membership = SCMONLINE.Membership || (SCMONLINE.Membership = {}));
})(SCMONLINE || (SCMONLINE = {}));
var _Ext;
(function (_Ext) {
    var ReplaceRowDialog = /** @class */ (function (_super) {
        __extends(ReplaceRowDialog, _super);
        function ReplaceRowDialog(request, entityList) {
            var _this = _super.call(this) || this;
            _this.request = request;
            _this.entityList = entityList;
            _this.form = new _Ext.ReplaceRowForm(_this.idPrefix);
            _this.dialogTitle = 'Replace Row';
            _this.form.DeletedEntityName.value = request.DeletedEntityName;
            _this.form.ReplaceWithEntityId.items = entityList.map(function (m) { return { id: String(m[request.IdProperty]), text: m[request.NameProperty], source: m }; });
            return _this;
        }
        ReplaceRowDialog.prototype.getFormKey = function () { return _Ext.ReplaceRowForm.formKey; };
        ReplaceRowDialog.prototype.getToolbarButtons = function () {
            var _this = this;
            var buttons = [];
            _super.prototype.getToolbarButtons.call(this);
            buttons.push({
                title: 'Replace',
                icon: 'fa fa fa-trash-o',
                onClick: function () {
                    if (_this.validateForm() == false)
                        return;
                    Q.confirm("Are you sure? \n\n" + _this.request.EntityTypeTitle + ": \"" + _this.request.DeletedEntityName + "\" will be deleted \nand all references will be replaced with \"" + _this.form.ReplaceWithEntityId.text + "\". \n\nThis action cannot be undone!\n\n", function () {
                        _this.request.ReplaceWithEntityId = Q.toId(_this.form.ReplaceWithEntityId.value);
                        Q.serviceRequest(Q.resolveUrl('~/Services/ReplaceRow/Replace'), _this.request, function (response) {
                            _this.dialogClose();
                            if (window['lastGrid']) //for single paged apps
                                window['lastGrid'].refresh();
                        });
                    });
                }
            });
            return buttons;
        };
        ReplaceRowDialog = __decorate([
            Serenity.Decorators.registerClass(),
            Serenity.Decorators.maximizable()
        ], ReplaceRowDialog);
        return ReplaceRowDialog;
    }(_Ext.DialogBase));
    _Ext.ReplaceRowDialog = ReplaceRowDialog;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var DevTools;
    (function (DevTools) {
        var SergenPanel = /** @class */ (function (_super) {
            __extends(SergenPanel, _super);
            function SergenPanel(container) {
                var _this = _super.call(this, container) || this;
                var vm = new Vue({
                    el: $('<div/>').appendTo(_this.element)[0],
                    data: {
                        connection: "",
                        connections: [],
                        tables: [],
                        generate: {
                            Row: true,
                            Service: true,
                            UI: true
                        }
                    },
                    methods: {
                        generateCode: function (table) {
                            if (!table.Identifier) {
                                Q.notifyError("Identifier cannot be empty!");
                                return;
                            }
                            if (!table.Module) {
                                Q.notifyError("Module cannot be empty!");
                                return;
                            }
                            DevTools.SergenService.Generate({
                                ConnectionKey: this.connection,
                                Table: table,
                                GenerateOptions: this.generate
                            }, function (r) {
                                Q.notifySuccess("Code for selected table is generated. You'll need to rebuild your project.");
                            });
                        }
                    },
                    watch: {
                        connection: function (val) {
                            if (!val || !val.length)
                                vm.tables = [];
                            else
                                DevTools.SergenService.ListTables({
                                    ConnectionKey: val
                                }, function (response) { return vm.tables = response.Entities; });
                        }
                    },
                    template: Q.getTemplate('_Ext.SergenPanel')
                });
                DevTools.SergenService.ListConnections({}, function (response) { return vm.connections = response.Entities; });
                return _this;
            }
            return SergenPanel;
        }(Serenity.Widget));
        DevTools.SergenPanel = SergenPanel;
    })(DevTools = _Ext.DevTools || (_Ext.DevTools = {}));
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var GridItemPickerDialog = /** @class */ (function (_super) {
        __extends(GridItemPickerDialog, _super);
        function GridItemPickerDialog(options) {
            var _this = _super.call(this, options) || this;
            _this.onSuccess = function (selectedItems) { };
            var gridType = options.gridType;
            if (!gridType.prototype)
                gridType = Q.typeByFullName(options.gridType);
            try {
                _this.checkGrid = new gridType(_this.byId("RowSelectionCheckGrid"), options);
                if (options.preSelectedKeys)
                    _this.checkGrid.selectedKeys = options.preSelectedKeys;
                _this.dialogTitle = "Select " + _this.checkGrid.getTitle();
                _this.checkGrid.setTitle(null);
                _this.checkGrid.pickerDialog = _this;
            }
            catch (ex) {
                Q.notifyError('Could not intialize ' + options.gridType);
            }
            return _this;
        }
        GridItemPickerDialog.prototype.getTemplate = function () {
            return "<div id=\"~_RowSelectionCheckGrid\" \n                class=\"RowSelectionCheckGrid " + (this.options.multiple == true ? 'multi-select' : 'single-select') + "\" \n                style = \"margin: 15px 15px 0 15px;\" >\n            </div>";
        };
        Object.defineProperty(GridItemPickerDialog.prototype, "selectedItems", {
            get: function () { return this.checkGrid.selectedItems; },
            enumerable: true,
            configurable: true
        });
        GridItemPickerDialog.prototype.getDialogOptions = function () {
            var _this = this;
            var opt = _super.prototype.getDialogOptions.call(this);
            opt.buttons = [{
                    text: Q.text("Dialogs.OkButton"),
                    click: function () {
                        var selectedItems = _this.checkGrid.selectedItems;
                        if (!selectedItems.length) {
                            Q.notifyWarning("Please select some items!");
                            return;
                        }
                        _this.onSuccess(selectedItems);
                        _this.dialogClose();
                    }
                }, {
                    text: Q.text("Dialogs.CancelButton"),
                    click: function () {
                        _this.dialogClose();
                    }
                }];
            return opt;
        };
        GridItemPickerDialog = __decorate([
            Serenity.Decorators.registerClass()
        ], GridItemPickerDialog);
        return GridItemPickerDialog;
    }(Serenity.TemplatedDialog));
    _Ext.GridItemPickerDialog = GridItemPickerDialog;
})(_Ext || (_Ext = {}));
var _Ext;
(function (_Ext) {
    var GridItemPickerEditor = /** @class */ (function (_super) {
        __extends(GridItemPickerEditor, _super);
        function GridItemPickerEditor(container, options) {
            var _this = _super.call(this, container, options) || this;
            setTimeout(function () {
                _this.element.find('.btn').click(function (e) {
                    var pickerDialog = new _Ext.GridItemPickerDialog(options);
                    pickerDialog.onSuccess = function (selectedItems) {
                        _this.value = pickerDialog.checkGrid.rowSelection.getSelectedKeys().join(',');
                        _this.text = selectedItems.map(function (m) { return m[options.nameFieldInGridRow]; }).join(', ');
                    };
                    pickerDialog.dialogOpen();
                });
            }, 500);
            return _this;
        }
        GridItemPickerEditor.prototype.getTemplate = function () {
            return "<div class=\"input-group\">\n                        <input type=\"hidden\" class=\"value\" />\n                        <input type=\"text\" class=\"form-control text\" disabled/>\n                          <span class=\"input-group-btn\">\n                            <button class=\"btn btn-default\" style=\"height: 27px; padding-top: 3px;\" type=\"button\"><i class=\"fa fa-search\"></i></button>\n                          </span>\n                    </div>";
        };
        ;
        GridItemPickerEditor.prototype.getEditValue = function (property, target) { target[property.name] = this.value; };
        GridItemPickerEditor.prototype.setEditValue = function (source, property) { this.value = source[property.name]; this.text = source[this.options.nameFieldInThisRow]; };
        Object.defineProperty(GridItemPickerEditor.prototype, "value", {
            get: function () {
                var editVal = this.element.find('input.value').val();
                return editVal;
            },
            set: function (val) {
                this.element.find('input.value').val(val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridItemPickerEditor.prototype, "text", {
            get: function () {
                var editVal = this.element.find('input.text').val();
                return editVal;
            },
            set: function (val) {
                this.element.find('input.text').val(val);
            },
            enumerable: true,
            configurable: true
        });
        GridItemPickerEditor = __decorate([
            Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue]),
            Serenity.Decorators.editor(),
            Serenity.Decorators.element("<div/>")
        ], GridItemPickerEditor);
        return GridItemPickerEditor;
    }(Serenity.TemplatedWidget));
    _Ext.GridItemPickerEditor = GridItemPickerEditor;
})(_Ext || (_Ext = {}));
//# sourceMappingURL=SCMONLINE.Web.js.map